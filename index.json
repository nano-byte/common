{
  "api/NanoByte.Common.AnsiCli.html": {
    "href": "api/NanoByte.Common.AnsiCli.html",
    "title": "Class AnsiCli | NanoByte.Common",
    "summary": "Class AnsiCli Namespace NanoByte.Common Assembly NanoByte.Common.AnsiCli.dll Helper methods for ANSI console rendering. public static class AnsiCli Inheritance object AnsiCli Properties Error Used to write to the standard error stream. public static IAnsiConsole Error { get; } Property Value IAnsiConsole Methods Prompt<T>(TextPrompt<T>, CancellationToken) Displays a prompt to the user. public static T Prompt<T>(TextPrompt<T> prompt, CancellationToken cancellationToken) Parameters prompt TextPrompt<T> The prompt to display. cancellationToken CancellationToken Used to cancel the prompt. Returns T The prompt input result. Type Parameters T The prompt result type. Table<T>(IEnumerable<T>) Formats data as a table. public static IRenderable Table<T>(IEnumerable<T> data) Parameters data IEnumerable<T> The data to format. Returns IRenderable Type Parameters T Title(string) Formats text as a title. public static IRenderable Title(string title) Parameters title string Returns IRenderable Tree<T>(NamedCollection<T>, char) Formats data as a tree. public static IRenderable Tree<T>(NamedCollection<T> data, char separator = '|') where T : INamed Parameters data NamedCollection<T> The data to show as nodes in the tree. separator char The character used to split Names into tree levels. Returns IRenderable Type Parameters T"
  },
  "api/NanoByte.Common.BitwiseUtils.html": {
    "href": "api/NanoByte.Common.BitwiseUtils.html",
    "title": "Class BitwiseUtils | NanoByte.Common",
    "summary": "Class BitwiseUtils Namespace NanoByte.Common Assembly NanoByte.Common.dll Provides utility functions for bitwise operations. public static class BitwiseUtils Inheritance object BitwiseUtils Methods CombineHiLoNibble(int, int) Combines a high nibble and a low nibble (4 bits) into a single byte. [Pure] public static byte CombineHiLoNibble(int high, int low) Parameters high int low int Returns byte HiNibble(byte) Extracts the high-order nibble (first 4 bits) of a byte. [Pure] public static int HiNibble(byte b) Parameters b byte The byte to extract from. Returns int The high-order nibble as an integer. HiWord(int) Extracts the high-order word (last 16 bits) of a 32-bit integer. [Pure] public static short HiWord(int l) Parameters l int Returns short HiWord(uint) Extracts the high-order word (last 16 bits) of a 32-bit integer. [CLSCompliant(false)] [Pure] public static short HiWord(uint l) Parameters l uint Returns short LoNibble(byte) Extracts the low-order nibble (last 4 bits) of a byte. [Pure] public static int LoNibble(byte b) Parameters b byte The byte to extract from. Returns int The low-order nibble as an integer. LoWord(int) Extracts the low-order word (first 16 bits) of a 32-bit integer. [Pure] public static short LoWord(int l) Parameters l int Returns short LoWord(uint) Extracts the low-order word (first 16 bits) of a 32-bit integer. [CLSCompliant(false)] [Pure] public static short LoWord(uint l) Parameters l uint Returns short XOr(byte[], byte[]) Combines two byte arrays via Exclusive Or. [Pure] public static byte[] XOr(byte[] array1, byte[] array2) Parameters array1 byte[] array2 byte[] Returns byte[]"
  },
  "api/NanoByte.Common.Collections.ArrayBuffer-1.html": {
    "href": "api/NanoByte.Common.Collections.ArrayBuffer-1.html",
    "title": "Class ArrayBuffer<T> | NanoByte.Common",
    "summary": "Class ArrayBuffer<T> Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll An array rented from the System.Buffers.ArrayPool<T>. public sealed class ArrayBuffer<T> Type Parameters T Inheritance object ArrayBuffer<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ArrayBuffer(int) An array rented from the System.Buffers.ArrayPool<T>. public ArrayBuffer(int length) Parameters length int The desired array length. Properties Array The array. The length may be equal to or greater than the requested Length. public T[] Array { get; } Property Value T[] Exceptions ObjectDisposedException Dispose() has been called. Length The requested length of the array. public int Length { get; } Property Value int Segment A view of the array with exactly the requested Length. public ArraySegment<T> Segment { get; } Property Value ArraySegment<T> Exceptions ObjectDisposedException Dispose() has been called. Span A view of the array with exactly the requested Length. public Span<T> Span { get; } Property Value Span<T> Exceptions ObjectDisposedException Dispose() has been called. Methods Dispose() Returns the array to the System.Buffers.ArrayPool<T>. public void Dispose()"
  },
  "api/NanoByte.Common.Collections.ArrayUtils.html": {
    "href": "api/NanoByte.Common.Collections.ArrayUtils.html",
    "title": "Class ArrayUtils | NanoByte.Common",
    "summary": "Class ArrayUtils Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll Provides array-related helper methods. public static class ArrayUtils Inheritance object ArrayUtils Methods Append<T>(T[], T) Appends an element to an array. [Pure] public static T[] Append<T>(this T[] array, T element) Parameters array T[] element T Returns T[] Type Parameters T AsArray<T>(ArraySegment<T>) Converts an System.ArraySegment<T> to an array. Avoids copying the underlying array if possible. public static T[] AsArray<T>(this ArraySegment<T> segment) Parameters segment ArraySegment<T> Returns T[] Type Parameters T Concat<T>(T[], T[]) Concatenates two array. [Pure] public static T[] Concat<T>(this T[] first, T[] second) Parameters first T[] second T[] Returns T[] Type Parameters T Concat<T>(params T[][]) Concatenates multiple arrays. [Pure] public static T[] Concat<T>(params T[][] arrays) Parameters arrays T[][] Returns T[] Type Parameters T Prepend<T>(T[], T) Prepends an element to an array. [Pure] public static T[] Prepend<T>(this T[] array, T element) Parameters array T[] element T Returns T[] Type Parameters T SequencedEquals<T>(T[], T[], IEqualityComparer<T>?) Determines whether two arrays contain the same elements in the same order. [Pure] public static bool SequencedEquals<T>(this T[] first, T[] second, IEqualityComparer<T>? comparer = null) Parameters first T[] The first of the two collections to compare. second T[] The first of the two collections to compare. comparer IEqualityComparer<T> Controls how to compare elements; leave null for default comparer. Returns bool Type Parameters T"
  },
  "api/NanoByte.Common.Collections.CollectionExtensions.html": {
    "href": "api/NanoByte.Common.Collections.CollectionExtensions.html",
    "title": "Class CollectionExtensions | NanoByte.Common",
    "summary": "Class CollectionExtensions Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll Provides extension methods for System.Collections.Generic.ICollection<T>s. public static class CollectionExtensions Inheritance object CollectionExtensions Methods AddIfNew<T>(ICollection<T>, T) Adds an element to the collection if it does not already System.Collections.Generic.ICollection<T>.Contains(T) the element. public static bool AddIfNew<T>(this ICollection<T> collection, T element) Parameters collection ICollection<T> element T Returns bool true if the element was added to the collection; true if the collection already contained the element. Type Parameters T Remarks This makes it possible to use a System.Collections.Generic.ICollection<T> with semantics similar to a System.Collections.Generic.HashSet<T>. Add<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) Adds multiple elements to the collection. public static void Add<TCollection, TElements>(this ICollection<TCollection> collection, IEnumerable<TElements> elements) where TElements : TCollection Parameters collection ICollection<TCollection> elements IEnumerable<TElements> Type Parameters TCollection TElements RemoveAll<T>(ICollection<T>, Func<T, bool>) Removes all items from a collection that match a specific condition. public static bool RemoveAll<T>(this ICollection<T> collection, Func<T, bool> condition) Parameters collection ICollection<T> condition Func<T, bool> Returns bool true if any elements where removed. Type Parameters T See Also RemoveAll(Predicate<T>) Remove<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) Removes multiple elements from the collection. public static bool Remove<TCollection, TElements>(this ICollection<TCollection> collection, IEnumerable<TElements> elements) where TElements : TCollection Parameters collection ICollection<TCollection> elements IEnumerable<TElements> Returns bool true if any elements where removed. Type Parameters TCollection TElements"
  },
  "api/NanoByte.Common.Collections.ConcurrentSet-1.html": {
    "href": "api/NanoByte.Common.Collections.ConcurrentSet-1.html",
    "title": "Class ConcurrentSet<T> | NanoByte.Common",
    "summary": "Class ConcurrentSet<T> Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll Represents a thread-safe set of values. public class ConcurrentSet<T> where T : notnull Type Parameters T The type of the values in the set. Inheritance object ConcurrentSet<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) CollectionExtensions.AddIfNew<T>(ICollection<T>, T) CollectionExtensions.Add<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) CollectionExtensions.RemoveAll<T>(ICollection<T>, Func<T, bool>) CollectionExtensions.Remove<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks This class is thread-safe. Constructors ConcurrentSet() Creates a new concurrent set. public ConcurrentSet() ConcurrentSet(IEnumerable<T>) Creates a new concurrent set. public ConcurrentSet(IEnumerable<T> collection) Parameters collection IEnumerable<T> Elements to be copied to the new set. ConcurrentSet(IEnumerable<T>, IEqualityComparer<T>) Creates a new concurrent set. public ConcurrentSet(IEnumerable<T> collection, IEqualityComparer<T> comparer) Parameters collection IEnumerable<T> Elements to be copied to the new set. comparer IEqualityComparer<T> The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing elements. ConcurrentSet(IEqualityComparer<T>) Creates a new concurrent set. public ConcurrentSet(IEqualityComparer<T> comparer) Parameters comparer IEqualityComparer<T> The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing elements. ConcurrentSet(int, IEnumerable<T>, IEqualityComparer<T>) Creates a new concurrent set. public ConcurrentSet(int concurrencyLevel, IEnumerable<T> collection, IEqualityComparer<T> comparer) Parameters concurrencyLevel int The estimated number of threads that will update the set concurrently collection IEnumerable<T> Elements to be copied to the new set. comparer IEqualityComparer<T> The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing values. ConcurrentSet(int, int) Creates a new concurrent set. public ConcurrentSet(int concurrencyLevel, int capacity) Parameters concurrencyLevel int The estimated number of threads that will update the set concurrently capacity int The initial number of elements that the set can contain. Properties Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the System.Collections.Generic.ICollection<T>. IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the System.Collections.Generic.ICollection<T> is read-only; otherwise, false. Methods Add(T) Adds an item to the System.Collections.Generic.ICollection<T>. public void Add(T item) Parameters item T The object to add to the System.Collections.Generic.ICollection<T>. Exceptions NotSupportedException The System.Collections.Generic.ICollection<T> is read-only. Clear() Removes all items from the System.Collections.Generic.ICollection<T>. public void Clear() Exceptions NotSupportedException The System.Collections.Generic.ICollection<T> is read-only. Contains(T) Determines whether the System.Collections.Generic.ICollection<T> contains a specific value. public bool Contains(T item) Parameters item T The object to locate in the System.Collections.Generic.ICollection<T>. Returns bool true if item is found in the System.Collections.Generic.ICollection<T>; otherwise, false. CopyTo(T[], int) Copies the elements of the System.Collections.Generic.ICollection<T> to an System.Array, starting at a particular System.Array index. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.ICollection<T>. The System.Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source System.Collections.Generic.ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through a collection. [MustDisposeResource] public IEnumerator GetEnumerator() Returns IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Remove(T) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T>. public bool Remove(T item) Parameters item T The object to remove from the System.Collections.Generic.ICollection<T>. Returns bool true if item was successfully removed from the System.Collections.Generic.ICollection<T>; otherwise, false. This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T>. Exceptions NotSupportedException The System.Collections.Generic.ICollection<T> is read-only."
  },
  "api/NanoByte.Common.Collections.CultureComparer.html": {
    "href": "api/NanoByte.Common.Collections.CultureComparer.html",
    "title": "Class CultureComparer | NanoByte.Common",
    "summary": "Class CultureComparer Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll This compares two System.Globalization.CultureInfos by alphabetically comparing their string representations. public sealed class CultureComparer Inheritance object CultureComparer Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields Instance A singleton instance of the comparer. public static readonly CultureComparer Instance Field Value CultureComparer Methods Compare(CultureInfo?, CultureInfo?) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. public int Compare(CultureInfo? x, CultureInfo? y) Parameters x CultureInfo The first object to compare. y CultureInfo The second object to compare. Returns int A signed integer that indicates the relative values of x and y, as shown in the following table.Value Meaning Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y."
  },
  "api/NanoByte.Common.Collections.DefaultComparer-1.html": {
    "href": "api/NanoByte.Common.Collections.DefaultComparer-1.html",
    "title": "Class DefaultComparer<T> | NanoByte.Common",
    "summary": "Class DefaultComparer<T> Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll Compares objects using their System.IComparable implementation. public sealed class DefaultComparer<T> where T : IComparable<T> Type Parameters T Inheritance object DefaultComparer<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields Instance A singleton instance of the comparer. public static readonly DefaultComparer<T> Instance Field Value DefaultComparer<T> Methods Compare(T?, T?) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. public int Compare(T? x, T? y) Parameters x T The first object to compare. y T The second object to compare. Returns int A signed integer that indicates the relative values of x and y, as shown in the following table.Value Meaning Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y."
  },
  "api/NanoByte.Common.Collections.DictionaryExtensions.html": {
    "href": "api/NanoByte.Common.Collections.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | NanoByte.Common",
    "summary": "Class DictionaryExtensions Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll Provides extension methods for System.Collections.Generic.Dictionary<TKey, TValue>s. public static class DictionaryExtensions Inheritance object DictionaryExtensions Methods AddRange<TSourceKey, TSourceValue, TTargetKey, TTargetValue>(IDictionary<TTargetKey, TTargetValue>, IEnumerable<KeyValuePair<TSourceKey, TSourceValue>>) Adds multiple pairs to the dictionary in one go. public static void AddRange<TSourceKey, TSourceValue, TTargetKey, TTargetValue>(this IDictionary<TTargetKey, TTargetValue> target, IEnumerable<KeyValuePair<TSourceKey, TSourceValue>> source) where TSourceKey : TTargetKey where TSourceValue : TTargetValue where TTargetKey : notnull Parameters target IDictionary<TTargetKey, TTargetValue> source IEnumerable<KeyValuePair<TSourceKey, TSourceValue>> Type Parameters TSourceKey TSourceValue TTargetKey TTargetValue Deconstruct<TKey, TValue>(KeyValuePair<TKey, TValue>, out TKey, out TValue) Deconstructs a System.Collections.Generic.KeyValuePair<TKey, TValue> like a tuple. [Pure] public static void Deconstruct<TKey, TValue>(this KeyValuePair<TKey, TValue> pair, out TKey key, out TValue value) Parameters pair KeyValuePair<TKey, TValue> key TKey value TValue Type Parameters TKey TValue Examples foreach (var (key, value) in dictionary) {/.../} GetOrAddAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<Task<TValue>>) Returns an existing element with a specific key from a dictionary or creates and adds a new element using a callback if it is missing. public static Task<TValue> GetOrAddAsync<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<Task<TValue>> valueFactory) where TKey : notnull Parameters dictionary IDictionary<TKey, TValue> The dictionary to get an element from or to add an element to. key TKey The key to look for in the dictionary. valueFactory Func<Task<TValue>> A callback that provides a task that provides the value to add to the dictionary if the key is not found. Returns Task<TValue> The existing element or the newly created element. Type Parameters TKey TValue Remarks Superfluous calls to valueFactory may occur in case of read races. System.IDisposable.Dispose() is called on superfluously created objects if implemented. GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey) Returns an existing element with a specific key from a dictionary or creates and adds a new element using the default constructor if it is missing. public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key) where TKey : notnull where TValue : new() Parameters dictionary IDictionary<TKey, TValue> The dictionary to get an element from or to add an element to. key TKey The key to look for in the dictionary. Returns TValue The existing element or the newly created element. Type Parameters TKey TValue GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) Returns an existing element with a specific key from a dictionary or creates and adds a new element using a callback if it is missing. public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TValue> valueFactory) where TKey : notnull Parameters dictionary IDictionary<TKey, TValue> The dictionary to get an element from or to add an element to. key TKey The key to look for in the dictionary. valueFactory Func<TValue> A callback that provides the value to add to the dictionary if the key is not found. Returns TValue The existing element or the newly created element. Type Parameters TKey TValue Remarks No superfluous calls to valueFactory occur. Not thread-safe! GetUnsequencedHashCode<TKey, TValue>(IDictionary<TKey, TValue>, IEqualityComparer<TValue>?) Generates a hash code for the contents of the dictionary. [Pure] public static int GetUnsequencedHashCode<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, IEqualityComparer<TValue>? valueComparer = null) where TKey : notnull Parameters dictionary IDictionary<TKey, TValue> The dictionary to generate the hash for. valueComparer IEqualityComparer<TValue> Controls how to compare values; leave null for default comparer. Returns int Type Parameters TKey TValue See Also UnsequencedEquals<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, IEqualityComparer<TValue>?) GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) Returns an existing element with a specific key from a dictionary or the value type's default value if it is missing. [Pure] public static TValue? GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key) Parameters dictionary IReadOnlyDictionary<TKey, TValue> The dictionary to get an element from. key TKey The key to look for in the dictionary. Returns TValue The existing element or the default value of TValue. Type Parameters TKey TValue GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, TValue) Returns an existing element with a specific key from a dictionary or a default value if it is missing. [Pure] public static TValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) Parameters dictionary IReadOnlyDictionary<TKey, TValue> The dictionary to get an element from. key TKey The key to look for in the dictionary. defaultValue TValue The default value to return if the element is missing. Returns TValue The existing element or defaultValue. Type Parameters TKey TValue ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) Builds a MultiDictionary<TKey, TValue> from an enumerable. [Pure] public static MultiDictionary<TKey, TValue> ToMultiDictionary<TSource, TKey, TValue>(this IEnumerable<TSource> elements, Func<TSource, TKey> keySelector, Func<TSource, TValue> valueSelector) where TKey : notnull Parameters elements IEnumerable<TSource> The elements to build the dictionary from. keySelector Func<TSource, TKey> Selects the dictionary key from an input element. valueSelector Func<TSource, TValue> Selects a dictionary value from an input element. Returns MultiDictionary<TKey, TValue> Type Parameters TSource TKey TValue TryAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Attempts to add the specified key and value to the dictionary. public static bool TryAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value) where TKey : notnull Parameters dictionary IDictionary<TKey, TValue> key TKey value TValue Returns bool true if the key/value pair was added to the dictionary successfully; false false if the key already existed in the dictionary. Type Parameters TKey TValue UnsequencedEquals<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, IEqualityComparer<TValue>?) Determines whether two dictionaries contain the same key-value pairs. [Pure] public static bool UnsequencedEquals<TKey, TValue>(this IDictionary<TKey, TValue> first, IDictionary<TKey, TValue> second, IEqualityComparer<TValue>? valueComparer = null) where TKey : notnull Parameters first IDictionary<TKey, TValue> The first of the two dictionaries to compare. second IDictionary<TKey, TValue> The first of the two dictionaries to compare. valueComparer IEqualityComparer<TValue> Controls how to compare values; leave null for default comparer. Returns bool Type Parameters TKey TValue"
  },
  "api/NanoByte.Common.Collections.EnumerableExtensions.html": {
    "href": "api/NanoByte.Common.Collections.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | NanoByte.Common",
    "summary": "Class EnumerableExtensions Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll Provides extension methods for System.Collections.Generic.IEnumerable<T>s. public static class EnumerableExtensions Inheritance object EnumerableExtensions Methods CloneElements<T>(IEnumerable<T>) Calls Clone() for every element in a enumeration and returns the results as a new enumeration. [LinqTunnel] public static IEnumerable<T> CloneElements<T>(this IEnumerable<T> enumerable) where T : ICloneable<T> Parameters enumerable IEnumerable<T> Returns IEnumerable<T> Type Parameters T ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) Determines whether one enumeration of elements contains any of the elements in another. [Pure] public static bool ContainsAny<T>(this IEnumerable<T> first, IEnumerable<T> second, IEqualityComparer<T>? comparer = null) Parameters first IEnumerable<T> The first of the two enumerations to compare. second IEnumerable<T> The first of the two enumerations to compare. comparer IEqualityComparer<T> Controls how to compare elements; leave null for default comparer. Returns bool true if first contains any element from second. false if first or second is empty. Type Parameters T ContainsOrEmpty<T>(IEnumerable<T>, T) Determines whether the enumeration contains an element or is null. [Pure] public static bool ContainsOrEmpty<T>(this IEnumerable<T> enumeration, T element) Parameters enumeration IEnumerable<T> The list to check. element T The element to look for. Returns bool Type Parameters T Remarks Useful for lists that contain an OR-ed list of restrictions, where an empty list means no restrictions. DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) Filters a sequence of elements to remove any duplicates based on the equality of a key extracted from the elements. [LinqTunnel] public static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> enumeration, Func<T, TKey> keySelector) where T : notnull where TKey : notnull Parameters enumeration IEnumerable<T> The sequence of elements to filter. keySelector Func<T, TKey> A function mapping elements to their respective equality keys. Returns IEnumerable<T> Type Parameters T TKey Except<T>(IEnumerable<T>, Func<T, bool>) Filters a sequence of elements to remove any that match the predicate. The opposite of System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>). [LinqTunnel] public static IEnumerable<T> Except<T>(this IEnumerable<T> enumeration, Func<T, bool> predicate) Parameters enumeration IEnumerable<T> predicate Func<T, bool> Returns IEnumerable<T> Type Parameters T Except<T>(IEnumerable<T>, T) Filters a sequence of elements to remove any that are equal to element. [LinqTunnel] public static IEnumerable<T> Except<T>(this IEnumerable<T> enumeration, T element) Parameters enumeration IEnumerable<T> element T Returns IEnumerable<T> Type Parameters T Flatten<T>(IEnumerable<IEnumerable<T>>) Flattens a list of lists. [LinqTunnel] public static IEnumerable<T> Flatten<T>(this IEnumerable<IEnumerable<T>> enumeration) Parameters enumeration IEnumerable<IEnumerable<T>> Returns IEnumerable<T> Type Parameters T GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) Generates a hash code for the contents of the enumeration. Changing the elements' order will change the hash. [Pure] public static int GetSequencedHashCode<T>(this IEnumerable<T> enumeration, IEqualityComparer<T>? comparer = null) Parameters enumeration IEnumerable<T> The enumeration to generate the hash for. comparer IEqualityComparer<T> Controls how to compare elements; leave null for default comparer. Returns int Type Parameters T See Also SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) Generates a hash code for the contents of the enumeration. Changing the elements' order will not change the hash. [Pure] public static int GetUnsequencedHashCode<T>(this IEnumerable<T> enumeration, IEqualityComparer<T>? comparer = null) Parameters enumeration IEnumerable<T> The enumeration to generate the hash for. comparer IEqualityComparer<T> Controls how to compare elements; leave null for default comparer. Returns int Type Parameters T See Also UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) Determines the element in a list that maximizes a specified expression. [Pure] public static T MaxBy<T, TValue>(this IEnumerable<T> enumeration, Func<T, TValue> expression, IComparer<TValue>? comparer = null) Parameters enumeration IEnumerable<T> The elements to check. expression Func<T, TValue> The expression to maximize. comparer IComparer<TValue> Controls how to compare elements; leave null for default comparer. Returns T The element that maximizes the expression. Type Parameters T The type of the elements. TValue The type of the expression. Exceptions InvalidOperationException enumeration contains no elements. MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) Determines the element in a list that minimizes a specified expression. [Pure] public static T MinBy<T, TValue>(this IEnumerable<T> enumeration, Func<T, TValue> expression, IComparer<TValue>? comparer = null) Parameters enumeration IEnumerable<T> The elements to check. expression Func<T, TValue> The expression to minimize. comparer IComparer<TValue> Controls how to compare elements; leave null for default comparer. Returns T The element that minimizes the expression. Type Parameters T The type of the elements. TValue The type of the expression. Exceptions InvalidOperationException enumeration contains no elements. Permutate<T>(IEnumerable<T>) Generates all possible permutations of a set of elements. [LinqTunnel] public static IEnumerable<T[]> Permutate<T>(this IEnumerable<T> elements) Parameters elements IEnumerable<T> Returns IEnumerable<T[]> Type Parameters T SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) Determines whether two enumerations contain the same elements in the same order. [Pure] public static bool SequencedEquals<T>(this IEnumerable<T> first, IEnumerable<T> second, IEqualityComparer<T>? comparer = null) Parameters first IEnumerable<T> The first of the two enumerations to compare. second IEnumerable<T> The first of the two enumerations to compare. comparer IEqualityComparer<T> Controls how to compare elements; leave null for default comparer. Returns bool Type Parameters T TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) Performs a topological sort of an object graph. [Pure] public static IEnumerable<T> TopologicalSort<T>(this IEnumerable<T> nodes, Func<T, IEnumerable<T>> getDependencies) Parameters nodes IEnumerable<T> The set of nodes to sort. getDependencies Func<T, IEnumerable<T>> A function that retrieves all dependencies of a node. Returns IEnumerable<T> Type Parameters T Exceptions InvalidDataException Cyclic dependency found. TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) Maps elements using a selector. Calls a handler for specific exceptions, skips the element and continues enumerating with the element. [LinqTunnel] public static IEnumerable<TResult> TrySelect<TSource, TResult, TException>(this IEnumerable<TSource> source, Func<TSource, TResult> selector, Action<TException> exceptionHandler) where TException : Exception Parameters source IEnumerable<TSource> The elements to map. selector Func<TSource, TResult> The selector to execute for each source element. exceptionHandler Action<TException> A Callback to be invoked when a TException is caught. Returns IEnumerable<TResult> Type Parameters TSource The type of the input elements. TResult The type of the output elements. TException The type of exceptions to handle.. UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) Determines whether two enumerations contain the same elements disregarding the order they are in. [Pure] public static bool UnsequencedEquals<T>(this IEnumerable<T> first, IEnumerable<T> second, IEqualityComparer<T>? comparer = null) Parameters first IEnumerable<T> The first of the two enumerations to compare. second IEnumerable<T> The first of the two enumerations to compare. comparer IEqualityComparer<T> Controls how to compare elements; leave null for default comparer. Returns bool Type Parameters T WhereNotNull<T>(IEnumerable<T?>) Filters a sequence of elements to remove any null values. [LinqTunnel] public static IEnumerable<T> WhereNotNull<T>(this IEnumerable<T?> enumeration) where T : class Parameters enumeration IEnumerable<T> Returns IEnumerable<T> Type Parameters T"
  },
  "api/NanoByte.Common.Collections.LanguageSet.html": {
    "href": "api/NanoByte.Common.Collections.LanguageSet.html",
    "title": "Class LanguageSet | NanoByte.Common",
    "summary": "Class LanguageSet Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll A set of languages that can be serialized as a simple space-separated list of ISO language codes. [Serializable] [TypeConverter(typeof(StringConstructorConverter<LanguageSet>))] public class LanguageSet : SortedSet<CultureInfo> Inheritance object SortedSet<CultureInfo> LanguageSet Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) CollectionExtensions.AddIfNew<T>(ICollection<T>, T) CollectionExtensions.Add<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) CollectionExtensions.RemoveAll<T>(ICollection<T>, Func<T, bool>) CollectionExtensions.Remove<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.WhereNotNull<T>(IEnumerable<T?>) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks Uses Unix-style language codes with an underscore (_) separator. Constructors LanguageSet() Creates a new empty language collection. public LanguageSet() LanguageSet(IEnumerable<CultureInfo>) Creates a new language collection pre-filled with a set of languages. public LanguageSet(IEnumerable<CultureInfo> collection) Parameters collection IEnumerable<CultureInfo> LanguageSet(SerializationInfo, StreamingContext) protected LanguageSet(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext LanguageSet(string) Deserializes a space-separated list of languages codes. public LanguageSet(string value) Parameters value string A space-separated list of languages codes (in the same format as used by the LANG environment variable). Remarks Unknown language codes in value are replaced with System.Globalization.CultureInfo.InvariantCulture rather than raising an System.ArgumentException. Methods Add(string) Adds a language identified by a string to the collection. [CollectionAccess(CollectionAccessType.UpdatedContent)] public bool Add(string langCode) Parameters langCode string The string identifying the language to add. Returns bool true if the language could be added, false otherwise. Exceptions ArgumentException langCode is not a valid language code. ContainsAny(IEnumerable<CultureInfo>, bool) Determines whether this language set contains any of a set of target languages. [CollectionAccess(CollectionAccessType.Read)] public bool ContainsAny(IEnumerable<CultureInfo> targets, bool ignoreCountry = false) Parameters targets IEnumerable<CultureInfo> The language set to match against. ignoreCountry bool true to compare only the two-letter language name; false to also compare the country code. Returns bool ToString() Serializes the list as a space-separated list of languages codes. public override string ToString() Returns string"
  },
  "api/NanoByte.Common.Collections.ListExtensions.html": {
    "href": "api/NanoByte.Common.Collections.ListExtensions.html",
    "title": "Class ListExtensions | NanoByte.Common",
    "summary": "Class ListExtensions Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll Provides extension methods for System.Collections.Generic.List<T>s. public static class ListExtensions Inheritance object ListExtensions Methods AddOrReplace<T>(List<T>, T) Adds or replaces an element in a list. public static bool AddOrReplace<T>(this List<T> list, T element) Parameters list List<T> The list to update. element T The element to add or update. Returns bool Type Parameters T AddOrReplace<T, TKey>(List<T>, T, Func<T, TKey>) Adds or replaces an element in a list using a key selector for comparison. public static bool AddOrReplace<T, TKey>(this List<T> list, T element, Func<T, TKey> keySelector) Parameters list List<T> The list to update. element T The element to add or update. keySelector Func<T, TKey> Used to map elements to keys for comparison Returns bool Type Parameters T TKey AddRange<TList, TElements>(IList<TList>, IEnumerable<TElements>) Adds multiple elements to the list. public static void AddRange<TList, TElements>(this IList<TList> list, IEnumerable<TElements> elements) where TElements : TList Parameters list IList<TList> elements IEnumerable<TElements> Type Parameters TList TElements Remarks This is a covariant wrapper for System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>). GetAddedElements<T>(IReadOnlyList<T>?, IReadOnlyList<T>?) Assumes two sorted lists. Determines which elements are present in newList but not in oldList. [Pure] public static IReadOnlyList<T> GetAddedElements<T>(this IReadOnlyList<T>? newList, IReadOnlyList<T>? oldList) where T : IComparable<T>, IEquatable<T> Parameters newList IReadOnlyList<T> The new list of elements; can be null (will be treated as an empty list). oldList IReadOnlyList<T> The original list of elements; can be null (will be treated as an empty list). Returns IReadOnlyList<T> A list of elements that were added. Type Parameters T Remarks Elements that are present in oldList but not in newList are ignored. Elements that are equal for System.IComparable<T>.CompareTo(T) but have been otherwise modified will be added. GetAddedElements<T>(IReadOnlyList<T>?, IReadOnlyList<T>?, IComparer<T>) Assumes two sorted lists. Determines which elements are present in newList but not in oldList. [Pure] public static IReadOnlyList<T> GetAddedElements<T>(this IReadOnlyList<T>? newList, IReadOnlyList<T>? oldList, IComparer<T> comparer) Parameters newList IReadOnlyList<T> The new list of elements; can be null (will be treated as an empty list). oldList IReadOnlyList<T> The original list of elements; can be null (will be treated as an empty list). comparer IComparer<T> An object that compares to elements to determine which one is bigger. Returns IReadOnlyList<T> A list of elements that were added. Type Parameters T Remarks Elements that are present in oldList but not in newList are ignored. Elements that are equal for System.IComparable<T>.CompareTo(T) but have been otherwise modified will be added. RemoveLast<T>(List<T>, int) Removes the last n elements from the list. public static void RemoveLast<T>(this List<T> list, int number = 1) Parameters list List<T> The list to remove the elements from. number int The number of elements to remove. Type Parameters T"
  },
  "api/NanoByte.Common.Collections.LocalizableString.html": {
    "href": "api/NanoByte.Common.Collections.LocalizableString.html",
    "title": "Class LocalizableString | NanoByte.Common",
    "summary": "Class LocalizableString Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll A string with an associated language that can be XML serialized to an element with an xml:lang tag. [Serializable] public sealed class LocalizableString : ICloneable<LocalizableString> Inheritance object LocalizableString Implements ICloneable<LocalizableString> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields DefaultLanguage The default language: english with an invariant country. public static readonly CultureInfo DefaultLanguage Field Value CultureInfo Properties Language The language of the Value. public CultureInfo Language { get; set; } Property Value CultureInfo Value The actual string value to store. public string? Value { get; set; } Property Value string Methods Clone() Creates a plain copy of this string. public LocalizableString Clone() Returns LocalizableString The cloned string. Equals(LocalizableString?) Indicates whether the current object is equal to another object of the same type. public bool Equals(LocalizableString? other) Parameters other LocalizableString An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(LocalizableString?, LocalizableString?) public static bool operator ==(LocalizableString? left, LocalizableString? right) Parameters left LocalizableString right LocalizableString Returns bool operator !=(LocalizableString?, LocalizableString?) public static bool operator !=(LocalizableString? left, LocalizableString? right) Parameters left LocalizableString right LocalizableString Returns bool"
  },
  "api/NanoByte.Common.Collections.LocalizableStringCollection.html": {
    "href": "api/NanoByte.Common.Collections.LocalizableStringCollection.html",
    "title": "Class LocalizableStringCollection | NanoByte.Common",
    "summary": "Class LocalizableStringCollection Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll A collection of LocalizableStrings with language-search methods. [Serializable] public class LocalizableStringCollection : List<LocalizableString>, ICloneable<LocalizableStringCollection> Inheritance object List<LocalizableString> LocalizableStringCollection Implements ICloneable<LocalizableStringCollection> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) CollectionExtensions.AddIfNew<T>(ICollection<T>, T) CollectionExtensions.Add<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) CollectionExtensions.RemoveAll<T>(ICollection<T>, Func<T, bool>) CollectionExtensions.Remove<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.CloneElements<T>(IEnumerable<T>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.WhereNotNull<T>(IEnumerable<T?>) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) ListExtensions.AddRange<TList, TElements>(IList<TList>, IEnumerable<TElements>) ListExtensions.GetAddedElements<T>(IReadOnlyList<T>?, IReadOnlyList<T>?, IComparer<T>) ListExtensions.AddOrReplace<T>(List<T>, T) ListExtensions.AddOrReplace<T, TKey>(List<T>, T, Func<T, TKey>) ListExtensions.RemoveLast<T>(List<T>, int) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Add(string) Adds a new en string to the collection. public void Add(string value) Parameters value string The actual string value to store. Add(string, string?) Adds a new string with an associated language to the collection. public void Add(string language, string? value) Parameters language string The language of the value. value string The actual string value to store. Clone() Creates a deep copy of this LocalizableStringCollection (elements are cloned). public LocalizableStringCollection Clone() Returns LocalizableStringCollection The cloned LocalizableStringCollection. ContainsExactLanguage(CultureInfo) Checks if the collection contains an entry exactly matching the specified language. public bool ContainsExactLanguage(CultureInfo language) Parameters language CultureInfo The exact language to look for. Returns bool true if an element with the specified language exists in the collection; false otherwise. See Also GetExactLanguage(CultureInfo) GetBestLanguage(CultureInfo) Returns the best-fitting string in the collection for the specified language. public string? GetBestLanguage(CultureInfo language) Parameters language CultureInfo The language to look for. Returns string The best-fitting string value found in the collection; null if the collection is empty. Remarks Language preferences in decreasing order: exact match same language with neutral culture en en-US first entry in collection GetExactLanguage(CultureInfo) Returns the first string in the collection exactly matching the specified language. public string? GetExactLanguage(CultureInfo language) Parameters language CultureInfo The exact language to look for. Returns string The string value found in the collection; null if none was found. See Also ContainsExactLanguage(CultureInfo) Set(CultureInfo, string?) Adds a new string with an associated language to the collection. Preexisting entries with the same language are removed. public void Set(CultureInfo language, string? value) Parameters language CultureInfo The language of the value. value string The actual string value to store; null to remove existing entries."
  },
  "api/NanoByte.Common.Collections.MonitoredCollection-1.html": {
    "href": "api/NanoByte.Common.Collections.MonitoredCollection-1.html",
    "title": "Class MonitoredCollection<T> | NanoByte.Common",
    "summary": "Class MonitoredCollection<T> Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll A collection that can easily be monitored for changes via events. public class MonitoredCollection<T> : Collection<T> Type Parameters T The type of elements in the collection. Inheritance object Collection<T> MonitoredCollection<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) CollectionExtensions.AddIfNew<T>(ICollection<T>, T) CollectionExtensions.Add<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) CollectionExtensions.RemoveAll<T>(ICollection<T>, Func<T, bool>) CollectionExtensions.Remove<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) ListExtensions.AddRange<TList, TElements>(IList<TList>, IEnumerable<TElements>) ListExtensions.GetAddedElements<T>(IReadOnlyList<T>?, IReadOnlyList<T>?, IComparer<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors MonitoredCollection() Creates a new monitored collection. public MonitoredCollection() MonitoredCollection(int) Creates a new monitored collection with an upper limit to the number of elements. public MonitoredCollection(int maxElements) Parameters maxElements int The maximum number of elements; 0 for no limit. Properties MaxElements The maximum number of elements; 0 for no limit. public int MaxElements { get; } Property Value int Methods AddMany(IEnumerable<T>) Adds all the items in collection to the collection that weren't already there. public void AddMany(IEnumerable<T> collection) Parameters collection IEnumerable<T> A collection of items to add to the collection. Remarks All events are raised en bloc after the items have been added. After calling this method this collection will contain a superset of the items in collection, but not necessarily in the same order. ClearItems() Removes all elements from the System.Collections.ObjectModel.Collection<T>. protected override void ClearItems() InsertItem(int, T) Inserts an element into the System.Collections.ObjectModel.Collection<T> at the specified index. protected override void InsertItem(int index, T item) Parameters index int The zero-based index at which item should be inserted. item T The object to insert. The value can be null for reference types. Exceptions ArgumentOutOfRangeException index is less than zero.-or-index is greater than System.Collections.ObjectModel.Collection<T>.Count. RemoveItem(int) Removes the element at the specified index of the System.Collections.ObjectModel.Collection<T>. protected override void RemoveItem(int index) Parameters index int The zero-based index of the element to remove. Exceptions ArgumentOutOfRangeException index is less than zero.-or-index is equal to or greater than System.Collections.ObjectModel.Collection<T>.Count. SetItem(int, T) Replaces the element at the specified index. protected override void SetItem(int index, T item) Parameters index int The zero-based index of the element to replace. item T The new value for the element at the specified index. The value can be null for reference types. Exceptions ArgumentOutOfRangeException index is less than zero.-or-index is greater than System.Collections.ObjectModel.Collection<T>.Count. SetMany(IEnumerable<T>) Adds all the items in enumeration to the collection that weren't already there and removes all items in the collection that are not in enumeration. public void SetMany(IEnumerable<T> enumeration) Parameters enumeration IEnumerable<T> An enumeration with items to add to the collection. Remarks All events are raised en bloc after the items have been added. After calling this method this collection will contain the same items as enumeration, but not necessarily in the same order. Events Added Occurs when a new item has just been added to the collection. public event Action<T>? Added Event Type Action<T> Changed Occurs whenever something in the collection changes. public event Action? Changed Event Type Action Removed Occurs when an item has just been removed from the collection. public event Action<T>? Removed Event Type Action<T> Removing Occurs when an item is just about to be removed from the collection. public event Action<T>? Removing Event Type Action<T>"
  },
  "api/NanoByte.Common.Collections.MultiDictionary-2.html": {
    "href": "api/NanoByte.Common.Collections.MultiDictionary-2.html",
    "title": "Class MultiDictionary<TKey, TValue> | NanoByte.Common",
    "summary": "Class MultiDictionary<TKey, TValue> Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll A dictionary that allows a key to reference multiple values. [Serializable] public class MultiDictionary<TKey, TValue> : Dictionary<TKey, HashSet<TValue>> where TKey : notnull Type Parameters TKey The type to use as a key to identify entries in the dictionary. TValue The type to use as elements to store in the dictionary. Inheritance object Dictionary<TKey, HashSet<TValue>> MultiDictionary<TKey, TValue> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) CollectionExtensions.AddIfNew<T>(ICollection<T>, T) CollectionExtensions.Add<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) CollectionExtensions.RemoveAll<T>(ICollection<T>, Func<T, bool>) CollectionExtensions.Remove<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) DictionaryExtensions.AddRange<TSourceKey, TSourceValue, TTargetKey, TTargetValue>(IDictionary<TTargetKey, TTargetValue>, IEnumerable<KeyValuePair<TSourceKey, TSourceValue>>) DictionaryExtensions.GetOrAddAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<Task<TValue>>) DictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) DictionaryExtensions.GetUnsequencedHashCode<TKey, TValue>(IDictionary<TKey, TValue>, IEqualityComparer<TValue>?) DictionaryExtensions.TryAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) DictionaryExtensions.UnsequencedEquals<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, IEqualityComparer<TValue>?) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, TValue) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks This structure internally uses hash maps, so most operations run in O(1). Properties this[TKey] Gets a collection containing the values with the specified key. [CollectionAccess(CollectionAccessType.Read)] public IEnumerable<TValue> this[TKey key] { get; } Parameters key TKey The key of the element to get. Property Value IEnumerable<TValue> A list of elements with the specified key. Empty list if the key was not found. Values A collection containing the values in the dictionary. [CollectionAccess(CollectionAccessType.Read)] public IEnumerable<TValue> Values { get; } Property Value IEnumerable<TValue> Methods Add(TKey, TValue) Adds an element with the provided key and value to the dictionary. [CollectionAccess(CollectionAccessType.UpdatedContent)] public void Add(TKey key, TValue value) Parameters key TKey The key of the element to add. value TValue The value of the element to add. Remove(TKey, TValue) Removes an element with the provided key and value from the dictionary. [CollectionAccess(CollectionAccessType.ModifyExistingContent)] public bool Remove(TKey key, TValue value) Parameters key TKey The key of the element to remove. value TValue The value of the element to remove. Returns bool true if any elements were successfully removed; otherwise, false."
  },
  "api/NanoByte.Common.Collections.NamedCollection-1.html": {
    "href": "api/NanoByte.Common.Collections.NamedCollection-1.html",
    "title": "Class NamedCollection<T> | NanoByte.Common",
    "summary": "Class NamedCollection<T> Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll A keyed collection (pseudo-dictionary) of INamed objects. Case-insensitive! public class NamedCollection<T> : KeyedCollection<string, T>, ICloneable<NamedCollection<T>> where T : INamed Type Parameters T Inheritance object Collection<T> KeyedCollection<string, T> NamedCollection<T> Implements ICloneable<NamedCollection<T>> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) CollectionExtensions.AddIfNew<T>(ICollection<T>, T) CollectionExtensions.Add<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) CollectionExtensions.RemoveAll<T>(ICollection<T>, Func<T, bool>) CollectionExtensions.Remove<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) ListExtensions.AddRange<TList, TElements>(IList<TList>, IEnumerable<TElements>) ListExtensions.GetAddedElements<T>(IReadOnlyList<T>?, IReadOnlyList<T>?, IComparer<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks Elements are automatically maintained in an alphabetically sorted order. Suitable for XML serialization. Constructors NamedCollection() A keyed collection (pseudo-dictionary) of INamed objects. Case-insensitive! public NamedCollection() Remarks Elements are automatically maintained in an alphabetically sorted order. Suitable for XML serialization. NamedCollection(IEnumerable<T>) Creates a new named collection pre-filled with elements. public NamedCollection(IEnumerable<T> elements) Parameters elements IEnumerable<T> The elements to pre-fill the collection with. Must all have unique Names! Methods ClearItems() Removes all elements from the System.Collections.ObjectModel.KeyedCollection<TKey, TItem>. protected override void ClearItems() Clone() Creates a shallow copy of this collection (elements are not cloned). public virtual NamedCollection<T> Clone() Returns NamedCollection<T> The cloned collection. GetKeyForItem(T) When implemented in a derived class, extracts the key from the specified element. protected override string GetKeyForItem(T item) Parameters item T The element from which to extract the key. Returns string The key for the specified element. InsertItem(int, T) Inserts an element into the System.Collections.ObjectModel.KeyedCollection<TKey, TItem> at the specified index. protected override void InsertItem(int index, T item) Parameters index int The zero-based index at which item should be inserted. item T The object to insert. Exceptions ArgumentOutOfRangeException index is less than 0.-or-index is greater than System.Collections.ObjectModel.Collection<T>.Count. RemoveItem(int) Removes the element at the specified index of the System.Collections.ObjectModel.KeyedCollection<TKey, TItem>. protected override void RemoveItem(int index) Parameters index int The index of the element to remove. Rename(T, string) Renames an element in the list. Renaming an element in the list directly (without using this method) will prevent lookups from working properly! [CollectionAccess(CollectionAccessType.ModifyExistingContent)] public void Rename(T element, string newName) Parameters element T The element to rename. newName string The new Name for the element. Exceptions KeyNotFoundException The element is not in the collection. InvalidOperationException The newName is already taken by another element in the collection. SetItem(int, T) Replaces the item at the specified index with the specified item. protected override void SetItem(int index, T item) Parameters index int The zero-based index of the item to be replaced. item T The new item. Events CollectionChanged public event Action<object>? CollectionChanged Event Type Action<object>"
  },
  "api/NanoByte.Common.Collections.StackExtensions.html": {
    "href": "api/NanoByte.Common.Collections.StackExtensions.html",
    "title": "Class StackExtensions | NanoByte.Common",
    "summary": "Class StackExtensions Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll Provides extension methods for System.Collections.Generic.Stack<T>s. public static class StackExtensions Inheritance object StackExtensions Methods PopEach<T>(Stack<T>, Action<T>) System.Collections.Generic.Stack<T>.Pop()s each element of a System.Collections.Generic.Stack<T> and performs an action with the resulting element. public static void PopEach<T>(this Stack<T> stack, Action<T> action) Parameters stack Stack<T> The stack to pop elements from. action Action<T> An action to be invoked for each element on the stack. Type Parameters T"
  },
  "api/NanoByte.Common.Collections.TransparentCache-2.html": {
    "href": "api/NanoByte.Common.Collections.TransparentCache-2.html",
    "title": "Class TransparentCache<TKey, TValue> | NanoByte.Common",
    "summary": "Class TransparentCache<TKey, TValue> Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll Transparently caches retrieval requests, passed through to a callback on first request. public sealed class TransparentCache<TKey, TValue> : TransparentCacheBase<TKey, TValue> where TKey : notnull Type Parameters TKey The type of keys used to request values. TValue The type of values returned. Inheritance object TransparentCacheBase<TKey, TValue> TransparentCache<TKey, TValue> Inherited Members TransparentCacheBase<TKey, TValue>.this[TKey] TransparentCacheBase<TKey, TValue>.Remove(TKey) TransparentCacheBase<TKey, TValue>.Clear() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks This class is thread-safe. Constructors TransparentCache(Func<TKey, TValue>) Transparently caches retrieval requests, passed through to a callback on first request. public TransparentCache(Func<TKey, TValue> retriever) Parameters retriever Func<TKey, TValue> The callback used to retrieve values not yet in the cache. Usually only called once per key. May be called multiple times in multi-threaded scenarios. Remarks This class is thread-safe. Methods Retrieve(TKey) Template method used to retrieve values not yet in the cache. Usually only called once per key. May be called multiple times in multi-threaded scenarios. protected override TValue Retrieve(TKey key) Parameters key TKey Returns TValue"
  },
  "api/NanoByte.Common.Collections.TransparentCacheBase-2.html": {
    "href": "api/NanoByte.Common.Collections.TransparentCacheBase-2.html",
    "title": "Class TransparentCacheBase<TKey, TValue> | NanoByte.Common",
    "summary": "Class TransparentCacheBase<TKey, TValue> Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll Transparently caches retrieval requests, passed through to a template method on first request. public abstract class TransparentCacheBase<TKey, TValue> where TKey : notnull Type Parameters TKey The type of keys used to request values. TValue The type of values returned. Inheritance object TransparentCacheBase<TKey, TValue> Derived TransparentCache<TKey, TValue> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks This class is thread-safe. Properties this[TKey] Retrieves a value from the cache. [CollectionAccess(CollectionAccessType.Read)] public TValue this[TKey key] { get; } Parameters key TKey Property Value TValue Methods Clear() Removes all entries from the cache. [CollectionAccess(CollectionAccessType.ModifyExistingContent)] public void Clear() Remove(TKey) Removes the entry with the specified key from the cache. [CollectionAccess(CollectionAccessType.ModifyExistingContent)] public bool Remove(TKey key) Parameters key TKey Returns bool true if a matching entry was found and removed; false if no matching entry was in the cache. Retrieve(TKey) Template method used to retrieve values not yet in the cache. Usually only called once per key. May be called multiple times in multi-threaded scenarios. protected abstract TValue Retrieve(TKey key) Parameters key TKey Returns TValue"
  },
  "api/NanoByte.Common.Collections.XmlDictionary.html": {
    "href": "api/NanoByte.Common.Collections.XmlDictionary.html",
    "title": "Class XmlDictionary | NanoByte.Common",
    "summary": "Class XmlDictionary Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll A string dictionary that supports data-binding and can be XML serialized. [Serializable] public class XmlDictionary : BindingList<XmlDictionaryEntry>, ICloneable<XmlDictionary> Inheritance object Collection<XmlDictionaryEntry> BindingList<XmlDictionaryEntry> XmlDictionary Implements ICloneable<XmlDictionary> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) CollectionExtensions.AddIfNew<T>(ICollection<T>, T) CollectionExtensions.Add<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) CollectionExtensions.RemoveAll<T>(ICollection<T>, Func<T, bool>) CollectionExtensions.Remove<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.CloneElements<T>(IEnumerable<T>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.WhereNotNull<T>(IEnumerable<T?>) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) ListExtensions.AddRange<TList, TElements>(IList<TList>, IEnumerable<TElements>) ListExtensions.GetAddedElements<T>(IReadOnlyList<T>?, IReadOnlyList<T>?, IComparer<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Add(string, string) Adds a new value and links it to a key public void Add(string key, string value) Parameters key string The key object value string The value Exceptions ArgumentException The key already exists in the dictionary. Clone() Creates a deep copy of this XmlDictionary (elements are cloned). public virtual XmlDictionary Clone() Returns XmlDictionary The cloned XmlDictionary. ContainsKey(string) Checks whether this collection contains a certain key. public bool ContainsKey(string key) Parameters key string The key to look for. Returns bool true if the key was found. ContainsValue(string) Checks whether this collection contains a certain value. public bool ContainsValue(string value) Parameters value string The value to look for. Returns bool true if the value was found. GetValue(string) Returns the value associated to a specific key. public string GetValue(string key) Parameters key string The key to look for. Returns string The value associated to key. Exceptions KeyNotFoundException key was not found in the collection. InsertItem(int, XmlDictionaryEntry) Inserts the specified item in the list at the specified index. protected override void InsertItem(int index, XmlDictionaryEntry item) Parameters index int The zero-based index where the item is to be inserted. item XmlDictionaryEntry The item to insert in the list. Remove(string) Removes all values assigned to this key. public bool Remove(string key) Parameters key string The key to look for. Returns bool true if one or more elements were removed; otherwise, false. Sort() Sorts all entries alphabetically by their key. public void Sort() ToDictionary() Convert this XmlDictionary to a System.Collections.Generic.Dictionary<TKey, TValue> for better lookup-performance. public IDictionary<string, string> ToDictionary() Returns IDictionary<string, string> A dictionary containing the same data as this collection."
  },
  "api/NanoByte.Common.Collections.XmlDictionaryEntry.html": {
    "href": "api/NanoByte.Common.Collections.XmlDictionaryEntry.html",
    "title": "Class XmlDictionaryEntry | NanoByte.Common",
    "summary": "Class XmlDictionaryEntry Namespace NanoByte.Common.Collections Assembly NanoByte.Common.dll A key-value string pair for XmlDictionary. [Serializable] public sealed class XmlDictionaryEntry : ICloneable<XmlDictionaryEntry> Inheritance object XmlDictionaryEntry Implements ICloneable<XmlDictionaryEntry> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors XmlDictionaryEntry() Base-constructor for XML serialization. Do not call manually! public XmlDictionaryEntry() XmlDictionaryEntry(string, string) Creates a new entry for XmlDictionary. public XmlDictionaryEntry(string key, string value) Parameters key string The unique text key. value string The text value. Properties Key The unique text key. Warning: If this is changed the XmlDictionary must be rebuilt in order to update its internal hash table. public string Key { get; set; } Property Value string Exceptions InvalidOperationException The new key value already exists in the parent dictionary. Value The text value. public string Value { get; set; } Property Value string Methods Clone() Creates a plain copy of this entry. public XmlDictionaryEntry Clone() Returns XmlDictionaryEntry The cloned entry. Equals(XmlDictionaryEntry?) Indicates whether the current object is equal to another object of the same type. public bool Equals(XmlDictionaryEntry? other) Parameters other XmlDictionaryEntry An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(XmlDictionaryEntry, XmlDictionaryEntry) public static bool operator ==(XmlDictionaryEntry left, XmlDictionaryEntry right) Parameters left XmlDictionaryEntry right XmlDictionaryEntry Returns bool operator !=(XmlDictionaryEntry, XmlDictionaryEntry) public static bool operator !=(XmlDictionaryEntry left, XmlDictionaryEntry right) Parameters left XmlDictionaryEntry right XmlDictionaryEntry Returns bool"
  },
  "api/NanoByte.Common.Collections.html": {
    "href": "api/NanoByte.Common.Collections.html",
    "title": "Namespace NanoByte.Common.Collections | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Collections Specialized collection types supplementing System.Collections.Generic. Classes ArrayBuffer<T> An array rented from the System.Buffers.ArrayPool<T>. ArrayUtils Provides array-related helper methods. CollectionExtensions Provides extension methods for System.Collections.Generic.ICollection<T>s. ConcurrentSet<T> Represents a thread-safe set of values. CultureComparer This compares two System.Globalization.CultureInfos by alphabetically comparing their string representations. DefaultComparer<T> Compares objects using their System.IComparable implementation. DictionaryExtensions Provides extension methods for System.Collections.Generic.Dictionary<TKey, TValue>s. EnumerableExtensions Provides extension methods for System.Collections.Generic.IEnumerable<T>s. LanguageSet A set of languages that can be serialized as a simple space-separated list of ISO language codes. ListExtensions Provides extension methods for System.Collections.Generic.List<T>s. LocalizableString A string with an associated language that can be XML serialized to an element with an xml:lang tag. LocalizableStringCollection A collection of LocalizableStrings with language-search methods. MonitoredCollection<T> A collection that can easily be monitored for changes via events. MultiDictionary<TKey, TValue> A dictionary that allows a key to reference multiple values. NamedCollection<T> A keyed collection (pseudo-dictionary) of INamed objects. Case-insensitive! StackExtensions Provides extension methods for System.Collections.Generic.Stack<T>s. TransparentCacheBase<TKey, TValue> Transparently caches retrieval requests, passed through to a template method on first request. TransparentCache<TKey, TValue> Transparently caches retrieval requests, passed through to a callback on first request. XmlDictionary A string dictionary that supports data-binding and can be XML serialized. XmlDictionaryEntry A key-value string pair for XmlDictionary."
  },
  "api/NanoByte.Common.Controls.ControlExtensions.html": {
    "href": "api/NanoByte.Common.Controls.ControlExtensions.html",
    "title": "Class ControlExtensions | NanoByte.Common",
    "summary": "Class ControlExtensions Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Provides extension methods for System.Windows.Forms.Controls. public static class ControlExtensions Inheritance object ControlExtensions Methods ApplyScale(Size, ContainerControl) Scales a System.Drawing.Size according to the current auto-scaling factor. public static Size ApplyScale(this Size size, ContainerControl control) Parameters size Size The size to scale. control ContainerControl The control to get the scaling factor from. Returns Size BeginInvoke(Control, Action) Executes the given action on the thread that owns this control and returns immediately. public static void BeginInvoke(this Control control, Action action) Parameters control Control action Action GetScaleFactor(ContainerControl) Returns the current auto-scaling factor. public static SizeF GetScaleFactor(this ContainerControl control) Parameters control ContainerControl Returns SizeF Remarks Assumes the default System.Windows.Forms.ContainerControl.AutoScaleDimensions of 6, 13 for System.Windows.Forms.AutoScaleMode.Font or 96, 96 for System.Windows.Forms.AutoScaleMode.Dpi. Unlike System.Windows.Forms.ContainerControl.AutoScaleFactor this will retain the correct factor even after System.Windows.Forms.ContainerControl.PerformAutoScale() has run. Invoke(Control, Action) Executes the given action on the thread that owns this control and blocks until it is complete. public static void Invoke(this Control control, Action action) Parameters control Control action Action Invoke<T>(Control, Func<T>) Executes the given action on the thread that owns this control and blocks until it is complete. public static T Invoke<T>(this Control control, Func<T> action) Parameters control Control action Func<T> Returns T The return value of the action. Type Parameters T"
  },
  "api/NanoByte.Common.Controls.DropDownButton.html": {
    "href": "api/NanoByte.Common.Controls.DropDownButton.html",
    "title": "Class DropDownButton | NanoByte.Common",
    "summary": "Class DropDownButton Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A System.Windows.Forms.Button with an additional drop-down menu. public class DropDownButton : Button Inheritance object MarshalByRefObject Component Control ButtonBase Button DropDownButton Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) WinFormsUtils.AddShieldIcon(Button) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Constructors DropDownButton() public DropDownButton() Properties ContextMenuStrip Gets or sets the System.Windows.Forms.ContextMenuStrip associated with this control. [Browsable(false)] public override ContextMenuStrip? ContextMenuStrip { get; set; } Property Value ContextMenuStrip The System.Windows.Forms.ContextMenuStrip for this control, or null if there is no System.Windows.Forms.ContextMenuStrip. The default is null. DropDownMenuStrip public ContextMenuStrip? DropDownMenuStrip { get; set; } Property Value ContextMenuStrip ShowSplit Splits the button into a conventional \"button\" part and a \"drop down\" part rather than treating the entire button as a \"drop down\" button. public bool ShowSplit { get; set; } Property Value bool Methods GetPreferredSize(Size) Retrieves the size of a rectangular area into which a control can be fitted. public override Size GetPreferredSize(Size proposedSize) Parameters proposedSize Size The custom-sized area for a control. Returns Size An ordered pair of type System.Drawing.Size representing the width and height of a rectangle. IsInputKey(Keys) Determines whether the specified key is a regular input key or a special key that requires preprocessing. protected override bool IsInputKey(Keys keyData) Parameters keyData Keys One of the System.Windows.Forms.Keys values. Returns bool true if the specified key is a regular input key; otherwise, false. OnEnabledChanged(EventArgs) Raises the System.Windows.Forms.Control.EnabledChanged event. protected override void OnEnabledChanged(EventArgs e) Parameters e EventArgs An System.EventArgs that contains the event data. OnGotFocus(EventArgs) Raises the System.Windows.Forms.Control.GotFocus event. protected override void OnGotFocus(EventArgs e) Parameters e EventArgs An System.EventArgs that contains the event data. OnKeyDown(KeyEventArgs) Raises the System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs) event. protected override void OnKeyDown(KeyEventArgs kevent) Parameters kevent KeyEventArgs A System.Windows.Forms.KeyEventArgs that contains the event data. OnKeyUp(KeyEventArgs) Raises the System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs) event. protected override void OnKeyUp(KeyEventArgs kevent) Parameters kevent KeyEventArgs A System.Windows.Forms.KeyEventArgs that contains the event data. OnLostFocus(EventArgs) Raises the System.Windows.Forms.ButtonBase.OnLostFocus(System.EventArgs) event. protected override void OnLostFocus(EventArgs e) Parameters e EventArgs An System.EventArgs that contains the event data. OnMouseDown(MouseEventArgs) Raises the System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs) event. protected override void OnMouseDown(MouseEventArgs e) Parameters e MouseEventArgs OnMouseEnter(EventArgs) Raises the System.Windows.Forms.Control.OnMouseEnter(System.EventArgs) event. protected override void OnMouseEnter(EventArgs e) Parameters e EventArgs An System.EventArgs that contains the event data. OnMouseLeave(EventArgs) Raises the System.Windows.Forms.Control.OnMouseLeave(System.EventArgs) event. protected override void OnMouseLeave(EventArgs e) Parameters e EventArgs OnMouseUp(MouseEventArgs) Raises the System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs) event. protected override void OnMouseUp(MouseEventArgs mevent) Parameters mevent MouseEventArgs A System.Windows.Forms.MouseEventArgs that contains the event data. OnPaint(PaintEventArgs) Raises the System.Windows.Forms.ButtonBase.OnPaint(System.Windows.Forms.PaintEventArgs) event. protected override void OnPaint(PaintEventArgs pevent) Parameters pevent PaintEventArgs A System.Windows.Forms.PaintEventArgs that contains the event data. ShowDropDownMenu() public void ShowDropDownMenu() WndProc(ref Message) Processes Windows messages. [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)] protected override void WndProc(ref Message m) Parameters m Message The Windows System.Windows.Forms.Message to process."
  },
  "api/NanoByte.Common.Controls.DropDownContainer.html": {
    "href": "api/NanoByte.Common.Controls.DropDownContainer.html",
    "title": "Class DropDownContainer | NanoByte.Common",
    "summary": "Class DropDownContainer Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A custom drop-down that can contain arbitrary controls instead of just a menu. public class DropDownContainer : UserControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl DropDownContainer Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Constructors DropDownContainer() public DropDownContainer() Methods Close() Closes the drop down. public void Close() ProcessDialogKey(Keys) Processes a dialog key. protected override bool ProcessDialogKey(Keys keyData) Parameters keyData Keys One of the System.Windows.Forms.Keys values that represents the key to process. Returns bool true if the key was processed by the control; otherwise, false. Show(Control) Shows the drop-down below the specified control. public void Show(Control control) Parameters control Control"
  },
  "api/NanoByte.Common.Controls.ErrorBox.html": {
    "href": "api/NanoByte.Common.Controls.ErrorBox.html",
    "title": "Class ErrorBox | NanoByte.Common",
    "summary": "Class ErrorBox Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A dialog displaying an error message and details. public sealed class ErrorBox : Form Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form ErrorBox Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) WinFormsUtils.CenterOnParent(Form) WinFormsUtils.SetForegroundWindow(Form) Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false. Show(IWin32Window?, Exception, RtfBuilder?) Displays an error box with a message and details. public static void Show(IWin32Window? owner, Exception exception, RtfBuilder? log = null) Parameters owner IWin32Window The parent window for the dialog; can be null. exception Exception The error message to display. log RtfBuilder Optional log messages."
  },
  "api/NanoByte.Common.Controls.ErrorReport.html": {
    "href": "api/NanoByte.Common.Controls.ErrorReport.html",
    "title": "Class ErrorReport | NanoByte.Common",
    "summary": "Class ErrorReport Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Wraps information about an crash in a serializer-friendly format. public class ErrorReport Inheritance object ErrorReport Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties Application Information about the current application. public AppInfo Application { get; set; } Property Value AppInfo Comments Comments about the crash entered by the user. public string? Comments { get; set; } Property Value string Exception Information about the exception that occurred. public ExceptionInfo? Exception { get; set; } Property Value ExceptionInfo Log The contents of the Log file. public string? Log { get; set; } Property Value string OS Information about the current operating system. public OSInfo OS { get; set; } Property Value OSInfo"
  },
  "api/NanoByte.Common.Controls.ErrorReportForm.html": {
    "href": "api/NanoByte.Common.Controls.ErrorReportForm.html",
    "title": "Class ErrorReportForm | NanoByte.Common",
    "summary": "Class ErrorReportForm Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Presents the user with a friendly interface in case of an error, offering to report it to the developers. public sealed class ErrorReportForm : Form Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form ErrorReportForm Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) WinFormsUtils.CenterOnParent(Form) WinFormsUtils.SetForegroundWindow(Form) Remarks This class should only be used by System.Windows.Forms applications. Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false. Report(Exception, Uri) Displays the error reporting form. public static void Report(Exception ex, Uri uploadUri) Parameters ex Exception The exception to report. uploadUri Uri The URI to upload error reports to. Remarks Modal to all windows on the current thread. Creates a new message loop if none exists. SetupMonitoring(Uri) Sets up hooks that catch and report any unhandled exceptions. Calling this more than once has no effect. [Conditional(\"ERROR_REPORT\")] public static void SetupMonitoring(Uri uploadUri) Parameters uploadUri Uri The URI to upload error reports to. Remarks If an exception is caught any remaining threads will continue to execute until the error has been reported. Then the entire process will be terminated."
  },
  "api/NanoByte.Common.Controls.FilteredTreeView-1.html": {
    "href": "api/NanoByte.Common.Controls.FilteredTreeView-1.html",
    "title": "Class FilteredTreeView<T> | NanoByte.Common",
    "summary": "Class FilteredTreeView<T> Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Displays a list of INameds objects in a System.Windows.Forms.TreeView with incremental search. An automatic hierarchy is generated based on a Separator character. [Guid(\"5065F310-D0B3-4AD3-BBE5-B41D00D5F036\")] public sealed class FilteredTreeView<T> : UserControl where T : notnull, INamed Type Parameters T The type of INamed object to list. Special support for types implementing IHighlightColor and/or IContextMenu. Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl FilteredTreeView<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Constructors FilteredTreeView() public FilteredTreeView() Properties CheckBoxes Controls whether check boxes are displayed for every entry. public bool CheckBoxes { get; set; } Property Value bool CheckedEntries Returns a list of all INamed objects currently marked with a check box. public ICollection<T> CheckedEntries { get; } Property Value ICollection<T> Remarks Does NOT create a defensive copy. Take care to only add valid elements when modifying. Call UpdateList(object?) after changing. Nodes The INamed (and optionally IContextMenu) objects to be listed in the tree. [Browsable(false)] public NamedCollection<T>? Nodes { get; set; } Property Value NamedCollection<T> SelectedEntry The INamed object currently selected in the System.Windows.Forms.TreeView; null for no selection. [Browsable(false)] public T? SelectedEntry { get; set; } Property Value T Separator The character used to split Names into tree levels. public char Separator { get; set; } Property Value char ShowSearchBox Toggle the visibility of the search box. public bool ShowSearchBox { get; set; } Property Value bool Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false. UpdateList(object?) Updates the filtered System.Windows.Forms.TreeView representation of Nodes. public void UpdateList(object? sender = null) Parameters sender object Remarks Called automatically internally. Events CheckedEntriesChanged Occurs whenever the content of CheckedEntries has changed. public event EventHandler? CheckedEntriesChanged Event Type EventHandler SelectedEntryChanged Occurs whenever SelectedEntry has been changed. public event EventHandler? SelectedEntryChanged Event Type EventHandler SelectionConfirmed Occurs when the user has confirmed the SelectedEntry via double-clicking or pressing Enter. public event EventHandler? SelectionConfirmed Event Type EventHandler"
  },
  "api/NanoByte.Common.Controls.HintTextBox.html": {
    "href": "api/NanoByte.Common.Controls.HintTextBox.html",
    "title": "Class HintTextBox | NanoByte.Common",
    "summary": "Class HintTextBox Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A special System.Windows.Forms.TextBox that displays a HintText when System.Windows.Forms.TextBox.Text is empty and a clear button when it is not. public class HintTextBox : TextBox Inheritance object MarshalByRefObject Component Control TextBoxBase TextBox HintTextBox Derived UriTextBox Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Constructors HintTextBox() public HintTextBox() Properties ForeColor Gets or sets the color used when displaying text in the control. public Color ForeColor { get; set; } Property Value Color HintText A text to be displayed in System.Drawing.SystemColors.GrayText when System.Windows.Forms.TextBox.Text is empty. public string HintText { get; set; } Property Value string IsHintTextVisible Indicates whether the HintText is currently visible. [Browsable(false)] public bool IsHintTextVisible { get; } Property Value bool ShowClearButton Controls whether the clear button is shown. Remains invisible when the HintText is visible. public bool ShowClearButton { get; set; } Property Value bool Text Gets or sets the text associated with this control. public override string Text { get; set; } Property Value string The text associated with this control. Methods OnBackColorChanged(EventArgs) Raises the System.Windows.Forms.Control.BackColorChanged event. protected override void OnBackColorChanged(EventArgs e) Parameters e EventArgs An System.EventArgs that contains the event data. OnClearButtonClicked(EventArgs) Raises the ClearButtonClicked event. protected virtual void OnClearButtonClicked(EventArgs e) Parameters e EventArgs OnEnter(EventArgs) Raises the System.Windows.Forms.Control.Enter event. protected override void OnEnter(EventArgs e) Parameters e EventArgs An System.EventArgs that contains the event data. OnLeave(EventArgs) Raises the System.Windows.Forms.Control.Leave event. protected override void OnLeave(EventArgs e) Parameters e EventArgs An System.EventArgs that contains the event data. OnTextChanged(EventArgs) Raises the System.Windows.Forms.Control.TextChanged event. protected override void OnTextChanged(EventArgs e) Parameters e EventArgs An System.EventArgs that contains the event data. Events ClearButtonClicked Occurs when the clear button is clicked. public event EventHandler? ClearButtonClicked Event Type EventHandler"
  },
  "api/NanoByte.Common.Controls.IContextMenu.html": {
    "href": "api/NanoByte.Common.Controls.IContextMenu.html",
    "title": "Interface IContextMenu | NanoByte.Common",
    "summary": "Interface IContextMenu Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll An object that can provide its own context menu. public interface IContextMenu Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods GetContextMenu() Returns the context menu for this object; can be null. ContextMenuStrip? GetContextMenu() Returns ContextMenuStrip See Also FilteredTreeView<T>"
  },
  "api/NanoByte.Common.Controls.IEditorDialog-1.html": {
    "href": "api/NanoByte.Common.Controls.IEditorDialog-1.html",
    "title": "Interface IEditorDialog<T> | NanoByte.Common",
    "summary": "Interface IEditorDialog<T> Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Provides an interface to a dialog that edits a single object. public interface IEditorDialog<T> Type Parameters T The type of object to edit. Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods ShowDialog(IWin32Window, T) Displays a modal dialog for editing an element. DialogResult ShowDialog(IWin32Window owner, T element) Parameters owner IWin32Window The parent window used to make the dialog modal. element T The element to be edited. Returns DialogResult Save changes if System.Windows.Forms.DialogResult.OK; discard changes if System.Windows.Forms.DialogResult.Cancel."
  },
  "api/NanoByte.Common.Controls.ITouchControl.html": {
    "href": "api/NanoByte.Common.Controls.ITouchControl.html",
    "title": "Interface ITouchControl | NanoByte.Common",
    "summary": "Interface ITouchControl Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A control that can raise touch events. public interface ITouchControl Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Events TouchDown Raised when the user begins touching the screen. event EventHandler<TouchEventArgs> TouchDown Event Type EventHandler<TouchEventArgs> TouchMove Raised when the user moves fingers while touching the screen. event EventHandler<TouchEventArgs> TouchMove Event Type EventHandler<TouchEventArgs> TouchUp Raised when the user stops touching the screen. event EventHandler<TouchEventArgs> TouchUp Event Type EventHandler<TouchEventArgs>"
  },
  "api/NanoByte.Common.Controls.InputBox.html": {
    "href": "api/NanoByte.Common.Controls.InputBox.html",
    "title": "Class InputBox | NanoByte.Common",
    "summary": "Class InputBox Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Shows a simple dialog asking the user to input some text. public sealed class InputBox : Form Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form InputBox Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) WinFormsUtils.CenterOnParent(Form) WinFormsUtils.SetForegroundWindow(Form) Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false. Show(IWin32Window?, string, string, string?, bool) Displays an input box asking the user to input some text. public static string? Show(IWin32Window? owner, string title, string prompt, string? defaultText = null, bool password = false) Parameters owner IWin32Window The parent window the displayed window is modal to; can be null. title string The window title to use. prompt string The prompt to display. defaultText string The default text to show pre-entered in the input field. password bool Shall the input characters be hidden as a password? Returns string The text the user entered if she pressed OK; otherwise null."
  },
  "api/NanoByte.Common.Controls.Msg.html": {
    "href": "api/NanoByte.Common.Controls.Msg.html",
    "title": "Class Msg | NanoByte.Common",
    "summary": "Class Msg Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Provides easier access to typical System.Windows.Forms.MessageBox configurations and automatically upgrades to TaskDialogs when available. public static class Msg Inheritance object Msg Methods Inform(IWin32Window?, string, MsgSeverity) Displays a message to the user using a message box or task dialog. public static void Inform(IWin32Window? owner, string text, MsgSeverity severity) Parameters owner IWin32Window The parent window the displayed window is modal to; can be null. text string The message to be displayed. severity MsgSeverity How severe/important the message is. OkCancel(IWin32Window?, string, MsgSeverity, string?, string?) Asks the user a OK/Cancel-question using a message box or task dialog. public static bool OkCancel(IWin32Window? owner, string text, MsgSeverity severity, string? okCaption = null, string? cancelCaption = null) Parameters owner IWin32Window The parent window the displayed window is modal to; can be null. text string The message to be displayed. severity MsgSeverity How severe/important the message is. okCaption string The title and a short description (separated by a linebreak) of the System.Windows.Forms.DialogResult.OK option; null for default. cancelCaption string The title and a short description (separated by a linebreak) of the System.Windows.Forms.DialogResult.Cancel option; null for default. Returns bool true if okCaption was selected, false if cancelCaption was selected. Remarks If a System.Windows.Forms.MessageBox is used, okCaption and cancelCaption are not display to the user, so don't rely on them! YesNo(IWin32Window?, string, MsgSeverity, string?, string?) Asks the user to choose between two options (yes/no) using a message box or task dialog. public static bool YesNo(IWin32Window? owner, string text, MsgSeverity severity, string? yesCaption = null, string? noCaption = null) Parameters owner IWin32Window The parent window the displayed window is modal to; can be null. text string The message to be displayed. severity MsgSeverity How severe/important the message is. yesCaption string The title and a short description (separated by a linebreak) of the System.Windows.Forms.DialogResult.Yes option; null for default. noCaption string The title and a short description (separated by a linebreak) of the System.Windows.Forms.DialogResult.No option; null for default. Returns bool true if yesCaption was chosen, false if noCaption was chosen. Remarks If a System.Windows.Forms.MessageBox is used, yesCaption and noCaption are not display to the user, so don't rely on them! YesNoCancel(IWin32Window?, string, MsgSeverity, string?, string?) Asks the user to choose between three options (yes/no/cancel) using a message box or task dialog. public static DialogResult YesNoCancel(IWin32Window? owner, string text, MsgSeverity severity, string? yesCaption = null, string? noCaption = null) Parameters owner IWin32Window The parent window the displayed window is modal to; can be null. text string The message to be displayed. severity MsgSeverity How severe/important the message is. yesCaption string The title and a short description (separated by a linebreak) of the System.Windows.Forms.DialogResult.Yes option; null for default. noCaption string The title and a short description (separated by a linebreak) of the System.Windows.Forms.DialogResult.No option; null for default. Returns DialogResult System.Windows.Forms.DialogResult.Yes if yesCaption was chosen, System.Windows.Forms.DialogResult.No if noCaption was chosen, System.Windows.Forms.DialogResult.Cancel otherwise. Remarks If a System.Windows.Forms.MessageBox is used, yesCaption and noCaption are not display to the user, so don't rely on them!"
  },
  "api/NanoByte.Common.Controls.MsgSeverity.html": {
    "href": "api/NanoByte.Common.Controls.MsgSeverity.html",
    "title": "Enum MsgSeverity | NanoByte.Common",
    "summary": "Enum MsgSeverity Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll How severe/important a message is. public enum MsgSeverity Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) EnumExtensions.GetEnumAttribute<TAttribute>(Enum) EnumExtensions.HasFlag(Enum, Enum) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields Error = 2 A critical error that should be attended to. Info = 0 A nice-to-know piece of information. Warn = 1 A warning that doesn't have to be acted upon immediately."
  },
  "api/NanoByte.Common.Controls.OKCancelDialog.html": {
    "href": "api/NanoByte.Common.Controls.OKCancelDialog.html",
    "title": "Class OKCancelDialog | NanoByte.Common",
    "summary": "Class OKCancelDialog Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A base-class for creating fixed-size dialog boxes with an OK and a Cancel button. public class OKCancelDialog : Form Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form OKCancelDialog Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) WinFormsUtils.CenterOnParent(Form) WinFormsUtils.SetForegroundWindow(Form) Constructors OKCancelDialog() public OKCancelDialog() Fields buttonCancel protected Button buttonCancel Field Value Button buttonOK protected Button buttonOK Field Value Button Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false. OnCancelClicked() This hook is called when the user clicks the Cancel button. protected virtual void OnCancelClicked() OnOKClicked() This hook is called when the user clicks the OK button. protected virtual void OnOKClicked()"
  },
  "api/NanoByte.Common.Controls.OutputBox.html": {
    "href": "api/NanoByte.Common.Controls.OutputBox.html",
    "title": "Class OutputBox | NanoByte.Common",
    "summary": "Class OutputBox Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A simple dialog displaying selectable multi-line text. public sealed class OutputBox : Form Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form OutputBox Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) WinFormsUtils.CenterOnParent(Form) WinFormsUtils.SetForegroundWindow(Form) Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false. Show(IWin32Window?, string, string) Displays an output box with some text. public static void Show(IWin32Window? owner, string title, string message) Parameters owner IWin32Window The parent window for the dialogs; can be null. title string The text to display above the message. message string The selectable multi-line text to display to the user."
  },
  "api/NanoByte.Common.Controls.OutputGridBox.html": {
    "href": "api/NanoByte.Common.Controls.OutputGridBox.html",
    "title": "Class OutputGridBox | NanoByte.Common",
    "summary": "Class OutputGridBox Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Displays tabular data to the user. public sealed class OutputGridBox : Form Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form OutputGridBox Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) WinFormsUtils.CenterOnParent(Form) WinFormsUtils.SetForegroundWindow(Form) Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false. Show<T>(IWin32Window?, string, IEnumerable<T>) Displays an output dialog with tabular data. public static void Show<T>(IWin32Window? owner, string title, IEnumerable<T> data) Parameters owner IWin32Window The parent window for the dialogs; can be null. title string A title for the data. data IEnumerable<T> The data to display. Type Parameters T The type of the data elements to display."
  },
  "api/NanoByte.Common.Controls.OutputTreeBox-1.html": {
    "href": "api/NanoByte.Common.Controls.OutputTreeBox-1.html",
    "title": "Class OutputTreeBox<T> | NanoByte.Common",
    "summary": "Class OutputTreeBox<T> Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Displays tree data to the user. public sealed class OutputTreeBox<T> : Form where T : INamed Type Parameters T The type of INamed object to list. Special support for types implementing IHighlightColor and/or IContextMenu. Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form OutputTreeBox<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) WinFormsUtils.CenterOnParent(Form) WinFormsUtils.SetForegroundWindow(Form)"
  },
  "api/NanoByte.Common.Controls.OutputTreeBox.html": {
    "href": "api/NanoByte.Common.Controls.OutputTreeBox.html",
    "title": "Class OutputTreeBox | NanoByte.Common",
    "summary": "Class OutputTreeBox Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Factory methods for OutputTreeBox<T>. public static class OutputTreeBox Inheritance object OutputTreeBox Methods Show<T>(IWin32Window?, string, NamedCollection<T>, char) Displays an output dialog with tree data. public static void Show<T>(IWin32Window? owner, string title, NamedCollection<T> data, char separator = '|') where T : INamed Parameters owner IWin32Window The parent window for the dialogs; can be null. title string A title for the data. data NamedCollection<T> The data to display. separator char The character used to separate namespaces in the Names. This controls how the tree structure is generated. Type Parameters T The type of INamed object to list. Special support for types implementing IHighlightColor and/or IContextMenu."
  },
  "api/NanoByte.Common.Controls.PropertyGridForm.html": {
    "href": "api/NanoByte.Common.Controls.PropertyGridForm.html",
    "title": "Class PropertyGridForm | NanoByte.Common",
    "summary": "Class PropertyGridForm Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Contains a single property grid for manipulating the properties of an object. public sealed class PropertyGridForm : Form Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form PropertyGridForm Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) WinFormsUtils.CenterOnParent(Form) WinFormsUtils.SetForegroundWindow(Form) Methods Show(object) Displays a form with a property grid for manipulating the properties of an object. public static void Show(object value) Parameters value object The object to be inspected."
  },
  "api/NanoByte.Common.Controls.ResettablePropertyGrid.html": {
    "href": "api/NanoByte.Common.Controls.ResettablePropertyGrid.html",
    "title": "Class ResettablePropertyGrid | NanoByte.Common",
    "summary": "Class ResettablePropertyGrid Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A System.Windows.Forms.PropertyGrid that provides a \"reset value\" option in its context menu. public class ResettablePropertyGrid : PropertyGrid Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl PropertyGrid ResettablePropertyGrid Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Constructors ResettablePropertyGrid() public ResettablePropertyGrid() Methods OnSelectedGridItemChanged(SelectedGridItemChangedEventArgs) Raises the System.Windows.Forms.PropertyGrid.SelectedGridItemChanged event. [PermissionSet(SecurityAction.LinkDemand, Name = \"FullTrust\")] protected override void OnSelectedGridItemChanged(SelectedGridItemChangedEventArgs e) Parameters e SelectedGridItemChangedEventArgs A System.Windows.Forms.SelectedGridItemChangedEventArgs that contains the event data."
  },
  "api/NanoByte.Common.Controls.RtfBuilder.html": {
    "href": "api/NanoByte.Common.Controls.RtfBuilder.html",
    "title": "Class RtfBuilder | NanoByte.Common",
    "summary": "Class RtfBuilder Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Builds an RTF-formatted string with paragraphs. public sealed class RtfBuilder Inheritance object RtfBuilder Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties IsEmpty Indicates whether the builder is currently empty (contains no paragraphs). public bool IsEmpty { get; } Property Value bool Methods AppendPar(string, RtfColor) Appends a new paragraph. public void AppendPar(string text, RtfColor color) Parameters text string The text in the paragraph. color RtfColor The color of the text. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/NanoByte.Common.Controls.RtfColor.html": {
    "href": "api/NanoByte.Common.Controls.RtfColor.html",
    "title": "Enum RtfColor | NanoByte.Common",
    "summary": "Enum RtfColor Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll public enum RtfColor Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) EnumExtensions.GetEnumAttribute<TAttribute>(Enum) EnumExtensions.HasFlag(Enum, Enum) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields Black = 0 Blue = 1 Green = 2 Orange = 4 Red = 5 Yellow = 3 See Also AppendPar(string, RtfColor)"
  },
  "api/NanoByte.Common.Controls.TaskControl.html": {
    "href": "api/NanoByte.Common.Controls.TaskControl.html",
    "title": "Class TaskControl | NanoByte.Common",
    "summary": "Class TaskControl Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Combines a TaskProgressBar and a TaskLabel. public sealed class TaskControl : UserControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl TaskControl Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Constructors TaskControl() Creates a new task tracking control. public TaskControl() Properties TaskName The name of the task being tracked. public string TaskName { get; set; } Property Value string Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false. Report(TaskSnapshot) Reports a progress update. public void Report(TaskSnapshot value) Parameters value TaskSnapshot The value of the updated progress."
  },
  "api/NanoByte.Common.Controls.TaskLabel.html": {
    "href": "api/NanoByte.Common.Controls.TaskLabel.html",
    "title": "Class TaskLabel | NanoByte.Common",
    "summary": "Class TaskLabel Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A progress label that takes TaskSnapshot inputs. public sealed class TaskLabel : Label Inheritance object MarshalByRefObject Component Control Label TaskLabel Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Constructors TaskLabel() public TaskLabel() Methods Report(TaskSnapshot) Reports a progress update. public void Report(TaskSnapshot value) Parameters value TaskSnapshot The value of the updated progress."
  },
  "api/NanoByte.Common.Controls.TaskProgressBar.html": {
    "href": "api/NanoByte.Common.Controls.TaskProgressBar.html",
    "title": "Class TaskProgressBar | NanoByte.Common",
    "summary": "Class TaskProgressBar Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A progress bar that takes TaskSnapshot inputs. public sealed class TaskProgressBar : ProgressBar Inheritance object MarshalByRefObject Component Control ProgressBar TaskProgressBar Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Constructors TaskProgressBar() public TaskProgressBar() Methods Report(TaskSnapshot) Reports a progress update. public void Report(TaskSnapshot value) Parameters value TaskSnapshot The value of the updated progress."
  },
  "api/NanoByte.Common.Controls.TimeSpanControl.html": {
    "href": "api/NanoByte.Common.Controls.TimeSpanControl.html",
    "title": "Class TimeSpanControl | NanoByte.Common",
    "summary": "Class TimeSpanControl Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Allows the input of a System.TimeSpan using System.Windows.Forms.NumericUpDown boxes. public class TimeSpanControl : UserControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl TimeSpanControl Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Constructors TimeSpanControl() public TimeSpanControl() Properties Value The time span currently represented by the control. public TimeSpan Value { get; set; } Property Value TimeSpan Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/NanoByte.Common.Controls.TouchEventArgs.html": {
    "href": "api/NanoByte.Common.Controls.TouchEventArgs.html",
    "title": "Class TouchEventArgs | NanoByte.Common",
    "summary": "Class TouchEventArgs Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Event information about a touch event. public class TouchEventArgs : EventArgs Inheritance object EventArgs TouchEventArgs Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields InRange The user is hovering above the touch screen. public bool InRange Field Value bool NoCoalesce This input was not coalesced. public bool NoCoalesce Field Value bool Palm The touch event came from the user's palm. public bool Palm Field Value bool Primary Indicates that this structure corresponds to a primary contact point. public bool Primary Field Value bool Properties ContactX X size of the contact area in pixels. public int ContactX { get; set; } Property Value int ContactY X size of the contact area in pixels. public int ContactY { get; set; } Property Value int ID Contact ID. public int ID { get; set; } Property Value int LocationX Touch X client coordinate in pixels. public int LocationX { get; set; } Property Value int LocationY Touch Y client coordinate in pixels. public int LocationY { get; set; } Property Value int Mask Mask indicating which fields in the structure are valid. public TouchEventMask Mask { get; set; } Property Value TouchEventMask Time Touch event time. public int Time { get; set; } Property Value int"
  },
  "api/NanoByte.Common.Controls.TouchEventMask.html": {
    "href": "api/NanoByte.Common.Controls.TouchEventMask.html",
    "title": "Enum TouchEventMask | NanoByte.Common",
    "summary": "Enum TouchEventMask Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Mask indicating which fields in TouchEventArgs are valid. [Flags] public enum TouchEventMask Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) EnumExtensions.GetEnumAttribute<TAttribute>(Enum) EnumExtensions.HasFlag(Enum, Enum) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields ContactArea = 4 TOUCHINPUTMASKF_CONTACTAREA ExtraInfo = 2 TOUCHINPUTMASKF_EXTRAINFO Time = 1 TOUCHINPUTMASKF_TIMEFROMSYSTEM See Also Mask"
  },
  "api/NanoByte.Common.Controls.TouchForm.html": {
    "href": "api/NanoByte.Common.Controls.TouchForm.html",
    "title": "Class TouchForm | NanoByte.Common",
    "summary": "Class TouchForm Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Represents a window that reacts to touch input on Windows 7 or newer. public class TouchForm : Form, ITouchControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form TouchForm Implements ITouchControl Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.GetScaleFactor(ContainerControl) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) WinFormsUtils.CenterOnParent(Form) WinFormsUtils.SetForegroundWindow(Form) Properties CreateParams Gets the required creation parameters when the control handle is created. protected override CreateParams CreateParams { get; } Property Value CreateParams A System.Windows.Forms.CreateParams that contains the required creation parameters when the handle to the control is created. Methods CreateHandle() Creates the handle for the form. If a derived class overrides this function, it must call the base implementation. protected override void CreateHandle() Exceptions InvalidOperationException A handle for this System.Windows.Forms.Form has already been created. WndProc(ref Message) Processes Windows messages. [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)] protected override void WndProc(ref Message m) Parameters m Message The Windows System.Windows.Forms.Message to process. Events TouchDown Raised when the user begins touching the screen. public event EventHandler<TouchEventArgs>? TouchDown Event Type EventHandler<TouchEventArgs> TouchMove Raised when the user moves fingers while touching the screen. public event EventHandler<TouchEventArgs>? TouchMove Event Type EventHandler<TouchEventArgs> TouchUp Raised when the user stops touching the screen. public event EventHandler<TouchEventArgs>? TouchUp Event Type EventHandler<TouchEventArgs>"
  },
  "api/NanoByte.Common.Controls.TouchPanel.html": {
    "href": "api/NanoByte.Common.Controls.TouchPanel.html",
    "title": "Class TouchPanel | NanoByte.Common",
    "summary": "Class TouchPanel Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll Represents a panel that reacts to touch input on Windows 7 or newer. public class TouchPanel : Panel, ITouchControl Inheritance object MarshalByRefObject Component Control ScrollableControl Panel TouchPanel Implements ITouchControl Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Properties CreateParams Gets the required creation parameters when the control handle is created. protected override CreateParams CreateParams { get; } Property Value CreateParams A System.Windows.Forms.CreateParams that contains the required creation parameters when the handle to the control is created. Methods CreateHandle() Creates a handle for the control. protected override void CreateHandle() Exceptions ObjectDisposedException The object is in a disposed state. WndProc(ref Message) Processes Windows messages. [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)] protected override void WndProc(ref Message m) Parameters m Message The Windows System.Windows.Forms.Message to process. Events TouchDown Raised when the user begins touching the screen. public event EventHandler<TouchEventArgs>? TouchDown Event Type EventHandler<TouchEventArgs> TouchMove Raised when the user moves fingers while touching the screen. public event EventHandler<TouchEventArgs>? TouchMove Event Type EventHandler<TouchEventArgs> TouchUp Raised when the user stops touching the screen. public event EventHandler<TouchEventArgs>? TouchUp Event Type EventHandler<TouchEventArgs>"
  },
  "api/NanoByte.Common.Controls.UriTextBox.html": {
    "href": "api/NanoByte.Common.Controls.UriTextBox.html",
    "title": "Class UriTextBox | NanoByte.Common",
    "summary": "Class UriTextBox Namespace NanoByte.Common.Controls Assembly NanoByte.Common.WinForms.dll A HintTextBox designed specifically for entering URIs. public class UriTextBox : HintTextBox Inheritance object MarshalByRefObject Component Control TextBoxBase TextBox HintTextBox UriTextBox Inherited Members HintTextBox.OnEnter(EventArgs) HintTextBox.OnLeave(EventArgs) HintTextBox.OnTextChanged(EventArgs) HintTextBox.OnBackColorChanged(EventArgs) HintTextBox.ClearButtonClicked HintTextBox.OnClearButtonClicked(EventArgs) HintTextBox.ForeColor HintTextBox.Text HintTextBox.HintText HintTextBox.IsHintTextVisible HintTextBox.ShowClearButton Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) ControlExtensions.BeginInvoke(Control, Action) ControlExtensions.Invoke(Control, Action) ControlExtensions.Invoke<T>(Control, Func<T>) WinFormsUtils.EnableWindowDrag(Control) Remarks Will turn red for invalid input and green for valid input. Will not allow focus to be lost for invalid input. Constructors UriTextBox() public UriTextBox() Properties AllowRelative When set to true relative URIs are accepted. public bool AllowRelative { get; set; } Property Value bool HttpOnly When set to true only URIs starting with \"http:\" or \"https:\" will be considered valid. public bool HttpOnly { get; set; } Property Value bool IsValid Indicates whether the currently entered text is a valid URI. public bool IsValid { get; } Property Value bool Uri The Uri represented by this text box. [Browsable(false)] public Uri? Uri { get; set; } Property Value Uri Remarks It is always safe to set this property. It is safe to read this property after validation has been performed. Exceptions UriFormatException Trying to read while System.Windows.Forms.TextBox.Text is not a well-formed Uri. Methods OnDragDrop(DragEventArgs) Raises the System.Windows.Forms.Control.DragDrop event. protected override void OnDragDrop(DragEventArgs drgevent) Parameters drgevent DragEventArgs A System.Windows.Forms.DragEventArgs that contains the event data. OnDragEnter(DragEventArgs) Raises the System.Windows.Forms.Control.DragEnter event. protected override void OnDragEnter(DragEventArgs drgevent) Parameters drgevent DragEventArgs A System.Windows.Forms.DragEventArgs that contains the event data. ValidateUri(string) Checks if a text represents a valid Uri. protected virtual bool ValidateUri(string text) Parameters text string Text to check. Returns bool"
  },
  "api/NanoByte.Common.Controls.html": {
    "href": "api/NanoByte.Common.Controls.html",
    "title": "Namespace NanoByte.Common.Controls | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Controls WinForms controls and forms designed to simplify common UI designs. Classes ControlExtensions Provides extension methods for System.Windows.Forms.Controls. DropDownButton A System.Windows.Forms.Button with an additional drop-down menu. DropDownContainer A custom drop-down that can contain arbitrary controls instead of just a menu. ErrorBox A dialog displaying an error message and details. ErrorReport Wraps information about an crash in a serializer-friendly format. ErrorReportForm Presents the user with a friendly interface in case of an error, offering to report it to the developers. FilteredTreeView<T> Displays a list of INameds objects in a System.Windows.Forms.TreeView with incremental search. An automatic hierarchy is generated based on a Separator character. HintTextBox A special System.Windows.Forms.TextBox that displays a HintText when System.Windows.Forms.TextBox.Text is empty and a clear button when it is not. InputBox Shows a simple dialog asking the user to input some text. Msg Provides easier access to typical System.Windows.Forms.MessageBox configurations and automatically upgrades to TaskDialogs when available. OKCancelDialog A base-class for creating fixed-size dialog boxes with an OK and a Cancel button. OutputBox A simple dialog displaying selectable multi-line text. OutputGridBox Displays tabular data to the user. OutputTreeBox Factory methods for OutputTreeBox<T>. OutputTreeBox<T> Displays tree data to the user. PropertyGridForm Contains a single property grid for manipulating the properties of an object. ResettablePropertyGrid A System.Windows.Forms.PropertyGrid that provides a \"reset value\" option in its context menu. RtfBuilder Builds an RTF-formatted string with paragraphs. TaskControl Combines a TaskProgressBar and a TaskLabel. TaskLabel A progress label that takes TaskSnapshot inputs. TaskProgressBar A progress bar that takes TaskSnapshot inputs. TimeSpanControl Allows the input of a System.TimeSpan using System.Windows.Forms.NumericUpDown boxes. TouchEventArgs Event information about a touch event. TouchForm Represents a window that reacts to touch input on Windows 7 or newer. TouchPanel Represents a panel that reacts to touch input on Windows 7 or newer. UriTextBox A HintTextBox designed specifically for entering URIs. Interfaces IContextMenu An object that can provide its own context menu. IEditorDialog<T> Provides an interface to a dialog that edits a single object. ITouchControl A control that can raise touch events. Enums MsgSeverity How severe/important a message is. RtfColor TouchEventMask Mask indicating which fields in TouchEventArgs are valid."
  },
  "api/NanoByte.Common.Dispatch.AggregateDispatcher-1.html": {
    "href": "api/NanoByte.Common.Dispatch.AggregateDispatcher-1.html",
    "title": "Class AggregateDispatcher<TBase> | NanoByte.Common",
    "summary": "Class AggregateDispatcher<TBase> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll Calls different action delegates based on the runtime types of objects. Calls multiple delegates when they all match a type (through inheritance). public class AggregateDispatcher<TBase> where TBase : class Type Parameters TBase The common base type of all objects to be dispatched. Inheritance object AggregateDispatcher<TBase> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.WhereNotNull<T>(IEnumerable<T?>) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Add<TSpecific>(Action<TSpecific>) Adds a dispatch delegate. public AggregateDispatcher<TBase> Add<TSpecific>(Action<TSpecific> action) where TSpecific : class, TBase Parameters action Action<TSpecific> The delegate to call. Returns AggregateDispatcher<TBase> The \"this\" pointer for use in a \"Fluent API\" style. Type Parameters TSpecific The specific type to call the delegate for. Matches all subtypes as well. Dispatch(IEnumerable<TBase>) Dispatches for each element in a collection. Set up with Add<TSpecific>(Action<TSpecific>) first. public void Dispatch(IEnumerable<TBase> elements) Parameters elements IEnumerable<TBase> The elements to be dispatched. Dispatch(TBase) Dispatches an element to all delegates matching the type. Set up with Add<TSpecific>(Action<TSpecific>) first. public void Dispatch(TBase element) Parameters element TBase The element to be dispatched. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Action<TBase>> GetEnumerator() Returns IEnumerator<Action<TBase>> An enumerator that can be used to iterate through the collection."
  },
  "api/NanoByte.Common.Dispatch.AggregateDispatcher-2.html": {
    "href": "api/NanoByte.Common.Dispatch.AggregateDispatcher-2.html",
    "title": "Class AggregateDispatcher<TBase, TResult> | NanoByte.Common",
    "summary": "Class AggregateDispatcher<TBase, TResult> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll Calls different function delegates (with enumerable return values) based on the runtime types of objects. Aggregates results when multiple delegates match a type (through inheritance). public class AggregateDispatcher<TBase, TResult> where TBase : class Type Parameters TBase The common base type of all objects to be dispatched. TResult The enumerable return values of the delegates. Inheritance object AggregateDispatcher<TBase, TResult> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.WhereNotNull<T>(IEnumerable<T?>) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Add<TSpecific>(Func<TSpecific, IEnumerable<TResult>>) Adds a dispatch delegate. public AggregateDispatcher<TBase, TResult> Add<TSpecific>(Func<TSpecific, IEnumerable<TResult>> function) where TSpecific : class, TBase Parameters function Func<TSpecific, IEnumerable<TResult>> The delegate to call. Returns AggregateDispatcher<TBase, TResult> The \"this\" pointer for use in a \"Fluent API\" style. Type Parameters TSpecific The specific type to call the delegate for. Matches all subtypes as well. Dispatch(IEnumerable<TBase>) Dispatches for each element in a collection. Set up with Add<TSpecific>(Func<TSpecific, IEnumerable<TResult>>) first. public IEnumerable<TResult> Dispatch(IEnumerable<TBase> elements) Parameters elements IEnumerable<TBase> The elements to be dispatched. Returns IEnumerable<TResult> The values returned by the matching delegates. Dispatch(TBase) Dispatches an element to all delegates matching the type. Set up with Add<TSpecific>(Func<TSpecific, IEnumerable<TResult>>) first. public IEnumerable<TResult> Dispatch(TBase element) Parameters element TBase The element to be dispatched. Returns IEnumerable<TResult> The values returned by all matching delegates aggregated. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Func<TBase, IEnumerable<TResult>>> GetEnumerator() Returns IEnumerator<Func<TBase, IEnumerable<TResult>>> An enumerator that can be used to iterate through the collection."
  },
  "api/NanoByte.Common.Dispatch.BucketRule-1.html": {
    "href": "api/NanoByte.Common.Dispatch.BucketRule-1.html",
    "title": "Class BucketRule<T> | NanoByte.Common",
    "summary": "Class BucketRule<T> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll A rule for Bucketizer<T>. public class BucketRule<T> Type Parameters T Inheritance object BucketRule<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors BucketRule(Predicate<T>, ICollection<T>) A rule for Bucketizer<T>. public BucketRule(Predicate<T> predicate, ICollection<T> bucket) Parameters predicate Predicate<T> A condition to check elements against. bucket ICollection<T> The collection elements are added to if they match the predicate. Fields Bucket The collection elements are added to if they match the Predicate. public readonly ICollection<T> Bucket Field Value ICollection<T> Predicate A condition to check elements against. public readonly Predicate<T> Predicate Field Value Predicate<T>"
  },
  "api/NanoByte.Common.Dispatch.BucketRule-2.html": {
    "href": "api/NanoByte.Common.Dispatch.BucketRule-2.html",
    "title": "Class BucketRule<TElement, TValue> | NanoByte.Common",
    "summary": "Class BucketRule<TElement, TValue> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll A rule for Bucketizer<TElement, TValue>. public class BucketRule<TElement, TValue> Type Parameters TElement TValue Inheritance object BucketRule<TElement, TValue> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors BucketRule(TValue, ICollection<TElement>) A rule for Bucketizer<TElement, TValue>. public BucketRule(TValue value, ICollection<TElement> bucket) Parameters value TValue A value to compare with the result of the value retriever using object.Equals(object, object). bucket ICollection<TElement> The collection elements are added to if they match the value. Fields Bucket The collection elements are added to if they match the Value. public readonly ICollection<TElement> Bucket Field Value ICollection<TElement> Value A value to check elements against. public readonly TValue Value Field Value TValue"
  },
  "api/NanoByte.Common.Dispatch.Bucketizer-1.html": {
    "href": "api/NanoByte.Common.Dispatch.Bucketizer-1.html",
    "title": "Class Bucketizer<T> | NanoByte.Common",
    "summary": "Class Bucketizer<T> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll Splits collections into multiple buckets based on predicate matching. The first matching predicate wins. Create with Bucketize<T>(IEnumerable<T>). public class Bucketizer<T> Type Parameters T The common base type of all objects to be bucketized. Inheritance object Bucketizer<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.WhereNotNull<T>(IEnumerable<T?>) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors Bucketizer(IEnumerable<T>) Splits collections into multiple buckets based on predicate matching. The first matching predicate wins. Create with Bucketize<T>(IEnumerable<T>). public Bucketizer(IEnumerable<T> elements) Parameters elements IEnumerable<T> The elements to be bucketized. Methods Add(Predicate<T>, ICollection<T>) Adds a new bucket rule. public Bucketizer<T> Add(Predicate<T> predicate, ICollection<T> bucket) Parameters predicate Predicate<T> A condition to check elements against. bucket ICollection<T> The collection elements are added to if they match the predicate. Returns Bucketizer<T> The \"this\" pointer for use in a \"Fluent API\" style. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<BucketRule<T>> GetEnumerator() Returns IEnumerator<BucketRule<T>> An enumerator that can be used to iterate through the collection. Run() Adds each element to the first bucket with a matching predicate (if any). Set up with Add(Predicate<T>, ICollection<T>) first. public void Run()"
  },
  "api/NanoByte.Common.Dispatch.Bucketizer-2.html": {
    "href": "api/NanoByte.Common.Dispatch.Bucketizer-2.html",
    "title": "Class Bucketizer<TElement, TValue> | NanoByte.Common",
    "summary": "Class Bucketizer<TElement, TValue> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll Splits collections into multiple buckets based on value-mapping. Create with Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>). public class Bucketizer<TElement, TValue> Type Parameters TElement The common base type of all objects to be bucketized. TValue The type of the values to be matched. Inheritance object Bucketizer<TElement, TValue> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.WhereNotNull<T>(IEnumerable<T?>) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors Bucketizer(IEnumerable<TElement>, Func<TElement, TValue>) Splits collections into multiple buckets based on value-mapping. Create with Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>). public Bucketizer(IEnumerable<TElement> elements, Func<TElement, TValue> valueRetriever) Parameters elements IEnumerable<TElement> The elements to be bucketized. valueRetriever Func<TElement, TValue> A function to map elements to their according values used for bucketization. Methods Add(TValue, ICollection<TElement>) Adds a new bucket rule. public Bucketizer<TElement, TValue> Add(TValue value, ICollection<TElement> bucket) Parameters value TValue A value to compare with the result of the value retriever using object.Equals(object, object). bucket ICollection<TElement> The collection elements are added to if they match the value. Returns Bucketizer<TElement, TValue> The \"this\" pointer for use in a \"Fluent API\" style. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<BucketRule<TElement, TValue>> GetEnumerator() Returns IEnumerator<BucketRule<TElement, TValue>> An enumerator that can be used to iterate through the collection. Run() Adds each element to the first bucket with a matching value (if any). Set up with Add(TValue, ICollection<TElement>) first. public void Run()"
  },
  "api/NanoByte.Common.Dispatch.Bucketizer.html": {
    "href": "api/NanoByte.Common.Dispatch.Bucketizer.html",
    "title": "Class Bucketizer | NanoByte.Common",
    "summary": "Class Bucketizer Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll Contains extension methods for creating bucketizers. public static class Bucketizer Inheritance object Bucketizer Methods Bucketize<T>(IEnumerable<T>) Creates a new predicate-matching bucketizer. public static Bucketizer<T> Bucketize<T>(this IEnumerable<T> elements) Parameters elements IEnumerable<T> The elements to be bucketized. Returns Bucketizer<T> Type Parameters T Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) Creates a new value-mapping bucketizer. public static Bucketizer<TElement, TValue> Bucketize<TElement, TValue>(this IEnumerable<TElement> elements, Func<TElement, TValue> valueRetriever) Parameters elements IEnumerable<TElement> The elements to be bucketized. valueRetriever Func<TElement, TValue> A function to map elements to their according values used for bucketization. Returns Bucketizer<TElement, TValue> Type Parameters TElement TValue"
  },
  "api/NanoByte.Common.Dispatch.IChangeNotify-1.html": {
    "href": "api/NanoByte.Common.Dispatch.IChangeNotify-1.html",
    "title": "Interface IChangeNotify<TSender> | NanoByte.Common",
    "summary": "Interface IChangeNotify<TSender> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll An object that can notify interested parties of changes in properties of interest. public interface IChangeNotify<out TSender> Type Parameters TSender The type of the class implementing this interface. Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Events Changed Occurs when a property of interest has changed. event Action<out TSender> Changed Event Type Action<TSender> ChangedRebuild Occurs when a property changed that requires visual representations to rebuilt from scratch. event Action<out TSender> ChangedRebuild Event Type Action<TSender>"
  },
  "api/NanoByte.Common.Dispatch.IMergeable-1.html": {
    "href": "api/NanoByte.Common.Dispatch.IMergeable-1.html",
    "title": "Interface IMergeable<T> | NanoByte.Common",
    "summary": "Interface IMergeable<T> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll An equatable element that can be merged using 3-way merging. public interface IMergeable<T> Type Parameters T The type the interface is being applied to. Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties MergeID A unique identifier used when comparing for merging. Should always remain the same, even when the element is modified. [Browsable(false)] string MergeID { get; } Property Value string Timestamp The time this element was last modified. This is used to determine precedence with sync conflicts. [Browsable(false)] DateTime Timestamp { get; } Property Value DateTime Remarks This value should be ignored by clone and equality methods."
  },
  "api/NanoByte.Common.Dispatch.Merge.html": {
    "href": "api/NanoByte.Common.Dispatch.Merge.html",
    "title": "Class Merge | NanoByte.Common",
    "summary": "Class Merge Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll Provides utility methods for merging System.Collections.Generic.ICollection<T>s. public static class Merge Inheritance object Merge Methods ThreeWay<T>(IEnumerable<T>, IEnumerable<T>, IEnumerable<T>, Action<T>, Action<T>) Performs a 3-way merge on a set of collections. Changes between reference and theirs as they apply to mine are emitted using callback delegates. public static void ThreeWay<T>(IEnumerable<T> reference, IEnumerable<T> theirs, IEnumerable<T> mine, Action<T> added, Action<T> removed) where T : class, IMergeable<T> Parameters reference IEnumerable<T> A common baseline from which both theirs and mine were modified. theirs IEnumerable<T> The foreign list with changes that shall be merged in. mine IEnumerable<T> The local list that shall be updated with foreign changes. added Action<T> Called for every element that should be added to mine. removed Action<T> Called for every element that should be removed from mine. Type Parameters T Remarks Modified elements are handled by calling removed for the old state and added for the new state. ThreeWay<T, TAdded, TRemoved>(IEnumerable<T>, IEnumerable<T>, IEnumerable<T>, ICollection<TAdded>, ICollection<TRemoved>) Performs a 3-way merge on a set of collections. Changes between reference and theirs as they apply to mine are recorded using differential lists. public static void ThreeWay<T, TAdded, TRemoved>(IEnumerable<T> reference, IEnumerable<T> theirs, IEnumerable<T> mine, ICollection<TAdded> added, ICollection<TRemoved> removed) where T : class, IMergeable<T>, TAdded, TRemoved Parameters reference IEnumerable<T> A common baseline from which both theirs and mine were modified. theirs IEnumerable<T> The foreign list with changes that shall be merged in. mine IEnumerable<T> The local list that shall be updated with foreign changes. added ICollection<TAdded> All elements that should be added to mine are added to this list. removed ICollection<TRemoved> All elements that should be removed from mine are added to this list. Type Parameters T TAdded TRemoved Remarks Modified elements are handled by adding to removed for the old state and to added for the new state. TwoWay<T>(IEnumerable<T>, IEnumerable<T>, Action<T>, Action<T>) Performs a 2-way merge on two collections. Changes required to theirs to reflect mine are emitted using callback delegates. public static void TwoWay<T>(IEnumerable<T> theirs, IEnumerable<T> mine, Action<T> added, Action<T> removed) Parameters theirs IEnumerable<T> The foreign list with changes that shall be merged in. mine IEnumerable<T> The local list that shall be updated with foreign changes. added Action<T> Called for every element that should be added to mine. removed Action<T> Called for every element that should be removed from mine. Type Parameters T Remarks theirs and mine should use an internal hashmap for System.Collections.Generic.ICollection<T>.Contains(T) for better performance. TwoWay<T, TAdded, TRemoved>(IEnumerable<T>, IEnumerable<T>, ICollection<TAdded>, ICollection<TRemoved>) Performs a 2-way merge on two collections. Changes required to theirs to reflect mine are recorded using differential lists. public static void TwoWay<T, TAdded, TRemoved>(IEnumerable<T> theirs, IEnumerable<T> mine, ICollection<TAdded> added, ICollection<TRemoved> removed) where T : class, TAdded, TRemoved Parameters theirs IEnumerable<T> The foreign list with changes that shall be merged in. mine IEnumerable<T> The local list that shall be updated with foreign changes. added ICollection<TAdded> All elements that should be added to mine are added to this list. removed ICollection<TRemoved> All elements that should be removed from mine are added to this list. Type Parameters T TAdded TRemoved Remarks theirs and mine should use an internal hashmap for System.Collections.Generic.ICollection<T>.Contains(T) for better performance."
  },
  "api/NanoByte.Common.Dispatch.ModelViewSync-2.html": {
    "href": "api/NanoByte.Common.Dispatch.ModelViewSync-2.html",
    "title": "Class ModelViewSync<TModel, TView> | NanoByte.Common",
    "summary": "Class ModelViewSync<TModel, TView> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll Keeps two collections of different types in sync based on mapping rules. [MustDisposeResource] public sealed class ModelViewSync<TModel, TView> where TModel : class, IChangeNotify<TModel> where TView : class Type Parameters TModel The common base type of elements in the model. TView The common base type of representations in the view. Inheritance object ModelViewSync<TModel, TView> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks Useful for maintaining View representations for a set of mutable Model elements in a Model-View-Controller/Presenter design. Generated View representations will automatically be disposed on removal, if they implement System.IDisposable. Constructors ModelViewSync(MonitoredCollection<TModel>, ICollection<TView>) Keeps two collections of different types in sync based on mapping rules. public ModelViewSync(MonitoredCollection<TModel> model, ICollection<TView> view) Parameters model MonitoredCollection<TModel> The Model that can change on its own accord. view ICollection<TView> The View that is to be automatically updated to reflect changes in the Model. Remarks Useful for maintaining View representations for a set of mutable Model elements in a Model-View-Controller/Presenter design. Generated View representations will automatically be disposed on removal, if they implement System.IDisposable. Properties Representations All View representations created by the synchronizer. public IEnumerable<TView> Representations { get; } Property Value IEnumerable<TView> Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Initialize() Must be called once, after all relevant mapping rules have been registered. public void Initialize() Lookup(TView) Looks up the Model element a View representation was created for. public TModel Lookup(TView representation) Parameters representation TView Returns TModel Exceptions KeyNotFoundException There is no match. RegisterMultiple<TSpecificModel, TSpecificView>(Func<TSpecificModel, IEnumerable<TSpecificView>>, Action<TSpecificModel, TSpecificView>?) Registers a mapping rule for a specific type of Model element. public void RegisterMultiple<TSpecificModel, TSpecificView>(Func<TSpecificModel, IEnumerable<TSpecificView>> create, Action<TSpecificModel, TSpecificView>? update = null) where TSpecificModel : class, TModel where TSpecificView : class, TView Parameters create Func<TSpecificModel, IEnumerable<TSpecificView>> Callback that creates a set of 0..n View representations for a given Model element. update Action<TSpecificModel, TSpecificView> Callback that updates a specific View representation based on the state of a given Model element; can be null. Type Parameters TSpecificModel TSpecificView Register<TSpecificModel, TSpecificView>(Func<TSpecificModel, TSpecificView>, Action<TSpecificModel, TSpecificView>?) Registers a mapping rule for a specific type of Model element. public void Register<TSpecificModel, TSpecificView>(Func<TSpecificModel, TSpecificView> create, Action<TSpecificModel, TSpecificView>? update = null) where TSpecificModel : class, TModel where TSpecificView : class, TView Parameters create Func<TSpecificModel, TSpecificView> Callback that creates a View representation for a given Model element. update Action<TSpecificModel, TSpecificView> Callback that updates a View representation based on the state of a given Model element; can be null. Type Parameters TSpecificModel TSpecificView"
  },
  "api/NanoByte.Common.Dispatch.PerTypeDispatcher-1.html": {
    "href": "api/NanoByte.Common.Dispatch.PerTypeDispatcher-1.html",
    "title": "Class PerTypeDispatcher<TBase> | NanoByte.Common",
    "summary": "Class PerTypeDispatcher<TBase> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll Calls different action delegates based on the runtime types of objects. Types must be exact matches. Inheritance is not considered. public class PerTypeDispatcher<TBase> where TBase : class Type Parameters TBase The common base type of all objects to be dispatched. Inheritance object PerTypeDispatcher<TBase> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors PerTypeDispatcher(bool) Calls different action delegates based on the runtime types of objects. Types must be exact matches. Inheritance is not considered. public PerTypeDispatcher(bool ignoreMissing) Parameters ignoreMissing bool true to silently ignore dispatch attempts on unknown types; false to throw exceptions. Methods Add<TSpecific>(Action<TSpecific>) Adds a dispatch delegate. public PerTypeDispatcher<TBase> Add<TSpecific>(Action<TSpecific> action) where TSpecific : TBase Parameters action Action<TSpecific> The delegate to call. Returns PerTypeDispatcher<TBase> The \"this\" pointer for use in a \"Fluent API\" style. Type Parameters TSpecific The specific type to call the delegate for. Does not match subtypes Dispatch(IEnumerable<TBase>) Dispatches for each element in a collection. Set up with Add<TSpecific>(Action<TSpecific>) first. public void Dispatch(IEnumerable<TBase> elements) Parameters elements IEnumerable<TBase> The elements to be dispatched. Exceptions KeyNotFoundException No delegate matching one of the element types was Add<TSpecific>(Action<TSpecific>)ed. Dispatch(TBase) Dispatches an element to the delegate matching the type. Set up with Add<TSpecific>(Action<TSpecific>) first. public void Dispatch(TBase element) Parameters element TBase The element to be dispatched. Exceptions KeyNotFoundException No delegate matching the element type was Add<TSpecific>(Action<TSpecific>)ed. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<Type, Action<object>>> GetEnumerator() Returns IEnumerator<KeyValuePair<Type, Action<object>>> An enumerator that can be used to iterate through the collection."
  },
  "api/NanoByte.Common.Dispatch.PerTypeDispatcher-2.html": {
    "href": "api/NanoByte.Common.Dispatch.PerTypeDispatcher-2.html",
    "title": "Class PerTypeDispatcher<TBase, TResult> | NanoByte.Common",
    "summary": "Class PerTypeDispatcher<TBase, TResult> Namespace NanoByte.Common.Dispatch Assembly NanoByte.Common.dll Calls different function delegates (with return values) based on the runtime types of objects. Types must be exact matches. Inheritance is not considered. public class PerTypeDispatcher<TBase, TResult> where TBase : class Type Parameters TBase The common base type of all objects to be dispatched. TResult The return value of the delegates. Inheritance object PerTypeDispatcher<TBase, TResult> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Add<TSpecific>(Func<TSpecific, TResult>) Adds a dispatch delegate. public PerTypeDispatcher<TBase, TResult> Add<TSpecific>(Func<TSpecific, TResult> function) where TSpecific : TBase Parameters function Func<TSpecific, TResult> The delegate to call. Returns PerTypeDispatcher<TBase, TResult> The \"this\" pointer for use in a \"Fluent API\" style. Type Parameters TSpecific The specific type to call the delegate for. Does not match subtypes. Dispatch(IEnumerable<TBase>) Dispatches for each element in a collection. Set up with Add<TSpecific>(Func<TSpecific, TResult>) first. public IEnumerable<TResult> Dispatch(IEnumerable<TBase> elements) Parameters elements IEnumerable<TBase> The elements to be dispatched. Returns IEnumerable<TResult> The values returned by the matching delegates. Exceptions KeyNotFoundException No delegate matching one of the element types was Add<TSpecific>(Func<TSpecific, TResult>)ed. Dispatch(TBase) Dispatches an element to the delegate matching the type. Set up with Add<TSpecific>(Func<TSpecific, TResult>) first. public TResult Dispatch(TBase element) Parameters element TBase The element to be dispatched. Returns TResult The value returned by the matching delegate. Exceptions KeyNotFoundException No delegate matching the element type was Add<TSpecific>(Func<TSpecific, TResult>)ed. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<Type, Func<TBase, TResult>>> GetEnumerator() Returns IEnumerator<KeyValuePair<Type, Func<TBase, TResult>>> An enumerator that can be used to iterate through the collection."
  },
  "api/NanoByte.Common.Dispatch.html": {
    "href": "api/NanoByte.Common.Dispatch.html",
    "title": "Namespace NanoByte.Common.Dispatch | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Dispatch Functionality like double dispatch and two/three-way merging. Classes AggregateDispatcher<TBase> Calls different action delegates based on the runtime types of objects. Calls multiple delegates when they all match a type (through inheritance). AggregateDispatcher<TBase, TResult> Calls different function delegates (with enumerable return values) based on the runtime types of objects. Aggregates results when multiple delegates match a type (through inheritance). BucketRule<T> A rule for Bucketizer<T>. BucketRule<TElement, TValue> A rule for Bucketizer<TElement, TValue>. Bucketizer Contains extension methods for creating bucketizers. Bucketizer<T> Splits collections into multiple buckets based on predicate matching. The first matching predicate wins. Create with Bucketize<T>(IEnumerable<T>). Bucketizer<TElement, TValue> Splits collections into multiple buckets based on value-mapping. Create with Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>). Merge Provides utility methods for merging System.Collections.Generic.ICollection<T>s. ModelViewSync<TModel, TView> Keeps two collections of different types in sync based on mapping rules. PerTypeDispatcher<TBase> Calls different action delegates based on the runtime types of objects. Types must be exact matches. Inheritance is not considered. PerTypeDispatcher<TBase, TResult> Calls different function delegates (with return values) based on the runtime types of objects. Types must be exact matches. Inheritance is not considered. Interfaces IChangeNotify<TSender> An object that can notify interested parties of changes in properties of interest. IMergeable<T> An equatable element that can be merged using 3-way merging."
  },
  "api/NanoByte.Common.Disposable.html": {
    "href": "api/NanoByte.Common.Disposable.html",
    "title": "Class Disposable | NanoByte.Common",
    "summary": "Class Disposable Namespace NanoByte.Common Assembly NanoByte.Common.dll Invokes a callback on Dispose(). [MustDisposeResource] public sealed class Disposable Inheritance object Disposable Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors Disposable(Action) Invokes a callback on Dispose(). public Disposable(Action callback) Parameters callback Action The callback to invoke on Dispose(). Methods Dispose() Invokes the callback. public void Dispose()"
  },
  "api/NanoByte.Common.Drawing.DefaultFonts.html": {
    "href": "api/NanoByte.Common.Drawing.DefaultFonts.html",
    "title": "Class DefaultFonts | NanoByte.Common",
    "summary": "Class DefaultFonts Namespace NanoByte.Common.Drawing Assembly NanoByte.Common.WinForms.dll Common fonts used in WinForms. public static class DefaultFonts Inheritance object DefaultFonts Properties Classic The classic WinForms default font (Microsoft Sans Serif). public static Font Classic { get; } Property Value Font Modern The modern WinForms default font (Segoe UI) but with the classic font size (8.25). public static Font Modern { get; } Property Value Font"
  },
  "api/NanoByte.Common.Drawing.ImageExtensions.html": {
    "href": "api/NanoByte.Common.Drawing.ImageExtensions.html",
    "title": "Class ImageExtensions | NanoByte.Common",
    "summary": "Class ImageExtensions Namespace NanoByte.Common.Drawing Assembly NanoByte.Common.WinForms.dll Provides extension methods for System.Drawing.Images. public static class ImageExtensions Inheritance object ImageExtensions Methods Scale(Image, SizeF) Returns a copy of an image scaled by the specified factor. public static Image Scale(this Image image, SizeF factor) Parameters image Image factor SizeF Returns Image"
  },
  "api/NanoByte.Common.Drawing.ScalableImage.html": {
    "href": "api/NanoByte.Common.Drawing.ScalableImage.html",
    "title": "Class ScalableImage | NanoByte.Common",
    "summary": "Class ScalableImage Namespace NanoByte.Common.Drawing Assembly NanoByte.Common.WinForms.dll Wraps an System.Drawing.Image and provides and caches scaled versions of it. public sealed class ScalableImage Inheritance object ScalableImage Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ScalableImage(Image) Wraps an System.Drawing.Image and provides and caches scaled versions of it. public ScalableImage(Image image) Parameters image Image The base image. Methods Dispose() Disposes the base image and any scaled images returned by Get(SizeF). public void Dispose() Get(SizeF) Returns a copy of the base image scaled by the specified factor. public Image Get(SizeF factor) Parameters factor SizeF Returns Image"
  },
  "api/NanoByte.Common.Drawing.html": {
    "href": "api/NanoByte.Common.Drawing.html",
    "title": "Namespace NanoByte.Common.Drawing | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Drawing Helpers for manipulating images Classes DefaultFonts Common fonts used in WinForms. ImageExtensions Provides extension methods for System.Drawing.Images. ScalableImage Wraps an System.Drawing.Image and provides and caches scaled versions of it."
  },
  "api/NanoByte.Common.EncodingUtils.html": {
    "href": "api/NanoByte.Common.EncodingUtils.html",
    "title": "Class EncodingUtils | NanoByte.Common",
    "summary": "Class EncodingUtils Namespace NanoByte.Common Assembly NanoByte.Common.dll Helper methods for encoding strings, decoding byte arrays, calculating hashes, etc.. public static class EncodingUtils Inheritance object EncodingUtils Fields Utf8 UTF-8 encoding without BOM (byte order marker). public static readonly Encoding Utf8 Field Value Encoding Methods Base16Decode(string) Decodes a base16 (hexadecimal) to a byte array. [Pure] public static byte[] Base16Decode(this string encoded) Parameters encoded string Returns byte[] Base16Encode(byte[]) Encodes a byte array in base16 (hexadecimal). [Pure] public static string Base16Encode(this byte[] data) Parameters data byte[] Returns string Base32Encode(byte[]) Encodes a byte array in base32 without padding. [Pure] public static string Base32Encode(this byte[] data) Parameters data byte[] Returns string Base64Utf8Decode(string) Decodes a UTF-8 in base64 string. [Pure] public static string Base64Utf8Decode(this string value) Parameters value string Returns string Exceptions FormatException value is not a valid base 64 string. Base64Utf8Encode(string) Encodes a string as UTF-8 in base64. [Pure] public static string Base64Utf8Encode(this string value) Parameters value string Returns string Hash(string, HashAlgorithm) Computes the hash value of a string encoded as UTF-8. [Pure] public static string Hash(this string value, HashAlgorithm algorithm) Parameters value string The string to hash. algorithm HashAlgorithm The hashing algorithm to use. Returns string A hexadecimal string representation of the hash value."
  },
  "api/NanoByte.Common.ExceptionUtils.html": {
    "href": "api/NanoByte.Common.ExceptionUtils.html",
    "title": "Class ExceptionUtils | NanoByte.Common",
    "summary": "Class ExceptionUtils Namespace NanoByte.Common Assembly NanoByte.Common.dll Provides helper methods related to System.Exceptions. public static class ExceptionUtils Inheritance object ExceptionUtils Methods GetMessageWithInner(Exception) Recursively follows the System.Exception.InnerExceptions and combines all their System.Exception.Messages, removing duplicates. [Pure] public static string GetMessageWithInner(this Exception exception) Parameters exception Exception Returns string Rethrow(Exception) Rethrows an exception while preserving its original stack trace. public static Exception Rethrow(this Exception exception) Parameters exception Exception Returns Exception This method never returns. You can \"throw\" the return value to satisfy the compiler's flow analysis if necessary. RethrowFirstInner(AggregateException) Rethrows the first of the System.AggregateException.InnerExceptions and logs all others. public static Exception RethrowFirstInner(this AggregateException exception) Parameters exception AggregateException Returns Exception This method never returns. You can \"throw\" the return value to satisfy the compiler's flow analysis if necessary. RetryAsync<TException>(Func<Task>, int) Executes an asynchronous delegate and automatically retries it using exponential back-off if a specific type of exception was raised. public static Task RetryAsync<TException>(Func<Task> action, int maxRetries = 2) where TException : Exception Parameters action Func<Task> The action to execute. maxRetries int The maximum number of retries to attempt. Returns Task Type Parameters TException The type of exception to trigger a retry. Retry<TException>(Action, int) Executes a delegate and automatically retries it using exponential back-off if a specific type of exception was raised. public static void Retry<TException>(Action action, int maxRetries = 2) where TException : Exception Parameters action Action The action to execute. maxRetries int The maximum number of retries to attempt. Type Parameters TException The type of exception to trigger a retry. Retry<TException, TResult>(Func<Task<TResult>>, int) Executes an asynchronous and automatically retries it using exponential back-off if a specific type of exception was raised. public static Task<TResult> Retry<TException, TResult>(Func<Task<TResult>> function, int maxRetries = 2) where TException : Exception Parameters function Func<Task<TResult>> The function to execute. maxRetries int The maximum number of retries to attempt. Returns Task<TResult> The result of function. Type Parameters TException The type of exception to trigger a retry. TResult The type of result the function produces. Retry<TException, TResult>(Func<TResult>, int) Executes a delegate and automatically retries it using exponential back-off if a specific type of exception was raised. public static TResult Retry<TException, TResult>(Func<TResult> function, int maxRetries = 2) where TException : Exception Parameters function Func<TResult> The function to execute. maxRetries int The maximum number of retries to attempt. Returns TResult The result of function. Type Parameters TException The type of exception to trigger a retry. TResult The type of result the function produces. TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) Applies an operation for the first possible element of a collection. If the operation succeeds the remaining elements are ignored. If the operation fails it is repeated for the next element. public static Task TryAnyAsync<T>(this IEnumerable<T> elements, Func<T, Task> action) Parameters elements IEnumerable<T> The elements to apply the action for. action Func<T, Task> The action to apply to an element. Returns Task Type Parameters T The type of elements to operate on. Exceptions Exception The exception thrown by action for the last element of elements. TryAny<T>(IEnumerable<T>, Action<T>) Applies an operation for the first possible element of a collection. If the operation succeeds the remaining elements are ignored. If the operation fails it is repeated for the next element. If the operation fails with System.OperationCanceledExceptions no further elements are tried. public static void TryAny<T>(this IEnumerable<T> elements, Action<T> action) Parameters elements IEnumerable<T> The elements to apply the action for. action Action<T> The action to apply to an element. Type Parameters T The type of elements to operate on. Exceptions Exception The exception thrown by action for the last element of elements."
  },
  "api/NanoByte.Common.ExitCodeException.html": {
    "href": "api/NanoByte.Common.ExitCodeException.html",
    "title": "Class ExitCodeException | NanoByte.Common",
    "summary": "Class ExitCodeException Namespace NanoByte.Common Assembly NanoByte.Common.dll Indicates that a System.Diagnostics.Process exited with an unexpected System.Diagnostics.Process.ExitCode. [Serializable] public sealed class ExitCodeException : IOException Inheritance object Exception SystemException IOException ExitCodeException Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) ExceptionUtils.GetMessageWithInner(Exception) ExceptionUtils.Rethrow(Exception) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ExitCodeException() Initializes a new instance of the System.IO.IOException class with its message string set to the empty string (\"\"), its HRESULT set to COR_E_IO, and its inner exception set to a null reference. public ExitCodeException() ExitCodeException(Process) Creates a new exit code exception. public ExitCodeException(Process process) Parameters process Process The process that has exited. ExitCodeException(string) Initializes a new instance of the System.IO.IOException class with its message string set to message, its HRESULT set to COR_E_IO, and its inner exception set to null. public ExitCodeException(string message) Parameters message string A string that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. ExitCodeException(string, Exception) Initializes a new instance of the System.IO.IOException class with a specified error message and a reference to the inner exception that is the cause of this exception. public ExitCodeException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception. ExitCodeException(string, int) Creates a new exit code exception. public ExitCodeException(string message, int exitCode) Parameters message string The exception message. exitCode int The System.Diagnostics.Process.ExitCode. Properties ExitCode The System.Diagnostics.Process.ExitCode. public int ExitCode { get; } Property Value int Methods GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions ArgumentNullException The info parameter is a null reference (Nothing in Visual Basic)."
  },
  "api/NanoByte.Common.ICloneable-1.html": {
    "href": "api/NanoByte.Common.ICloneable-1.html",
    "title": "Interface ICloneable<T> | NanoByte.Common",
    "summary": "Interface ICloneable<T> Namespace NanoByte.Common Assembly NanoByte.Common.dll Supports cloning. public interface ICloneable<out T> Type Parameters T Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Clone() Creates a new clone of this instance. T Clone() Returns T"
  },
  "api/NanoByte.Common.IHighlightColor.html": {
    "href": "api/NanoByte.Common.IHighlightColor.html",
    "title": "Interface IHighlightColor | NanoByte.Common",
    "summary": "Interface IHighlightColor Namespace NanoByte.Common Assembly NanoByte.Common.dll An object that can be highlighted with a specific color in graphical representations. public interface IHighlightColor Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties HighlightColor The color to highlight this object with in graphical representations. System.Drawing.Color.Empty for no highlighting. Color HighlightColor { get; } Property Value Color"
  },
  "api/NanoByte.Common.INamed.html": {
    "href": "api/NanoByte.Common.INamed.html",
    "title": "Interface INamed | NanoByte.Common",
    "summary": "Interface INamed Namespace NanoByte.Common Assembly NanoByte.Common.dll An entity that has a unique name that can be used for identification in lists and trees. public interface INamed Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties Name A unique name for the object. string Name { get; set; } Property Value string"
  },
  "api/NanoByte.Common.Info.AppInfo.html": {
    "href": "api/NanoByte.Common.Info.AppInfo.html",
    "title": "Struct AppInfo | NanoByte.Common",
    "summary": "Struct AppInfo Namespace NanoByte.Common.Info Assembly NanoByte.Common.dll Wraps information about an application in a serializer-friendly format. public struct AppInfo Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties Arguments The command-line arguments the application was started with. public string[]? Arguments { readonly get; set; } Property Value string[] Copyright The copyright information for the application. public string? Copyright { readonly get; set; } Property Value string Current Information about the currently running application (looks at the entry assembly). public static AppInfo Current { get; } Property Value AppInfo CurrentLibrary Information about the currently running library (looks at the calling assembly). public static AppInfo CurrentLibrary { get; } Property Value AppInfo Description A description of the application. public string? Description { readonly get; set; } Property Value string Name The name of the application. public string? Name { readonly get; set; } Property Value string NameVersion The Name and Version combined. public string NameVersion { get; } Property Value string ProductName The name of the product the application is a part of. public string? ProductName { readonly get; set; } Property Value string Version The version number of the application. public string? Version { readonly get; set; } Property Value string Methods Load(Assembly?) Loads application information for a specific System.Reflection.Assembly. public static AppInfo Load(Assembly? assembly) Parameters assembly Assembly Returns AppInfo"
  },
  "api/NanoByte.Common.Info.ExceptionInfo.html": {
    "href": "api/NanoByte.Common.Info.ExceptionInfo.html",
    "title": "Class ExceptionInfo | NanoByte.Common",
    "summary": "Class ExceptionInfo Namespace NanoByte.Common.Info Assembly NanoByte.Common.dll Wraps information about an exception in a serializer-friendly format. public class ExceptionInfo Inheritance object ExceptionInfo Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ExceptionInfo() Base-constructor for XML serialization. Do not call manually! public ExceptionInfo() ExceptionInfo(Exception) Creates an exception information based on an exception. public ExceptionInfo(Exception ex) Parameters ex Exception The exception whose information to extract. Properties ExceptionType The type of exception. public string? ExceptionType { get; set; } Property Value string InnerException Information about the exception that originally caused the exception being described here. public ExceptionInfo? InnerException { get; set; } Property Value ExceptionInfo Message The message describing the exception. public string? Message { get; set; } Property Value string Source The name of the application or the object that causes the error. public string? Source { get; set; } Property Value string StackTrace A string representation of the frames on the call stack at the time the exception was thrown. public string? StackTrace { get; set; } Property Value string"
  },
  "api/NanoByte.Common.Info.OSInfo.html": {
    "href": "api/NanoByte.Common.Info.OSInfo.html",
    "title": "Struct OSInfo | NanoByte.Common",
    "summary": "Struct OSInfo Namespace NanoByte.Common.Info Assembly NanoByte.Common.dll Wraps information about an operating system in a serializer-friendly format. public struct OSInfo Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields DotNetVersion The version of .NET running the current process. public string DotNetVersion Field Value string Platform The operating system platform (e.g., Win32NT or win). public string Platform Field Value string Version The version of the operating system (e.g., 6.0 for Vista). public string Version Field Value string Properties Current Information about the current operating system. public static OSInfo Current { get; } Property Value OSInfo OSArchitecture The processor architecture of the operating system. public Architecture OSArchitecture { readonly get; set; } Property Value Architecture ProcessArchitecture The (potentially emulated) processor architecture of the running process. public Architecture ProcessArchitecture { readonly get; set; } Property Value Architecture"
  },
  "api/NanoByte.Common.Info.html": {
    "href": "api/NanoByte.Common.Info.html",
    "title": "Namespace NanoByte.Common.Info | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Info Data structures providing diagnostic information about the application, the operating system, etc.. Classes ExceptionInfo Wraps information about an exception in a serializer-friendly format. Structs AppInfo Wraps information about an application in a serializer-friendly format. OSInfo Wraps information about an operating system in a serializer-friendly format."
  },
  "api/NanoByte.Common.Log.html": {
    "href": "api/NanoByte.Common.Log.html",
    "title": "Class Log | NanoByte.Common",
    "summary": "Class Log Namespace NanoByte.Common Assembly NanoByte.Common.dll A simple logging system. Writes to an in-memory buffer and a plain text file. Allows additional handlers to be registered (e.g., for console or GUI output). public static class Log Inheritance object Log Methods Debug(Exception) Writes information to help developers diagnose problems to the log. public static void Debug(Exception exception) Parameters exception Exception Debug(string, Exception?) Writes information to help developers diagnose problems to the log. public static void Debug(string message, Exception? exception = null) Parameters message string exception Exception Error(Exception) Writes a critical error that should be attended to the log. public static void Error(Exception exception) Parameters exception Exception Error(string, Exception?) Writes a critical error that should be attended to the log. public static void Error(string message, Exception? exception = null) Parameters message string exception Exception GetBuffer() Returns the log lines collected in the in-memory buffer. public static string GetBuffer() Returns string Info(Exception) Writes nice-to-know information to the log. public static void Info(Exception exception) Parameters exception Exception Info(string, Exception?) Writes nice-to-know information to the log. public static void Info(string message, Exception? exception = null) Parameters message string exception Exception ReadLastErrorFrom(string, int?) Tries to read the last error log line written by another process. public static string? ReadLastErrorFrom(string appName, int? processId = null) Parameters appName string The name of the app to get a log line for. processId int? The process ID to get a log line for. Leave null to get for any process ID. Returns string Warn(Exception) Writes a warning that doesn't have to be acted upon immediately to the log. public static void Warn(Exception exception) Parameters exception Exception Warn(string, Exception?) Writes a warning that doesn't have to be acted upon immediately to the log. public static void Warn(string message, Exception? exception = null) Parameters message string exception Exception Events Handler Invoked when a new entry is added to the log. Only the newest (last) registered handler is invoked. System.Console output is used as a fallback if no handlers are registered. public static event LogEntryEventHandler? Handler Event Type LogEntryEventHandler"
  },
  "api/NanoByte.Common.LogEntryEventHandler.html": {
    "href": "api/NanoByte.Common.LogEntryEventHandler.html",
    "title": "Delegate LogEntryEventHandler | NanoByte.Common",
    "summary": "Delegate LogEntryEventHandler Namespace NanoByte.Common Assembly NanoByte.Common.dll Describes an event relating to an entry in the Log. public delegate void LogEntryEventHandler(LogSeverity severity, string? message, Exception? exception) Parameters severity LogSeverity The type/severity of the entry. message string The message of the entry. exception Exception An optional exception associated with the entry. Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) See Also Handler"
  },
  "api/NanoByte.Common.LogSeverity.html": {
    "href": "api/NanoByte.Common.LogSeverity.html",
    "title": "Enum LogSeverity | NanoByte.Common",
    "summary": "Enum LogSeverity Namespace NanoByte.Common Assembly NanoByte.Common.dll Describes how severe/important a Log entry is. public enum LogSeverity Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) EnumExtensions.GetEnumAttribute<TAttribute>(Enum) EnumExtensions.HasFlag(Enum, Enum) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields Debug = 0 Information to help developers diagnose problems. Error = 3 A critical error that should be attended to. Info = 1 A nice-to-know piece of information. Warn = 2 A warning that doesn't have to be acted upon immediately. See Also LogEntryEventHandler"
  },
  "api/NanoByte.Common.MathUtils.html": {
    "href": "api/NanoByte.Common.MathUtils.html",
    "title": "Class MathUtils | NanoByte.Common",
    "summary": "Class MathUtils Namespace NanoByte.Common Assembly NanoByte.Common.dll Provides math-related utility functions. public static class MathUtils Inheritance object MathUtils Methods Clamp(double, double, double) Makes a value stay within a certain range. [Pure] public static double Clamp(this double value, double min = 0, double max = 1) Parameters value double The number to clamp. min double The minimum number to return. max double The maximum number to return. Returns double The value if it was in range, otherwise min or max. Clamp(int, int, int) Makes a value stay within a certain range. [Pure] public static int Clamp(this int value, int min = 0, int max = 1) Parameters value int The number to clamp. min int The minimum number to return. max int The maximum number to return. Returns int The value if it was in range, otherwise min or max. Clamp(long, long, long) Makes a value stay within a certain range. [Pure] public static long Clamp(this long value, long min = 0, long max = 1) Parameters value long The number to clamp. min long The minimum number to return. max long The maximum number to return. Returns long The value if it was in range, otherwise min or max. Clamp(float, float, float) Makes a value stay within a certain range. [Pure] public static float Clamp(this float value, float min = 0, float max = 1) Parameters value float The number to clamp. min float The minimum number to return. max float The maximum number to return. Returns float The value if it was in range, otherwise min or max. DegreeToRadian(double) Converts an angle in degrees to radians. [Pure] public static double DegreeToRadian(this double value) Parameters value double The angle in degrees. Returns double The angle in radians. DegreeToRadian(float) Converts an angle in degrees to radians. [Pure] public static float DegreeToRadian(this float value) Parameters value float The angle in degrees. Returns float The angle in radians. EqualsTolerance(double, double, double) Compares two floating-point values for equality, allowing for a certain tolerance. [Pure] public static bool EqualsTolerance(this double a, double b, double tolerance = 1E-05) Parameters a double b double tolerance double Returns bool EqualsTolerance(float, float, float) Compares two floating-point values for equality, allowing for a certain tolerance. [Pure] public static bool EqualsTolerance(this float a, float b, float tolerance = 1E-05) Parameters a float b float tolerance float Returns bool GaussKernel(double, int) Generates a Gaussian kernel. [Pure] public static double[] GaussKernel(double sigma, int kernelSize) Parameters sigma double The standard deviation of the Gaussian distribution. kernelSize int The size of the kernel. Should be an uneven number. Returns double[] InterpolateTrigonometric(double, params double[]) Performs smooth (trigonometric) interpolation between two or more values. [Pure] public static double InterpolateTrigonometric(double factor, params double[] values) Parameters factor double A factor between 0 and values.Length. values double[] The value checkpoints. Returns double InterpolateTrigonometric(float, params float[]) Performs smooth (trigonometric) interpolation between two or more values. [Pure] public static float InterpolateTrigonometric(this float factor, params float[] values) Parameters factor float A factor between 0 and values.Length. values float[] The value checkpoints. Returns float Modulo(double, double) Calculates the mathematical modulo of a value. [Pure] public static double Modulo(this double value, double modulo) Parameters value double modulo double Returns double Modulo(int, int) Calculates the mathematical modulo of a value. [Pure] public static int Modulo(this int value, int modulo) Parameters value int modulo int Returns int Modulo(long, long) Calculates the mathematical modulo of a value. [Pure] public static long Modulo(this long value, long modulo) Parameters value long modulo long Returns long Modulo(float, float) Calculates the mathematical modulo of a value. [Pure] public static float Modulo(this float value, float modulo) Parameters value float modulo float Returns float MultiplyAndRound(Size, SizeF) Multiplies a System.Drawing.Size with a System.Drawing.SizeF and then rounds the components to integer values. [Pure] public static Size MultiplyAndRound(this Size size, SizeF factor) Parameters size Size factor SizeF Returns Size RadianToDegree(double) Converts an angle in radians to degrees. [Pure] public static double RadianToDegree(this double value) Parameters value double The angle in radians. Returns double The angle in degrees. RadianToDegree(float) Converts an angle in radians to degrees. [Pure] public static float RadianToDegree(this float value) Parameters value float The angle in radians. Returns float The angle in degrees."
  },
  "api/NanoByte.Common.Named.html": {
    "href": "api/NanoByte.Common.Named.html",
    "title": "Class Named | NanoByte.Common",
    "summary": "Class Named Namespace NanoByte.Common Assembly NanoByte.Common.dll Static companion for INamed. public static class Named Inheritance object Named Fields TreeSeparator The default separator to use in Name for tree hierarchies. public const char TreeSeparator = '|' Field Value char"
  },
  "api/NanoByte.Common.Native.AppMutex.html": {
    "href": "api/NanoByte.Common.Native.AppMutex.html",
    "title": "Class AppMutex | NanoByte.Common",
    "summary": "Class AppMutex Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides a cross-process object allowing easy detection of application instances (e.g., for use by installers and update tools). No-op on non-Windows platforms. [MustDisposeResource] public sealed class AppMutex Inheritance object AppMutex Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks Use System.Threading.Mutex or MutexLock instead for synchronizing access to shared resources. Methods Create(string) Creates or opens a mutex to signal that an application is running. [MustDisposeResource] public static AppMutex Create(string name) Parameters name string The name to be used as a mutex identifier. Returns AppMutex The handle for the mutex. Can be used to close it again. Will automatically be released once the process terminates. Dispose() Closes the mutex handle, allowing it to be released if no other instances are running. public void Dispose() Probe(string) Checks whether a specific mutex exists (local or global) without opening a lasting handle. public static bool Probe(string name) Parameters name string The name to be used as a mutex identifier. Returns bool true if an existing mutex was found; false if none existed."
  },
  "api/NanoByte.Common.Native.CompilerUtils.html": {
    "href": "api/NanoByte.Common.Native.CompilerUtils.html",
    "title": "Class CompilerUtils | NanoByte.Common",
    "summary": "Class CompilerUtils Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides helper methods for compiling .NET code at runtime. public static class CompilerUtils Inheritance object CompilerUtils Methods CompileCSharp(CompilerParameters, string, string) Compiles a string of C# code using the newest C# compiler available on the system. public static void CompileCSharp(this CompilerParameters compilerParameters, string code, string manifest) Parameters compilerParameters CompilerParameters The compiler configuration (e.g. output file path). code string The C# code to compile. manifest string The contents of the Win32 manifest to apply to the output file. Will only be applied if a C# 3.0 or newer compiler is available."
  },
  "api/NanoByte.Common.Native.CygwinUtils.html": {
    "href": "api/NanoByte.Common.Native.CygwinUtils.html",
    "title": "Class CygwinUtils | NanoByte.Common",
    "summary": "Class CygwinUtils Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides access to Cygwin-related filesystem features. Cygwin provides Unix-like functionality on Windows systems. public static class CygwinUtils Inheritance object CygwinUtils Methods CreateSymlink(string, string) Creates a new Cygwin symbolic link (http://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks). public static void CreateSymlink(string sourcePath, string targetPath) Parameters sourcePath string The path of the link to create. targetPath string The path of the existing file or directory to point to (relative to sourcePath). Exceptions IOException There was an IO problem writing the file. UnauthorizedAccessException Write access to the file was denied. PlatformNotSupportedException This method is called on a platform other than Windows. IsSymlink(string) Checks whether a file is a Cygwin symbolic link (http://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks). public static bool IsSymlink(string path) Parameters path string The path of the file to check. Returns bool true if path points to a symbolic link; false otherwise. Exceptions IOException There was an IO problem reading the file. UnauthorizedAccessException Read access to the file was denied. IsSymlink(string, out string) Checks whether a file is a Cygwin symbolic link (http://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks). public static bool IsSymlink(string path, out string target) Parameters path string The path of the file to check. target string Returns the target the symbolic link points to if it exists. Returns bool true if path points to a symbolic link; false otherwise. Exceptions IOException There was an IO problem reading the file. UnauthorizedAccessException Read access to the file was denied."
  },
  "api/NanoByte.Common.Native.IProcessLauncher.html": {
    "href": "api/NanoByte.Common.Native.IProcessLauncher.html",
    "title": "Interface IProcessLauncher | NanoByte.Common",
    "summary": "Interface IProcessLauncher Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Runs an external process. public interface IProcessLauncher Extension Methods ProcessLauncherExtensions.RunAndCapture(IProcessLauncher, ArraySegment<byte>, params string[]) ProcessLauncherExtensions.RunAndCapture(IProcessLauncher, params string[]) BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods GetStartInfo(params string[]) Creates the System.Diagnostics.ProcessStartInfo used to launch the process. ProcessStartInfo GetStartInfo(params string[] arguments) Parameters arguments string[] The arguments to pass to the process at startup. Returns ProcessStartInfo Run(params string[]) Runs the process and waits for it to exit. void Run(params string[] arguments) Parameters arguments string[] Command-line arguments to launch the process with. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation. ExitCodeException The process exited with a non-zero System.Diagnostics.Process.ExitCode. RunAndCapture(Action<StreamWriter>?, params string[]) Runs the process, captures its stdout and stderr output and waits for it to exit. string RunAndCapture(Action<StreamWriter>? onStartup, params string[] arguments) Parameters onStartup Action<StreamWriter> A callback for writing to the process' stdin right after startup. arguments string[] Command-line arguments to launch the process with. Returns string The process' complete stdout output. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation. ExitCodeException The process exited with a non-zero System.Diagnostics.Process.ExitCode. Start(params string[]) Starts the process and runs it in parallel with this one. Process Start(params string[] arguments) Parameters arguments string[] Command-line arguments to launch the process with. Returns Process The newly launched process. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation."
  },
  "api/NanoByte.Common.Native.OSUtils.html": {
    "href": "api/NanoByte.Common.Native.OSUtils.html",
    "title": "Class OSUtils | NanoByte.Common",
    "summary": "Class OSUtils Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides helper methods related to operating system functionality across multiple platforms. public static class OSUtils Inheritance object OSUtils Methods ExpandVariables(string, IDictionary<string, string?>) Expands/substitutes any Unix-style environment variables in the string. public static string ExpandVariables(string value, IDictionary<string, string?> variables) Parameters value string The string containing variables to be expanded. variables IDictionary<string, string> The list of variables available for expansion. Returns string Remarks Supports default values for unset variables (\\({VAR-default}</code>) and for unset or empty variables (<code>\\){VAR:-default}). ExpandVariables(string, StringDictionary) Expands/substitutes any Unix-style environment variables in the string. public static string ExpandVariables(string value, StringDictionary variables) Parameters value string The string containing variables to be expanded. variables StringDictionary The list of variables available for expansion. Returns string Remarks Supports default values for unset variables (\\({VAR-default}</code>) and for unset or empty variables (<code>\\){VAR:-default}). PreventDisplayOff(string) Asks the operating system not to turn off the display. [MustDisposeResource] public static IDisposable? PreventDisplayOff(string reason) Parameters reason string Why the display should not be turned off. Returns IDisposable Call System.IDisposable.Dispose() to restore the original state. PreventIdle(string) Asks the operating system not to enter idle mode. Useful to avoid standby or hibernation during a long-running task. [MustDisposeResource] public static IDisposable? PreventIdle(string reason) Parameters reason string Why the system should not enter idle mode. Returns IDisposable Call System.IDisposable.Dispose() to restore the original state."
  },
  "api/NanoByte.Common.Native.ProcessLauncher.html": {
    "href": "api/NanoByte.Common.Native.ProcessLauncher.html",
    "title": "Class ProcessLauncher | NanoByte.Common",
    "summary": "Class ProcessLauncher Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Runs a child process. public class ProcessLauncher : IProcessLauncher Inheritance object ProcessLauncher Implements IProcessLauncher Extension Methods ProcessLauncherExtensions.RunAndCapture(IProcessLauncher, ArraySegment<byte>, params string[]) ProcessLauncherExtensions.RunAndCapture(IProcessLauncher, params string[]) BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ProcessLauncher(ProcessStartInfo) Creates a new process launcher. public ProcessLauncher(ProcessStartInfo startInfo) Parameters startInfo ProcessStartInfo Extracts System.Diagnostics.ProcessStartInfo.FileName and System.Diagnostics.ProcessStartInfo.Arguments. Other options are ignored. ProcessLauncher(string, string?) Runs a child process. public ProcessLauncher(string fileName, string? arguments = null) Parameters fileName string The file name of the executable to run. arguments string The default arguments to always pass to the executable. Fields Arguments protected readonly string? Arguments Field Value string FileName protected readonly string FileName Field Value string Methods GetStartInfo(params string[]) Creates the System.Diagnostics.ProcessStartInfo used to launch the process. public virtual ProcessStartInfo GetStartInfo(params string[] arguments) Parameters arguments string[] The arguments to pass to the process at startup. Returns ProcessStartInfo HandleExitCode(Process, string?) Hook for handling exit codes. protected virtual void HandleExitCode(Process process, string? message = null) Parameters process Process The process that has exited. message string An optional error message. Exceptions ExitCodeException System.Diagnostics.Process.ExitCode had a non-zero value. OnStderr(string, StreamWriter) Hook for handling stderr messages from the process. protected virtual void OnStderr(string line, StreamWriter stdin) Parameters line string The line written to stderr. stdin StreamWriter The stream writer providing access to stdin. Run(params string[]) Runs the process and waits for it to exit. public virtual void Run(params string[] arguments) Parameters arguments string[] Command-line arguments to launch the process with. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation. ExitCodeException The process exited with a non-zero System.Diagnostics.Process.ExitCode. RunAndCapture(Action<StreamWriter>?, params string[]) Runs the process, captures its stdout and stderr output and waits for it to exit. public virtual string RunAndCapture(Action<StreamWriter>? onStartup, params string[] arguments) Parameters onStartup Action<StreamWriter> A callback for writing to the process' stdin right after startup. arguments string[] Command-line arguments to launch the process with. Returns string The process' complete stdout output. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation. ExitCodeException The process exited with a non-zero System.Diagnostics.Process.ExitCode. Start(params string[]) Starts the process and runs it in parallel with this one. public Process Start(params string[] arguments) Parameters arguments string[] Command-line arguments to launch the process with. Returns Process The newly launched process. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation."
  },
  "api/NanoByte.Common.Native.ProcessLauncherExtensions.html": {
    "href": "api/NanoByte.Common.Native.ProcessLauncherExtensions.html",
    "title": "Class ProcessLauncherExtensions | NanoByte.Common",
    "summary": "Class ProcessLauncherExtensions Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Extension methods for IProcessLauncher. public static class ProcessLauncherExtensions Inheritance object ProcessLauncherExtensions Methods RunAndCapture(IProcessLauncher, ArraySegment<byte>, params string[]) Runs the sub process, captures its stdout and stderr output and waits for it to exit. public static string RunAndCapture(this IProcessLauncher processLauncher, ArraySegment<byte> stdinData, params string[] arguments) Parameters processLauncher IProcessLauncher The sub process. stdinData ArraySegment<byte> Data to the process' stdin right after startup. arguments string[] Command-line arguments to launch the process with. Returns string The process' complete stdout output. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation. ExitCodeException The process exited with a non-zero System.Diagnostics.Process.ExitCode. RunAndCapture(IProcessLauncher, params string[]) Runs the sub process, captures its stdout and stderr output and waits for it to exit. public static string RunAndCapture(this IProcessLauncher processLauncher, params string[] arguments) Parameters processLauncher IProcessLauncher The sub process. arguments string[] Command-line arguments to launch the process with. Returns string The process' complete stdout output. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation. ExitCodeException The process exited with a non-zero System.Diagnostics.Process.ExitCode."
  },
  "api/NanoByte.Common.Native.RegistryUtils.html": {
    "href": "api/NanoByte.Common.Native.RegistryUtils.html",
    "title": "Class RegistryUtils | NanoByte.Common",
    "summary": "Class RegistryUtils Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides utility and extension methods for Registry access. public static class RegistryUtils Inheritance object RegistryUtils Methods CreateSubKeyChecked(RegistryKey, string) Creates a registry key with retries and mapping System.Security.SecurityExceptions to System.UnauthorizedAccessExceptions. [MustDisposeResource] public static RegistryKey CreateSubKeyChecked(this RegistryKey key, string subkeyName) Parameters key RegistryKey The key to create a subkey in. subkeyName string The name of the subkey to create. Returns RegistryKey The newly created subkey. Exceptions IOException Failed to create the key. UnauthorizedAccessException Write access to the key is not permitted. DeleteSoftwareValue(string, string, bool) Deletes a value from one of the SOFTWARE keys in the registry. public static void DeleteSoftwareValue(string subkeyName, string valueName, bool machineWide) Parameters subkeyName string The path of the key relative to the SOFTWARE key. valueName string The name of the value to delete. machineWide bool true to delete from HKLM/SOFTWARE (and HKLM/SOFTWARE/Wow6432Node if on 64-bit Windows); false to delete from HCKU/SOFTWARE. Remarks Does not throw an exception for missing keys or values. GetDword(string, string?, int) Reads a DWORD value from the registry. [Pure] public static int GetDword(string keyName, string? valueName, int defaultValue = 0) Parameters keyName string The full path of the key to read from. valueName string The name of the value to read. defaultValue int The default value to return if the key or value does not exist. Returns int Exceptions UnauthorizedAccessException Read access to the key is not permitted. GetLastWriteTime(RegistryKey) Returns the last write time of the registry key. public static DateTime GetLastWriteTime(this RegistryKey key) Parameters key RegistryKey The key to get the last write time for. Returns DateTime Exceptions IOException The key does not exist. UnauthorizedAccessException Read access to the key is not permitted. GetSoftwareString(string, string?, bool) Reads a string value from one of the SOFTWARE keys in the registry. [Pure] public static string? GetSoftwareString(string subkeyName, string? valueName, bool machineWide) Parameters subkeyName string The path of the key relative to the SOFTWARE key. valueName string The name of the value to read. machineWide bool true to read from HKLM/SOFTWARE (and HKLM/SOFTWARE/Wow6432Node if on 64-bit Windows); false to read from HCKU/SOFTWARE. Returns string GetString(string, string?, string?) Reads a string value from the registry. [Pure] public static string? GetString(string keyName, string? valueName, string? defaultValue = null) Parameters keyName string The full path of the key to read from. valueName string The name of the value to read. defaultValue string The default value to return if the key or value does not exist. Returns string Exceptions UnauthorizedAccessException Read access to the key is not permitted. GetSubKeyNames(RegistryKey, string) Retrieves the names of all subkeys within a specific subkey of a registry root. [Pure] public static string[] GetSubKeyNames(RegistryKey key, string subkeyName) Parameters key RegistryKey The root key to look within. subkeyName string The path of the subkey below key. Returns string[] A list of key names; an empty array if the key does not exist. GetValueNames(RegistryKey, string) Retrieves the names of all values within a specific subkey of a registry root. [Pure] public static string[] GetValueNames(this RegistryKey key, string subkeyName) Parameters key RegistryKey The root key to look within. subkeyName string The path of the subkey below key. Returns string[] A list of value names; an empty array if the key does not exist. OpenHklmKey(string, out bool) Opens a HKEY_LOCAL_MACHINE key in the registry for reading, first trying to find the 64-bit version of it, then falling back to the 32-bit version. [MustDisposeResource] public static RegistryKey OpenHklmKey(string subkeyName, out bool x64) Parameters subkeyName string The path to the key below HKEY_LOCAL_MACHINE. x64 bool Indicates whether a 64-bit key was opened. Returns RegistryKey The opened registry key. Exceptions IOException The key does not exist. UnauthorizedAccessException Read access to the key is not permitted. OpenSubKeyChecked(RegistryKey, string, bool) Opens a registry key with retries and mapping System.Security.SecurityExceptions to System.UnauthorizedAccessExceptions. [MustDisposeResource] public static RegistryKey OpenSubKeyChecked(this RegistryKey key, string subkeyName, bool writable = false) Parameters key RegistryKey The key to open a subkey in. subkeyName string The name of the subkey to open. writable bool true for write-access to the key. Returns RegistryKey The opened subkey. Exceptions IOException The key does not exist. UnauthorizedAccessException The requested access to the key is not permitted. SetDword(string, string?, int) Sets a DWORD value in the registry. public static void SetDword(string keyName, string? valueName, int value) Parameters keyName string The full path of the key to write to. valueName string The name of the value to write. value int The value to write. Exceptions UnauthorizedAccessException Write access to the key is not permitted. SetSoftwareString(string, string?, string, bool) Sets a string value in one or more of the SOFTWARE keys in the registry. public static void SetSoftwareString(string subkeyName, string? valueName, string value, bool machineWide = false) Parameters subkeyName string The path of the key relative to the SOFTWARE key. valueName string The name of the value to write. value string The value to write. machineWide bool true to write to HKLM/SOFTWARE (and HKLM/SOFTWARE/Wow6432Node if on 64-bit Windows); false to write to HCKU/SOFTWARE. Exceptions UnauthorizedAccessException Write access to the key is not permitted. SetString(string, string?, string) Sets a string value in the registry. public static void SetString(string keyName, string? valueName, string value) Parameters keyName string The full path of the key to write to. valueName string The name of the value to write. value string The value to write. Exceptions UnauthorizedAccessException Write access to the key is not permitted. TryDeleteSubKey(RegistryKey, string) Recursively deletes a registry key. Does not throw exceptions. public static bool TryDeleteSubKey(this RegistryKey key, string subkeyName) Parameters key RegistryKey The key to containing the subkey to delete. subkeyName string The name of the subkey to delete. Returns bool true if the key was deleted or didn't exist; false if the deletion failed. TryOpenSubKey(RegistryKey, string, bool) Trys to open a registry key with retries and mapping System.Security.SecurityExceptions to System.UnauthorizedAccessExceptions. [MustDisposeResource] public static RegistryKey? TryOpenSubKey(this RegistryKey key, string subkeyName, bool writable = false) Parameters key RegistryKey The key to open a subkey in. subkeyName string The name of the subkey to open. writable bool true for write-access to the key. Returns RegistryKey The opened subkey; null if it does not exist. Exceptions UnauthorizedAccessException The requested access to the key is not permitted."
  },
  "api/NanoByte.Common.Native.UnixUtils.html": {
    "href": "api/NanoByte.Common.Native.UnixUtils.html",
    "title": "Class UnixUtils | NanoByte.Common",
    "summary": "Class UnixUtils Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides helper methods for Unix-specific features of the Mono library. public static class UnixUtils Inheritance object UnixUtils Remarks Make sure to check IsUnix before calling any methods in this class to avoid exceptions. Properties CpuType The CPU type as reported by the \"uname\" system call (after applying some normalization). public static string CpuType { get; } Property Value string HasGui true if there is an X Server running or the current operating system is MacOS X. public static bool HasGui { get; } Property Value bool IsFreeBSD true if the current operating system is FreeBSD. public static bool IsFreeBSD { get; } Property Value bool IsLinux true if the current operating system is Linux. public static bool IsLinux { get; } Property Value bool IsMacOSX true if the current operating system is MacOS X. public static bool IsMacOSX { get; } Property Value bool IsUnix true if the current operating system is a Unixoid system (e.g. Linux or MacOS X). public static bool IsUnix { get; } Property Value bool OSName The operating system name as reported by the \"uname\" system call. public static string OSName { get; } Property Value string Methods CreateHardlink(string, string) Creates a new Unix hard link between two files. public static void CreateHardlink(string sourcePath, string targetPath) Parameters sourcePath string The path of the link to create. targetPath string The absolute path of the existing file to point to. Exceptions InvalidOperationException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). CreateSymlink(string, string) Creates a new Unix symbolic link to a file or directory. public static void CreateSymlink(string sourcePath, string targetPath) Parameters sourcePath string The path of the link to create. targetPath string The path of the existing file or directory to point to (relative to sourcePath). Exceptions InvalidOperationException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). GetFileSystem(string) Determines the file system type a file or directory is stored on. public static string? GetFileSystem(string path) Parameters path string The path of the file. Returns string The name of the file system in fstab format (e.g. ext3 or ntfs-3g); null if unable to determine. Remarks Only works on Linux, not on other Unixes (e.g. MacOS X). Exceptions IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). GetInode(string) Returns the Inode ID of a file. public static long GetInode(string path) Parameters path string The path of the file. Returns long Exceptions InvalidOperationException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). GetXattr(string, string) Gets an extended file attribute. public static byte[]? GetXattr(string path, string name) Parameters path string The path of the file to read the attribute from. name string The name of the attribute to read. Returns byte[] The contents of the attribute as a byte array; null if there was a problem reading the file. IsExecutable(string) Checks whether a file is marked as Unix-executable. public static bool IsExecutable(string path) Parameters path string The file to check for executable rights. Returns bool true if path points to an executable; false otherwise. Remarks Will return false for non-existing files. Exceptions InvalidOperationException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IsRegularFile(string) Checks whether a file is a regular file (i.e. not a device file, symbolic link, etc.). public static bool IsRegularFile(string path) Parameters path string Returns bool true if path points to a regular file; false otherwise. Remarks Will return false for non-existing files. Exceptions InvalidOperationException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IsSymlink(string) Checks whether a file is a Unix symbolic link. public static bool IsSymlink(string path) Parameters path string The path of the file to check. Returns bool true if path points to a symbolic link; false otherwise. Remarks Will return false for non-existing files. Exceptions InvalidOperationException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IsSymlink(string, out string) Checks whether a file is a Unix symbolic link. public static bool IsSymlink(string path, out string target) Parameters path string The path of the file to check. target string Returns the target the symbolic link points to if it exists. Returns bool true if path points to a symbolic link; false otherwise. Exceptions InvalidOperationException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). MakeReadOnly(string) Removes write permissions for everyone on a filesystem object (file or directory). public static void MakeReadOnly(string path) Parameters path string The filesystem object (file or directory) to make read-only. Exceptions InvalidOperationException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). MakeWritable(string) Sets write permissions for the owner on a filesystem object (file or directory). public static void MakeWritable(string path) Parameters path string The filesystem object (file or directory) to make writable by the owner. Exceptions InvalidOperationException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). Rename(string, string) Renames a file. Atomically replaces the destination if present. public static void Rename(string source, string destination) Parameters source string The path of the file to rename. destination string The new path of the file. Must reside on the same file system as source. Exceptions IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). SetExecutable(string, bool) Marks a file as Unix-executable or not Unix-executable. public static void SetExecutable(string path, bool executable) Parameters path string The file to mark as executable or not executable. executable bool true to mark the file as executable, true to mark it as not executable. Exceptions InvalidOperationException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights). SetXattr(string, string, byte[]) Sets an extended file attribute. public static void SetXattr(string path, string name, byte[] data) Parameters path string The path of the file to set the attribute for. name string The name of the attribute to set. data byte[] The data to write to the attribute. Exceptions IOException The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights)."
  },
  "api/NanoByte.Common.Native.WinFormsUtils.html": {
    "href": "api/NanoByte.Common.Native.WinFormsUtils.html",
    "title": "Class WinFormsUtils | NanoByte.Common",
    "summary": "Class WinFormsUtils Namespace NanoByte.Common.Native Assembly NanoByte.Common.WinForms.dll Provides helper methods and API calls specific to the System.Windows.Forms UI toolkit. public static class WinFormsUtils Inheritance object WinFormsUtils Properties AppIdle Determines whether this application is currently idle. public static bool AppIdle { get; } Property Value bool true if idle, false if handling window events. Remarks Will always return true on non-Windows OSes. CaretBlinkTime Text-box caret blink time in seconds. public static float CaretBlinkTime { get; } Property Value float Methods AddShieldIcon(Button) Adds a UAC shield icon to a button. Does nothing if not running Windows Vista or newer. public static void AddShieldIcon(this Button button) Parameters button Button Remarks This is purely cosmetic. UAC elevation is a separate concern. CenterOnParent(Form) Centers a window on its parent/owner. Call this from the System.Windows.Forms.Form.Load event handler. public static void CenterOnParent(this Form form) Parameters form Form Remarks This method is an alternative to System.Windows.Forms.FormStartPosition.CenterParent which only works with System.Windows.Forms.Form.ShowDialog(System.Windows.Forms.IWin32Window) and not System.Windows.Forms.Form.Show(System.Windows.Forms.IWin32Window). EnableWindowDrag(Control) Configures a control to move the entire window when clicked and dragged. public static void EnableWindowDrag(this Control control) Parameters control Control HandleTouchMessage(ref Message, object?, EventHandler<TouchEventArgs>?, EventHandler<TouchEventArgs>?, EventHandler<TouchEventArgs>?) Handles touch-related System.Windows.Forms.Control.WndProc(ref System.Windows.Forms.Message) System.Windows.Forms.Messages. public static void HandleTouchMessage(ref Message m, object? sender, EventHandler<TouchEventArgs>? onTouchDown, EventHandler<TouchEventArgs>? onTouchMove, EventHandler<TouchEventArgs>? onTouchUp) Parameters m Message The message to handle. sender object The object to send possible events from. onTouchDown EventHandler<TouchEventArgs> The event handler to call for touch down events; can be null. onTouchMove EventHandler<TouchEventArgs> The event handler to call for touch move events; can be null. onTouchUp EventHandler<TouchEventArgs> The event handler to call for touch up events; can be null. IsKeyDown(Keys) Determines whether key is pressed right now. public static bool IsKeyDown(Keys key) Parameters key Keys Returns bool Remarks Will always return false on non-Windows OSes. RegisterTouchWindow(Control) Registers a control as a receiver for touch events. public static void RegisterTouchWindow(Control control) Parameters control Control The control to register. ReleaseCapture() Releases the mouse cursor after it was locked by SetCapture(IntPtr). public static bool ReleaseCapture() Returns bool true if successful; false otherwise. Remarks Will always return false on non-Windows OSes. SetCapture(IntPtr) Prevents the mouse cursor from leaving a specific window. public static IntPtr SetCapture(IntPtr handle) Parameters handle IntPtr The handle to the window to lock the mouse cursor into. Returns IntPtr A handle to the window that had previously captured the mouse. Remarks Will do nothing on non-Windows OSes. SetForegroundWindow(Form) Forces a window to the foreground or flashes the taskbar if another process has the focus. public static void SetForegroundWindow(this Form form) Parameters form Form"
  },
  "api/NanoByte.Common.Native.WindowMessage.html": {
    "href": "api/NanoByte.Common.Native.WindowMessage.html",
    "title": "Enum WindowMessage | NanoByte.Common",
    "summary": "Enum WindowMessage Namespace NanoByte.Common.Native Assembly NanoByte.Common.WinForms.dll Values for System.Windows.Forms.Message.Msg. public enum WindowMessage Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) EnumExtensions.GetEnumAttribute<TAttribute>(Enum) EnumExtensions.HasFlag(Enum, Enum) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields ActivateApplication = 28 Character = 258 Close = 16 Destroy = 2 Empty = 0 EnterMenuLoop = 529 EnterSizeMove = 561 ExitMenuLoop = 530 ExitSizeMove = 562 GetMinMax = 36 KeyDown = 256 KeyUp = 257 LeftButtonDoubleClick = 515 LeftButtonDown = 513 LeftButtonUp = 514 MiddleButtonDoubleClick = 521 MiddleButtonDown = 519 MiddleButtonUp = 520 MouseFirst = 513 MouseLast = 525 MouseMove = 512 MouseWheel = 522 NonClientHitTest = 132 Paint = 15 PowerBroadcast = 536 Quit = 18 RightButtonDoubleClick = 518 RightButtonDown = 516 RightButtonUp = 517 SetCursor = 32 Size = 5 SystemCharacter = 262 SystemCommand = 274 SystemKeyDown = 260 SystemKeyUp = 261 XButtonDoubleClick = 525 XButtonDown = 523 XButtonUp = 524"
  },
  "api/NanoByte.Common.Native.WindowsCredentials.html": {
    "href": "api/NanoByte.Common.Native.WindowsCredentials.html",
    "title": "Class WindowsCredentials | NanoByte.Common",
    "summary": "Class WindowsCredentials Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides an interface to the Windows Credentials API. Supported on Windows XP or newer. public static class WindowsCredentials Inheritance object WindowsCredentials Methods IsCredentialStored(string) Determines whether there are any credentials stored for a specific target. public static bool IsCredentialStored(string target) Parameters target string A string uniquely identifying the target the credentials are intended for. Returns bool Exceptions PlatformNotSupportedException The current platform does not support the Credentials API. Needs Windows XP or newer. PromptCli(string, WindowsCredentialsFlags) Prompts the user for credentials using a command-line interface. public static NetworkCredential PromptCli(string target, WindowsCredentialsFlags flags) Parameters target string A string uniquely identifying the target the credentials are intended for. flags WindowsCredentialsFlags Flags for configuring the prompt. Returns NetworkCredential Exceptions PlatformNotSupportedException The current platform does not support the Credentials API. Needs Windows XP or newer. PromptGui(string, WindowsCredentialsFlags, string?, string?, IntPtr) Prompts the user for credentials using a GUI dialog. public static NetworkCredential PromptGui(string target, WindowsCredentialsFlags flags, string? title = null, string? message = null, IntPtr owner = default) Parameters target string A string uniquely identifying the target the credentials are intended for. flags WindowsCredentialsFlags Flags for configuring the prompt. title string The title of the dialog. message string The message to display in the dialog. owner IntPtr The parent window for the dialog; can be null. Returns NetworkCredential Exceptions PlatformNotSupportedException The current platform does not support the Credentials API. Needs Windows XP or newer."
  },
  "api/NanoByte.Common.Native.WindowsCredentialsFlags.html": {
    "href": "api/NanoByte.Common.Native.WindowsCredentialsFlags.html",
    "title": "Enum WindowsCredentialsFlags | NanoByte.Common",
    "summary": "Enum WindowsCredentialsFlags Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll [Flags] public enum WindowsCredentialsFlags Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) EnumExtensions.GetEnumAttribute<TAttribute>(Enum) EnumExtensions.HasFlag(Enum, Enum) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields AlwaysShowUI = 128 CompleteUsername = 2048 DoNotPersist = 2 ExcludeCertificates = 8 ExpectConfirmation = 131072 GenericCredentials = 262144 IncorrectPassword = 1 KeepUsername = 1048576 None = 0 PasswordOnlyOK = 512 Persist = 4096 RequestAdministrator = 4 RequireCertificate = 16 RequireSmartcard = 256 ServerCredential = 16384 ShowSaveCheckBox = 64 UsernameTargetCredentials = 524288 ValidateUsername = 1024"
  },
  "api/NanoByte.Common.Native.WindowsMutex.html": {
    "href": "api/NanoByte.Common.Native.WindowsMutex.html",
    "title": "Class WindowsMutex | NanoByte.Common",
    "summary": "Class WindowsMutex Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides Windows-specific API calls for cross-process Mutexes. public static class WindowsMutex Inheritance object WindowsMutex Methods Close(IntPtr) Closes an existing mutex handle. The mutex is destroyed if this is the last handle. public static void Close(IntPtr handle) Parameters handle IntPtr The mutex handle to be closed. Exceptions PlatformNotSupportedException This method is called on a platform other than Windows. Create(string, out bool) Creates a new (or opens an existing) mutex. public static IntPtr Create(string name, out bool alreadyExists) Parameters name string The name to be used as a mutex identifier. alreadyExists bool true if an existing mutex was opened; false if a new one was created. Returns IntPtr The handle for the mutex. Can be used in Close(IntPtr). Will automatically be released once the process terminates. Exceptions Win32Exception The native subsystem reported a problem. PlatformNotSupportedException This method is called on a platform other than Windows. Probe(string) Checks whether a specific mutex exists without opening a lasting handle. public static bool Probe(string name) Parameters name string The name to be used as a mutex identifier. Returns bool true if an existing mutex was found; false if none existed. Exceptions Win32Exception The native subsystem reported a problem. PlatformNotSupportedException This method is called on a platform other than Windows."
  },
  "api/NanoByte.Common.Native.WindowsRestartManager.html": {
    "href": "api/NanoByte.Common.Native.WindowsRestartManager.html",
    "title": "Class WindowsRestartManager | NanoByte.Common",
    "summary": "Class WindowsRestartManager Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides an interface to the Windows Restart Manager. Supported on Windows Vista or newer. public sealed class WindowsRestartManager : MarshalByRefObject Inheritance object MarshalByRefObject WindowsRestartManager Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks See https://msdn.microsoft.com/en-us/library/windows/desktop/cc948910 Constructors WindowsRestartManager() Starts a new Restart Manager session. public WindowsRestartManager() Exceptions Win32Exception The Restart Manager API returned an error. PlatformNotSupportedException The current platform does not support the Restart Manager. Needs Windows Vista or newer. DllNotFoundException The Restart Manager API is missing. Methods Dispose() Ends the Restart Manager session. public void Dispose() ~WindowsRestartManager() protected ~WindowsRestartManager() ListApps(CancellationToken) Gets a list of all applications that are currently using resources that have been registered with RegisterResources(params string[]). public string[] ListApps(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to signal cancellation requests. Returns string[] Exceptions IOException The Restart Manager could not access the registry. TimeoutException The Restart Manager could not obtain a Registry write mutex in the allotted time. A system restart is recommended. Win32Exception The Restart Manager API returned an error. RegisterResources(params string[]) Registers resources to the Restart Manager session. The Restart Manager uses the list of resources registered with the session to determine which applications and services must be shut down and restarted. public void RegisterResources(params string[] files) Parameters files string[] An array of full filename paths. Exceptions Win32Exception The Restart Manager API returned an error. RestartApps(ITaskHandler) Restarts applications that have been shut down by ShutdownApps(ITaskHandler) and that have been registered to be restarted. public void RestartApps(ITaskHandler handler) Parameters handler ITaskHandler A callback object used to report progress to the user and allow cancellation. Exceptions IOException One or more applications could not be automatically restarted. Win32Exception The Restart Manager API returned an error. ShutdownApps(ITaskHandler) Initiates the shutdown of applications that are currently using resources that have been registered with RegisterResources(params string[]). public void ShutdownApps(ITaskHandler handler) Parameters handler ITaskHandler A callback object used to report progress to the user and allow cancellation. Exceptions UnauthorizedAccessException One or more applications could not be shut down. Trying again as administrator may help. IOException One or more applications could not be shut down. A system reboot may be required. Win32Exception The Restart Manager API returned an error."
  },
  "api/NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.html": {
    "href": "api/NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.html",
    "title": "Enum WindowsTaskbar.ProgressBarState | NanoByte.Common",
    "summary": "Enum WindowsTaskbar.ProgressBarState Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Represents the thumbnail progress bar state. public enum WindowsTaskbar.ProgressBarState Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) EnumExtensions.GetEnumAttribute<TAttribute>(Enum) EnumExtensions.HasFlag(Enum, Enum) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields Error = 4 An error occurred (red). Indeterminate = 1 The progress is indeterminate (marquee). NoProgress = 0 No progress is displayed. Normal = 2 Normal progress is displayed. Paused = 8 The operation is paused (yellow)."
  },
  "api/NanoByte.Common.Native.WindowsTaskbar.ShellLink.html": {
    "href": "api/NanoByte.Common.Native.WindowsTaskbar.ShellLink.html",
    "title": "Struct WindowsTaskbar.ShellLink | NanoByte.Common",
    "summary": "Struct WindowsTaskbar.ShellLink Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Represents a shell link targeting a file. public struct WindowsTaskbar.ShellLink Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ShellLink(string, string, string?) Creates a new shell link structure. public ShellLink(string title, string path, string? arguments = null) Parameters title string The title/name of the task link. path string The target path the link shall point to and to get the icon from. arguments string Additional arguments for title; can be null. ShellLink(string, string, string, string, int) Creates a new shell link structure public ShellLink(string title, string path, string arguments, string iconPath, int iconIndex) Parameters title string The title/name of the task link. path string The target path the link shall point to. arguments string Additional arguments for title; can be null. iconPath string The path of the icon for the link. iconIndex int The resource index within the file specified by iconPath. Fields Arguments Additional arguments for Title; can be null. public readonly string? Arguments Field Value string IconIndex The resource index within the file specified by IconPath. public readonly int IconIndex Field Value int IconPath The path of the icon for the link. public readonly string IconPath Field Value string Path The target path the link shall point to. public readonly string Path Field Value string Title The title/name of the task link. public readonly string Title Field Value string"
  },
  "api/NanoByte.Common.Native.WindowsTaskbar.html": {
    "href": "api/NanoByte.Common.Native.WindowsTaskbar.html",
    "title": "Class WindowsTaskbar | NanoByte.Common",
    "summary": "Class WindowsTaskbar Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides helper methods and API calls specific to the Windows 7 or newer taskbar. public static class WindowsTaskbar Inheritance object WindowsTaskbar Methods AddTaskLinks(string, IEnumerable<ShellLink>) Adds user-task links to the taskbar jumplist. Any existing task links are removed. public static void AddTaskLinks(string appID, IEnumerable<WindowsTaskbar.ShellLink> links) Parameters appID string The application ID of the jumplist to add the task to. links IEnumerable<WindowsTaskbar.ShellLink> The links to add to the jumplist. PreventPinning(IntPtr) Prevents a specific window from being pinned to the taskbar. public static void PreventPinning(IntPtr hwnd) Parameters hwnd IntPtr A handle to the window to prevent from being pinned. SetProgressState(IntPtr, ProgressBarState) Sets the state of the taskbar progress indicator. public static void SetProgressState(IntPtr handle, WindowsTaskbar.ProgressBarState state) Parameters handle IntPtr The handle of the window whose taskbar button contains the progress indicator. state WindowsTaskbar.ProgressBarState The state of the progress indicator. SetProgressValue(IntPtr, int, int) Sets the value of the taskbar progress indicator. public static void SetProgressValue(IntPtr handle, int currentValue, int maximumValue) Parameters handle IntPtr The handle of the window whose taskbar button contains the progress indicator. currentValue int The current value of the progress indicator. maximumValue int The value currentValue will have when the operation is complete. SetWindowAppID(IntPtr, string, string?, string?, string?) Sets a specific window's explicit application user model ID. public static void SetWindowAppID(IntPtr hwnd, string appID, string? relaunchCommand = null, string? relaunchIcon = null, string? relaunchName = null) Parameters hwnd IntPtr A handle to the window to set the ID for. appID string The application ID to set. relaunchCommand string The command to use for relaunching this specific window if it was pinned to the taskbar; can be null. relaunchIcon string The icon to use for pinning this specific window to the taskbar (written as Path,ResourceIndex); can be null. relaunchName string The user-friendly name to associate with relaunchCommand; can be null. Remarks The application ID is used to group related windows in the taskbar."
  },
  "api/NanoByte.Common.Native.WindowsUtils.html": {
    "href": "api/NanoByte.Common.Native.WindowsUtils.html",
    "title": "Class WindowsUtils | NanoByte.Common",
    "summary": "Class WindowsUtils Namespace NanoByte.Common.Native Assembly NanoByte.Common.dll Provides helper methods and API calls specific to the Windows platform. public static class WindowsUtils Inheritance object WindowsUtils Fields NetFx20 The directory version number for .NET Framework 2.0. This release includes the C# 2.0 compiler and the CLR 2.0 runtime. public const string NetFx20 = \"v2.0.50727\" Field Value string NetFx30 The directory version number for .NET Framework 3.0. public const string NetFx30 = \"v3.0\" Field Value string NetFx35 The directory version number for .NET Framework 3.5. This release includes the C# 3.0 compiler. public const string NetFx35 = \"v3.5\" Field Value string NetFx40 The directory version number for .NET Framework 4.x. This release includes a C# 4.0+ compiler and the CLR 4.0 runtime. public const string NetFx40 = \"v4.0.30319\" Field Value string Properties AbsoluteTime A time index in seconds that continuously increases. public static double AbsoluteTime { get; } Property Value double Remarks Depending on the operating system this may be the time of the system clock or the time since the system booted. CurrentProcessPath Determines the path of the executable the current process was launched from. public static string CurrentProcessPath { get; } Property Value string HasUac true if the current operating system supports UAC and it is enabled; false otherwise. public static bool HasUac { get; } Property Value bool IsAdministrator Indicates whether the current user is an administrator. Always returns true on non-Windows NT systems. public static bool IsAdministrator { get; } Property Value bool IsGuiSession Indicates whether the current process is running in a GUI session (rather than, e.g., as a service or in an SSH session). public static bool IsGuiSession { get; } Property Value bool IsWindows true if the current operating system is Windows (9x- or NT-based); false otherwise. public static bool IsWindows { get; } Property Value bool IsWindows10 true if the current operating system is Windows 10 or newer; false otherwise. public static bool IsWindows10 { get; } Property Value bool IsWindows102004 true if the current operating system is Windows 10, Version 2004 or newer; false otherwise. public static bool IsWindows102004 { get; } Property Value bool IsWindows10Redstone true if the current operating system is Windows 10 Anniversary Update (Redstone 1) or newer; false otherwise. public static bool IsWindows10Redstone { get; } Property Value bool IsWindows11 true if the current operating system is Windows 11 or newer; false otherwise. public static bool IsWindows11 { get; } Property Value bool IsWindows7 true if the current operating system is Windows 7 or newer; false otherwise. public static bool IsWindows7 { get; } Property Value bool IsWindows8 true if the current operating system is Windows 8 or newer; false otherwise. public static bool IsWindows8 { get; } Property Value bool IsWindowsNT true if the current operating system is a modern Windows version (NT-based); false otherwise. public static bool IsWindowsNT { get; } Property Value bool IsWindowsVista true if the current operating system is Windows Vista or newer; false otherwise. public static bool IsWindowsVista { get; } Property Value bool IsWindowsXP true if the current operating system is Windows XP or newer; false otherwise. public static bool IsWindowsXP { get; } Property Value bool Methods AttachConsole() Tries to attach to a command-line console owned by the parent process. public static bool AttachConsole() Returns bool true if the console was successfully attached; false if the parent process did not own a console. BroadcastMessage(int) Sends a message of a specific type to all windows in the current session. public static void BroadcastMessage(int messageID) Parameters messageID int A unique ID number used to identify the message type session-wide. CreateHardlink(string, string) Creates a hard link between two files. public static void CreateHardlink(string sourcePath, string targetPath) Parameters sourcePath string The path of the link to create. targetPath string The absolute path of the existing file to point to. Remarks Only available on Windows 2000 or newer. Exceptions IOException There was an IO problem creating the hard link. UnauthorizedAccessException You have insufficient rights to create the hard link. Win32Exception The hard link creation failed. PlatformNotSupportedException This method is called on a platform other than Windows NT. CreateSymlink(string, string) Creates a symbolic link for a file or directory. public static void CreateSymlink(string sourcePath, string targetPath) Parameters sourcePath string The path of the link to create. targetPath string The path of the existing file or directory to point to (relative to sourcePath). Exceptions IOException There was an IO problem creating the symlink. UnauthorizedAccessException You have insufficient rights to create the symbolic link. Win32Exception The symbolic link creation failed. PlatformNotSupportedException This method is called on a platform other than Windows NT 6.0 (Vista) or newer. GetFileID(string) Returns the file ID of a file. public static long GetFileID(string path) Parameters path string The path of the file. Returns long Exceptions IOException There was an IO problem checking the file. UnauthorizedAccessException You have insufficient rights to check the files. Win32Exception Checking the file failed. PlatformNotSupportedException This method is called on a platform other than Windows NT. GetFolderPath(SpecialFolder) Gets the path to the specified system folder. Uses well-known environment variables and hard-coded paths as fallbacks when necessary. public static string GetFolderPath(Environment.SpecialFolder folder) Parameters folder Environment.SpecialFolder Returns string Exceptions IOException The folder could not be resolved to a path. GetNetFxDirectory(string) Returns the .NET Framework root directory for a specific version of the .NET Framework. Does not verify the directory actually exists! public static string GetNetFxDirectory(string version) Parameters version string The full .NET version number including the leading \"v\". Use predefined constants when possible. Returns string The path to the .NET Framework root directory. Remarks Returns 64-bit directories if on 64-bit Windows is true. IsSymlink(string) Checks whether a file is an NTFS symbolic link. public static bool IsSymlink(string path) Parameters path string The path of the file to check. Returns bool true if path points to a symbolic link; false otherwise. Remarks Will return false for non-existing files. Exceptions IOException There was an IO problem getting link information. UnauthorizedAccessException You have insufficient rights to get link information. Win32Exception Getting link information failed. PlatformNotSupportedException This method is called on a platform other than Windows NT 6.0 (Vista) or newer. IsSymlink(string, out string) Checks whether a file is an NTFS symbolic link. public static bool IsSymlink(string path, out string target) Parameters path string The path of the file to check. target string Returns the target the symbolic link points to if it exists. Returns bool true if path points to a symbolic link; false otherwise. Exceptions IOException There was an IO problem getting link information. UnauthorizedAccessException You have insufficient rights to get link information. Win32Exception Getting link information failed. PlatformNotSupportedException This method is called on a platform other than Windows NT 6.0 (Vista) or newer. MoveFileOnReboot(string, string?) Moves a file on the next reboot of the OS. Replaces existing files. public static void MoveFileOnReboot(string sourcePath, string? destinationPath) Parameters sourcePath string The source path to move the file from. destinationPath string The destination path to move the file to. null to delete the file instead of moving it. Remarks Useful for replacing in-use files. NotifyAssocChanged() Informs the Windows shell that changes were made to the file association data in the registry. public static void NotifyAssocChanged() Remarks This should be called immediately after the changes in order to trigger a refresh of the Explorer UI. NotifyEnvironmentChanged() Informs all GUI applications that changes where made to the environment variables (e.g. PATH) and that they should re-pull them. public static void NotifyEnvironmentChanged() ReadAllBytes(string) Reads the entire contents of a file using the Win32 API. public static byte[]? ReadAllBytes(string path) Parameters path string The path of the file to read. Returns byte[] The contents of the file as a byte array; null if there was a problem reading the file. Remarks This method works like System.IO.File.ReadAllBytes(string), but bypasses .NET's file path validation logic. Exceptions PlatformNotSupportedException This method is called on a platform other than Windows. RegisterApplicationRestart(string) Registers the current application for automatic restart after updates or crashes. public static void RegisterApplicationRestart(string arguments) Parameters arguments string The command-line arguments to pass to the application on restart. Must not be empty! RegisterWindowMessage(string) Registers a new message type that can be sent to windows. public static int RegisterWindowMessage(string message) Parameters message string A unique string used to identify the message type session-wide. Returns int A unique ID number used to identify the message type session-wide. SetCurrentProcessAppID(string) Sets the current process' explicit application user model ID. public static void SetCurrentProcessAppID(string appID) Parameters appID string The application ID to set. Remarks The application ID is used to group related windows in the taskbar. SplitArgs(string?) Tries to split a command-line into individual arguments. public static string[] SplitArgs(string? commandLine) Parameters commandLine string The command-line to be split. Returns string[] An array of individual arguments. Will return the entire command-line as one argument when not running on Windows or if splitting failed for some other reason. UnregisterApplicationRestart() Unregisters the current application for automatic restart after updates or crashes. public static void UnregisterApplicationRestart() WriteAllBytes(string, byte[]) Writes the entire contents of a byte array to a file using the Win32 API. Existing files with the same name are overwritten. public static void WriteAllBytes(string path, byte[] data) Parameters path string The path of the file to write to. data byte[] The data to write to the file. Remarks This method works like System.IO.File.WriteAllBytes(string, byte[]), but bypasses .NET's file path validation logic. Exceptions IOException There was an IO problem writing the file. UnauthorizedAccessException Write access to the file was denied. Win32Exception There was a problem writing the file. PlatformNotSupportedException This method is called on a platform other than Windows."
  },
  "api/NanoByte.Common.Native.html": {
    "href": "api/NanoByte.Common.Native.html",
    "title": "Namespace NanoByte.Common.Native | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Native Utility classes that provide OS-specific helper functions. Classes AppMutex Provides a cross-process object allowing easy detection of application instances (e.g., for use by installers and update tools). No-op on non-Windows platforms. CompilerUtils Provides helper methods for compiling .NET code at runtime. CygwinUtils Provides access to Cygwin-related filesystem features. Cygwin provides Unix-like functionality on Windows systems. OSUtils Provides helper methods related to operating system functionality across multiple platforms. ProcessLauncher Runs a child process. ProcessLauncherExtensions Extension methods for IProcessLauncher. RegistryUtils Provides utility and extension methods for Registry access. UnixUtils Provides helper methods for Unix-specific features of the Mono library. WinFormsUtils Provides helper methods and API calls specific to the System.Windows.Forms UI toolkit. WindowsCredentials Provides an interface to the Windows Credentials API. Supported on Windows XP or newer. WindowsMutex Provides Windows-specific API calls for cross-process Mutexes. WindowsRestartManager Provides an interface to the Windows Restart Manager. Supported on Windows Vista or newer. WindowsTaskbar Provides helper methods and API calls specific to the Windows 7 or newer taskbar. WindowsUtils Provides helper methods and API calls specific to the Windows platform. Structs WindowsTaskbar.ShellLink Represents a shell link targeting a file. Interfaces IProcessLauncher Runs an external process. Enums WindowMessage Values for System.Windows.Forms.Message.Msg. WindowsCredentialsFlags WindowsTaskbar.ProgressBarState Represents the thumbnail progress bar state."
  },
  "api/NanoByte.Common.Net.AnsiCliCredentialProvider.html": {
    "href": "api/NanoByte.Common.Net.AnsiCliCredentialProvider.html",
    "title": "Class AnsiCliCredentialProvider | NanoByte.Common",
    "summary": "Class AnsiCliCredentialProvider Namespace NanoByte.Common.Net Assembly NanoByte.Common.AnsiCli.dll Asks the user for System.Net.NetworkCredentials using an ANSI console prompt. public class AnsiCliCredentialProvider : ICredentialProvider Inheritance object AnsiCliCredentialProvider Implements ICredentialProvider Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors AnsiCliCredentialProvider(Action?) Asks the user for System.Net.NetworkCredentials using an ANSI console prompt. public AnsiCliCredentialProvider(Action? beforePrompt = null) Parameters beforePrompt Action An optional callback to be invoked right before the user is prompted for credentials Methods GetCredential(Uri, bool) Returns System.Net.NetworkCredentials for a specific System.Uri. public NetworkCredential GetCredential(Uri uri, bool previousIncorrect = false) Parameters uri Uri The URI that the client is providing authentication for. previousIncorrect bool Reports that the credentials previously returned by this provider were incorrect. Returns NetworkCredential"
  },
  "api/NanoByte.Common.Net.Connectivity.html": {
    "href": "api/NanoByte.Common.Net.Connectivity.html",
    "title": "Enum Connectivity | NanoByte.Common",
    "summary": "Enum Connectivity Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll State of a network connection. public enum Connectivity Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) EnumExtensions.GetEnumAttribute<TAttribute>(Enum) EnumExtensions.HasFlag(Enum, Enum) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields Metered = 1 Metered (potentially expensive) connection available. None = 2 No connection available. Normal = 0 Normal connection available."
  },
  "api/NanoByte.Common.Net.DownloadFile.html": {
    "href": "api/NanoByte.Common.Net.DownloadFile.html",
    "title": "Class DownloadFile | NanoByte.Common",
    "summary": "Class DownloadFile Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Downloads a file from a specific internet address to a stream. public class DownloadFile : TaskBase, ITask Inheritance object MarshalByRefObject TaskBase DownloadFile Implements ITask Inherited Members TaskBase.Tag TaskBase.CanCancel TaskBase.PreventIdle TaskBase.CancellationToken TaskBase.CredentialProvider TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) TaskBase.State TaskBase.UnitsProcessed TaskBase.UnitsTotal Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors DownloadFile(Uri, Action<Stream>, long) Creates a new download task. public DownloadFile(Uri source, Action<Stream> callback, long bytesTotal = -1) Parameters source Uri The URL the file is to be downloaded from. callback Action<Stream> Called with a stream providing the download content. bytesTotal long The number of bytes the file to be downloaded is long. The file will be rejected if it does not have this length. -1 if the size is unknown. DownloadFile(Uri, string, long) Creates a new download task. public DownloadFile(Uri source, string target, long bytesTotal = -1) Parameters source Uri The URL the file is to be downloaded from. target string The local path to save the file to. A preexisting file will be overwritten. bytesTotal long The number of bytes the file to be downloaded is long. The file will be rejected if it does not have this length. -1 if the size is unknown. Properties BytesMaximum The maximum number of bytes to download. public long BytesMaximum { get; set; } Property Value long ContentStarted Indicates whether the server has started sending content. public bool ContentStarted { get; } Property Value bool Name A name describing the task in human-readable form. public override string Name { get; } Property Value string NoCache Set to true to add a No-Cache header to the request for any intermediate proxy servers. public bool NoCache { get; set; } Property Value bool Source The URL the file is to be downloaded from. public Uri Source { get; } Property Value Uri Remarks This value may change once Data has been reached, based on HTTP redirections. UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected override bool UnitsByte { get; } Property Value bool Methods Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Net.HttpClientExtensions.html": {
    "href": "api/NanoByte.Common.Net.HttpClientExtensions.html",
    "title": "Class HttpClientExtensions | NanoByte.Common",
    "summary": "Class HttpClientExtensions Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Provides extension methods for System.Net.Http.HttpClient and related classes. public static class HttpClientExtensions Inheritance object HttpClientExtensions Methods AsWebException(HttpRequestException) Converts a System.Net.Http.HttpRequestException into a System.Net.WebException. public static WebException AsWebException(this HttpRequestException exception) Parameters exception HttpRequestException Returns WebException ReadAsStream(HttpContent, CancellationToken) Reads the content as a stream. public static Stream ReadAsStream(this HttpContent content, CancellationToken cancellationToken = default) Parameters content HttpContent cancellationToken CancellationToken Returns Stream Send(HttpClient, HttpRequestMessage, HttpCompletionOption, CancellationToken) Sends an HTTP request and waits for the result is synchronously. public static HttpResponseMessage Send(this HttpClient client, HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken = default) Parameters client HttpClient request HttpRequestMessage completionOption HttpCompletionOption cancellationToken CancellationToken Returns HttpResponseMessage Exceptions HttpRequestException The request failed due to a network, DNS or certificate issue. Send(HttpClient, HttpRequestMessage, CancellationToken) Sends an HTTP request and waits for the result is synchronously. public static HttpResponseMessage Send(this HttpClient client, HttpRequestMessage request, CancellationToken cancellationToken = default) Parameters client HttpClient request HttpRequestMessage cancellationToken CancellationToken Returns HttpResponseMessage Exceptions HttpRequestException The request failed due to a network, DNS or certificate issue."
  },
  "api/NanoByte.Common.Net.HttpServer.html": {
    "href": "api/NanoByte.Common.Net.HttpServer.html",
    "title": "Class HttpServer | NanoByte.Common",
    "summary": "Class HttpServer Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll A simple HTTP server. [CLSCompliant(false)] [MustDisposeResource] public abstract class HttpServer Inheritance object HttpServer Derived MicroServer Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors HttpServer(ushort, bool) Gets ready to serve HTTP requests. Call StartHandlingRequests() after completing any additional setup. protected HttpServer(ushort port = 0, bool localOnly = false) Parameters port ushort The TCP port to listen on; 0 to automatically pick free port. localOnly bool true to only respond to requests from the local machine instead of the network. Exceptions WebException Unable to serve on the specified port. NotAdminException Needs admin rights to serve HTTP requests. Properties Port The TCP port the server is listing on. public ushort Port { get; } Property Value ushort Methods Dispose() Stops serving HTTP requests. public virtual void Dispose() HandleRequest(HttpListenerContext) Handles a single HTTP request. protected abstract void HandleRequest(HttpListenerContext context) Parameters context HttpListenerContext StartHandlingRequests() To be called by derived constructor when setup is complete. protected void StartHandlingRequests()"
  },
  "api/NanoByte.Common.Net.ICredentialProvider.html": {
    "href": "api/NanoByte.Common.Net.ICredentialProvider.html",
    "title": "Interface ICredentialProvider | NanoByte.Common",
    "summary": "Interface ICredentialProvider Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Asks the user or a keyring for System.Net.NetworkCredentials for specific System.Uris. public interface ICredentialProvider Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks Implementations of this interface are thread-safe. Methods GetCredential(Uri, bool) Returns System.Net.NetworkCredentials for a specific System.Uri. NetworkCredential? GetCredential(Uri uri, bool previousIncorrect = false) Parameters uri Uri The URI that the client is providing authentication for. previousIncorrect bool Reports that the credentials previously returned by this provider were incorrect. Returns NetworkCredential"
  },
  "api/NanoByte.Common.Net.MicroServer.html": {
    "href": "api/NanoByte.Common.Net.MicroServer.html",
    "title": "Class MicroServer | NanoByte.Common",
    "summary": "Class MicroServer Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll A minimalistic HTTP server that only serves a single file on localhost. Useful for unit tests. [CLSCompliant(false)] public sealed class MicroServer : HttpServer Inheritance object HttpServer MicroServer Inherited Members HttpServer.Port HttpServer.Dispose() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors MicroServer(string, Stream) Starts serving a single file via HTTP on localhost. public MicroServer(string resourceName, Stream fileContent) Parameters resourceName string The HTTP resource name under which to provide the content. fileContent Stream The content of the file to serve. Properties FileContent The content of the file to be served under FileUri. public Stream FileContent { get; } Property Value Stream FileUri The complete URL under which the server provides its file. public Uri FileUri { get; } Property Value Uri ServerUri The URL under which the server root can be reached. Usually you should use FileUri instead. public Uri ServerUri { get; } Property Value Uri Slow Wait for twenty seconds every time before finishing a response. public bool Slow { get; set; } Property Value bool Methods HandleRequest(HttpListenerContext) Handles a single HTTP request. protected override void HandleRequest(HttpListenerContext context) Parameters context HttpListenerContext"
  },
  "api/NanoByte.Common.Net.NetUtils.html": {
    "href": "api/NanoByte.Common.Net.NetUtils.html",
    "title": "Class NetUtils | NanoByte.Common",
    "summary": "Class NetUtils Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Provides helper methods for the System.Net subsystem. public static class NetUtils Inheritance object NetUtils Methods ApplyProxy() Applies environment variable HTTP proxy server configuration if present. public static void ApplyProxy() Remarks Uses classic Linux environment variables: http_proxy, http_proxy_user, http_proxy_pass ConfigureTls() Enables TLS 1.2 and TLS 1.3 support if available. public static void ConfigureTls() GetInternetConnectivity() Returns the current state of the internet connection. When unsure assumes a connection is available. public static Connectivity GetInternetConnectivity() Returns Connectivity TrustCertificates(params string[]) Makes the SSL validation subsystem trust a set of certificates, even if their certificate chain is not trusted. public static void TrustCertificates(params string[] publicKeys) Parameters publicKeys string[] The public keys of the certificates to trust. Remarks This method affects the global state of the System.AppDomain. Calling it more than once is not cumulative and will overwrite previous certificates. You should call this method exactly once near the beginning of your application."
  },
  "api/NanoByte.Common.Net.Netrc.html": {
    "href": "api/NanoByte.Common.Net.Netrc.html",
    "title": "Class Netrc | NanoByte.Common",
    "summary": "Class Netrc Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Represents data loaded from a .netrc file as a map from host names to credentials. public class Netrc : Dictionary<string, NetworkCredential> Inheritance object Dictionary<string, NetworkCredential> Netrc Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) CollectionExtensions.AddIfNew<T>(ICollection<T>, T) CollectionExtensions.Add<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) CollectionExtensions.RemoveAll<T>(ICollection<T>, Func<T, bool>) CollectionExtensions.Remove<TCollection, TElements>(ICollection<TCollection>, IEnumerable<TElements>) DictionaryExtensions.AddRange<TSourceKey, TSourceValue, TTargetKey, TTargetValue>(IDictionary<TTargetKey, TTargetValue>, IEnumerable<KeyValuePair<TSourceKey, TSourceValue>>) DictionaryExtensions.GetOrAddAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<Task<TValue>>) DictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) DictionaryExtensions.GetUnsequencedHashCode<TKey, TValue>(IDictionary<TKey, TValue>, IEqualityComparer<TValue>?) DictionaryExtensions.TryAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) DictionaryExtensions.UnsequencedEquals<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, IEqualityComparer<TValue>?) DictionaryExtensions.ToMultiDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.ContainsOrEmpty<T>(IEnumerable<T>, T) EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.Except<T>(IEnumerable<T>, T) EnumerableExtensions.Except<T>(IEnumerable<T>, Func<T, bool>) EnumerableExtensions.GetSequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.GetUnsequencedHashCode<T>(IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.MaxBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.MinBy<T, TValue>(IEnumerable<T>, Func<T, TValue>, IComparer<TValue>?) EnumerableExtensions.Permutate<T>(IEnumerable<T>) EnumerableExtensions.SequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) EnumerableExtensions.TopologicalSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TrySelect<TSource, TResult, TException>(IEnumerable<TSource>, Func<TSource, TResult>, Action<TException>) EnumerableExtensions.UnsequencedEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>?) Bucketizer.Bucketize<T>(IEnumerable<T>) Bucketizer.Bucketize<TElement, TValue>(IEnumerable<TElement>, Func<TElement, TValue>) ExceptionUtils.TryAnyAsync<T>(IEnumerable<T>, Func<T, Task>) ExceptionUtils.TryAny<T>(IEnumerable<T>, Action<T>) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, TValue) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties DefaultPath The default path for the .netrc file. Usually in the home directory. Can be overriden via NETRC environment variable. public static string DefaultPath { get; } Property Value string Methods Load(string) Loads credentials from a .netrc file. public static Netrc Load(string path) Parameters path string The path of the file to load. Returns Netrc Exceptions IOException A problem occurred while loading the file. UnauthorizedAccessException Read access to the file was denied. LoadSafe() Loads credentials from DefaultPath. Catches any exceptions and returns empty Netrc instead. public static Netrc LoadSafe() Returns Netrc"
  },
  "api/NanoByte.Common.Net.NetrcCredentialProvider.html": {
    "href": "api/NanoByte.Common.Net.NetrcCredentialProvider.html",
    "title": "Class NetrcCredentialProvider | NanoByte.Common",
    "summary": "Class NetrcCredentialProvider Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Gets credentials from Netrc if possible. Falls back to another provider otherwise. public class NetrcCredentialProvider : ICredentialProvider Inheritance object NetrcCredentialProvider Implements ICredentialProvider Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors NetrcCredentialProvider(ICredentialProvider?) Gets credentials from Netrc if possible. Falls back to another provider otherwise. public NetrcCredentialProvider(ICredentialProvider? innerProvider = null) Parameters innerProvider ICredentialProvider The provider to fall back to if no suitable credentials can be found in Netrc. Methods GetCredential(Uri, bool) Returns System.Net.NetworkCredentials for a specific System.Uri. public NetworkCredential? GetCredential(Uri uri, bool previousIncorrect = false) Parameters uri Uri The URI that the client is providing authentication for. previousIncorrect bool Reports that the credentials previously returned by this provider were incorrect. Returns NetworkCredential"
  },
  "api/NanoByte.Common.Net.NetworkCredentialExtension.html": {
    "href": "api/NanoByte.Common.Net.NetworkCredentialExtension.html",
    "title": "Class NetworkCredentialExtension | NanoByte.Common",
    "summary": "Class NetworkCredentialExtension Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Provides extension methods for System.Net.NetworkCredentials. public static class NetworkCredentialExtension Inheritance object NetworkCredentialExtension Methods ToBasicAuth(NetworkCredential) Creates a HTTP basic authentication header from the provided credentials. public static AuthenticationHeaderValue ToBasicAuth(this NetworkCredential credential) Parameters credential NetworkCredential Returns AuthenticationHeaderValue"
  },
  "api/NanoByte.Common.Net.UriExtensions.html": {
    "href": "api/NanoByte.Common.Net.UriExtensions.html",
    "title": "Class UriExtensions | NanoByte.Common",
    "summary": "Class UriExtensions Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Provides extension methods for System.Uris. public static class UriExtensions Inheritance object UriExtensions Methods EnsureTrailingSlash(Uri) Adds a trailing slash to the URI if it does not already have one. [Pure] public static Uri EnsureTrailingSlash(this Uri uri) Parameters uri Uri Returns Uri GetLocalFileName(Uri) Extracts the file-name portion of an URI and ensures it is a valid file-name on the local OS. [Pure] public static string GetLocalFileName(this Uri uri) Parameters uri Uri Returns string GetRoot(Uri) Removes everything except the schema, host and port from the URI. Returns the original URI if it is not an absolute URI. [Pure] public static Uri GetRoot(this Uri uri) Parameters uri Uri Returns Uri ReparseAsAbsolute(Uri) Reparses a URI (generated via conversion) to ensure it is a valid absolute URI. [Pure] public static Uri ReparseAsAbsolute(this Uri uri) Parameters uri Uri Returns Uri ToStringRfc(Uri) An alternate version of System.Uri.ToString() that produces results escaped according to RFC 2396. [Pure] public static string ToStringRfc(this Uri uri) Parameters uri Uri Returns string"
  },
  "api/NanoByte.Common.Net.WebProxyExtensions.html": {
    "href": "api/NanoByte.Common.Net.WebProxyExtensions.html",
    "title": "Class WebProxyExtensions | NanoByte.Common",
    "summary": "Class WebProxyExtensions Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Provides extension methods for System.Net.IWebProxys. public static class WebProxyExtensions Inheritance object WebProxyExtensions Methods HasCustomCredentials(IWebProxy) Determines whether custom (non-default and non-empty) credentials are configured for this proxy. public static bool HasCustomCredentials(this IWebProxy proxy) Parameters proxy IWebProxy Returns bool"
  },
  "api/NanoByte.Common.Net.WindowsCliCredentialProvider.html": {
    "href": "api/NanoByte.Common.Net.WindowsCliCredentialProvider.html",
    "title": "Class WindowsCliCredentialProvider | NanoByte.Common",
    "summary": "Class WindowsCliCredentialProvider Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Asks the user for System.Net.NetworkCredentials using the Windows Credential Manager command-line interface. public class WindowsCliCredentialProvider : WindowsCredentialProvider, ICredentialProvider Inheritance object WindowsCredentialProvider WindowsCliCredentialProvider Implements ICredentialProvider Inherited Members WindowsCredentialProvider.GetCredential(Uri, bool) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors WindowsCliCredentialProvider(Action?) Asks the user for System.Net.NetworkCredentials using the Windows Credential Manager command-line interface. public WindowsCliCredentialProvider(Action? beforePrompt = null) Parameters beforePrompt Action An optional callback to be invoked right before the user is prompted for credentials Methods GetCredential(string, WindowsCredentialsFlags) Performs the actual WindowsCredentials API call to prompt the user or the credential store for credentials. protected override NetworkCredential GetCredential(string target, WindowsCredentialsFlags flags) Parameters target string A string identifying the target the credentials are intended for. flags WindowsCredentialsFlags Flags for configuring the prompt. Returns NetworkCredential"
  },
  "api/NanoByte.Common.Net.WindowsCredentialProvider.html": {
    "href": "api/NanoByte.Common.Net.WindowsCredentialProvider.html",
    "title": "Class WindowsCredentialProvider | NanoByte.Common",
    "summary": "Class WindowsCredentialProvider Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Gets System.Net.NetworkCredentials using the Windows Credential Manager. public abstract class WindowsCredentialProvider : ICredentialProvider Inheritance object WindowsCredentialProvider Implements ICredentialProvider Derived WindowsCliCredentialProvider WindowsGuiCredentialProvider WindowsNonInteractiveCredentialProvider Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods GetCredential(string, WindowsCredentialsFlags) Performs the actual WindowsCredentials API call to prompt the user or the credential store for credentials. protected abstract NetworkCredential? GetCredential(string target, WindowsCredentialsFlags flags) Parameters target string A string identifying the target the credentials are intended for. flags WindowsCredentialsFlags Flags for configuring the prompt. Returns NetworkCredential GetCredential(Uri, bool) Returns System.Net.NetworkCredentials for a specific System.Uri. public NetworkCredential? GetCredential(Uri uri, bool previousIncorrect = false) Parameters uri Uri The URI that the client is providing authentication for. previousIncorrect bool Reports that the credentials previously returned by this provider were incorrect. Returns NetworkCredential"
  },
  "api/NanoByte.Common.Net.WindowsGuiCredentialProvider.html": {
    "href": "api/NanoByte.Common.Net.WindowsGuiCredentialProvider.html",
    "title": "Class WindowsGuiCredentialProvider | NanoByte.Common",
    "summary": "Class WindowsGuiCredentialProvider Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Asks the user for System.Net.NetworkCredentials using the Windows Credential Manager GUI. public class WindowsGuiCredentialProvider : WindowsCredentialProvider, ICredentialProvider Inheritance object WindowsCredentialProvider WindowsGuiCredentialProvider Implements ICredentialProvider Inherited Members WindowsCredentialProvider.GetCredential(Uri, bool) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods GetCredential(string, WindowsCredentialsFlags) Performs the actual WindowsCredentials API call to prompt the user or the credential store for credentials. protected override NetworkCredential GetCredential(string target, WindowsCredentialsFlags flags) Parameters target string A string identifying the target the credentials are intended for. flags WindowsCredentialsFlags Flags for configuring the prompt. Returns NetworkCredential"
  },
  "api/NanoByte.Common.Net.WindowsNonInteractiveCredentialProvider.html": {
    "href": "api/NanoByte.Common.Net.WindowsNonInteractiveCredentialProvider.html",
    "title": "Class WindowsNonInteractiveCredentialProvider | NanoByte.Common",
    "summary": "Class WindowsNonInteractiveCredentialProvider Namespace NanoByte.Common.Net Assembly NanoByte.Common.dll Gets System.Net.NetworkCredentials stored in the Windows Credential Manager. Does not prompt for new credentials. public class WindowsNonInteractiveCredentialProvider : WindowsCredentialProvider, ICredentialProvider Inheritance object WindowsCredentialProvider WindowsNonInteractiveCredentialProvider Implements ICredentialProvider Inherited Members WindowsCredentialProvider.GetCredential(Uri, bool) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods GetCredential(string, WindowsCredentialsFlags) Performs the actual WindowsCredentials API call to prompt the user or the credential store for credentials. protected override NetworkCredential? GetCredential(string target, WindowsCredentialsFlags flags) Parameters target string A string identifying the target the credentials are intended for. flags WindowsCredentialsFlags Flags for configuring the prompt. Returns NetworkCredential"
  },
  "api/NanoByte.Common.Net.html": {
    "href": "api/NanoByte.Common.Net.html",
    "title": "Namespace NanoByte.Common.Net | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Net Network communication. Classes AnsiCliCredentialProvider Asks the user for System.Net.NetworkCredentials using an ANSI console prompt. DownloadFile Downloads a file from a specific internet address to a stream. HttpClientExtensions Provides extension methods for System.Net.Http.HttpClient and related classes. HttpServer A simple HTTP server. MicroServer A minimalistic HTTP server that only serves a single file on localhost. Useful for unit tests. NetUtils Provides helper methods for the System.Net subsystem. Netrc Represents data loaded from a .netrc file as a map from host names to credentials. NetrcCredentialProvider Gets credentials from Netrc if possible. Falls back to another provider otherwise. NetworkCredentialExtension Provides extension methods for System.Net.NetworkCredentials. UriExtensions Provides extension methods for System.Uris. WebProxyExtensions Provides extension methods for System.Net.IWebProxys. WindowsCliCredentialProvider Asks the user for System.Net.NetworkCredentials using the Windows Credential Manager command-line interface. WindowsCredentialProvider Gets System.Net.NetworkCredentials using the Windows Credential Manager. WindowsGuiCredentialProvider Asks the user for System.Net.NetworkCredentials using the Windows Credential Manager GUI. WindowsNonInteractiveCredentialProvider Gets System.Net.NetworkCredentials stored in the Windows Credential Manager. Does not prompt for new credentials. Interfaces ICredentialProvider Asks the user or a keyring for System.Net.NetworkCredentials for specific System.Uris. Enums Connectivity State of a network connection."
  },
  "api/NanoByte.Common.NotAdminException.html": {
    "href": "api/NanoByte.Common.NotAdminException.html",
    "title": "Class NotAdminException | NanoByte.Common",
    "summary": "Class NotAdminException Namespace NanoByte.Common Assembly NanoByte.Common.dll Like a System.UnauthorizedAccessException but with the additional hint that retrying the operation as an administrator would fix the problem. [Serializable] public class NotAdminException : UnauthorizedAccessException Inheritance object Exception SystemException UnauthorizedAccessException NotAdminException Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) ExceptionUtils.GetMessageWithInner(Exception) ExceptionUtils.Rethrow(Exception) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors NotAdminException() Initializes a new instance of the System.UnauthorizedAccessException class. public NotAdminException() NotAdminException(SerializationInfo, StreamingContext) Initializes a new instance of the System.UnauthorizedAccessException class with serialized data. protected NotAdminException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. NotAdminException(string) Initializes a new instance of the System.UnauthorizedAccessException class with a specified error message. public NotAdminException(string message) Parameters message string The message that describes the error. NotAdminException(string, Exception) Initializes a new instance of the System.UnauthorizedAccessException class with a specified error message and a reference to the inner exception that is the cause of this exception. public NotAdminException(string message, Exception inner) Parameters message string The error message that explains the reason for the exception. inner Exception The exception that is the cause of the current exception. If the inner parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception."
  },
  "api/NanoByte.Common.ProcessUtils.html": {
    "href": "api/NanoByte.Common.ProcessUtils.html",
    "title": "Class ProcessUtils | NanoByte.Common",
    "summary": "Class ProcessUtils Namespace NanoByte.Common Assembly NanoByte.Common.dll Provides methods for launching child processes. public static class ProcessUtils Inheritance object ProcessUtils Methods AsAdmin(ProcessStartInfo) Modifies a System.Diagnostics.ProcessStartInfo to request elevation to Administrator on Windows using UAC. public static ProcessStartInfo AsAdmin(this ProcessStartInfo startInfo) Parameters startInfo ProcessStartInfo Returns ProcessStartInfo Exceptions PlatformNotSupportedException The current operating system does not support UAC or it is disabled.. Assembly(string, IEnumerable<string>) Creates a System.Diagnostics.ProcessStartInfo for launching an assembly located in InstallBase. [Pure] public static ProcessStartInfo Assembly(string name, IEnumerable<string> arguments) Parameters name string The name of the assembly to launch (without the file extension). arguments IEnumerable<string> The command-line arguments to pass to the assembly. Returns ProcessStartInfo Exceptions FileNotFoundException The specified assembly could not be found. Assembly(string, params string[]) Creates a System.Diagnostics.ProcessStartInfo for launching an assembly located in InstallBase. [Pure] public static ProcessStartInfo Assembly(string name, params string[] arguments) Parameters name string The name of the assembly to launch (without the file extension). arguments string[] The command-line arguments to pass to the assembly. Returns ProcessStartInfo Exceptions FileNotFoundException The specified assembly could not be found. Deconstruct(ProcessStartInfo, out string, out string) Deconstructs a System.Diagnostics.ProcessStartInfo like a tuple. [Pure] public static void Deconstruct(this ProcessStartInfo startInfo, out string fileName, out string arguments) Parameters startInfo ProcessStartInfo fileName string arguments string EscapeArgument(string) Escapes a string for use as a command-line argument, making sure it is encapsulated within \" if it contains whitespace characters. [Pure] public static string EscapeArgument(this string value) Parameters value string Returns string FromCommandLine(string) Converts a command-line into a start info. [Pure] public static ProcessStartInfo FromCommandLine(string commandLine) Parameters commandLine string Returns ProcessStartInfo JoinEscapeArguments(IEnumerable<string>) Combines multiple strings into one for use as a command-line argument using EscapeArgument(string). [Pure] public static string JoinEscapeArguments(this IEnumerable<string> parts) Parameters parts IEnumerable<string> The strings to be combined. Returns string Run(ProcessStartInfo) Starts a new System.Diagnostics.Process and waits for it to complete. Handles and wraps System.ComponentModel.Win32Exceptions. public static int Run(this ProcessStartInfo startInfo) Parameters startInfo ProcessStartInfo Returns int The exit code of the process. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation but the UAC prompt could not be displayed because System.Diagnostics.ProcessStartInfo.UseShellExecute is false. OperationCanceledException The user was asked for intervention by the OS (e.g. a UAC prompt) and the user cancelled. SanitizeEnvironmentVariables() Workaround for environment variable problems, such variable names that differ only in casing when running on Windows. public static void SanitizeEnvironmentVariables() Remarks Call this before any access to System.Diagnostics.ProcessStartInfo.EnvironmentVariables to avoid System.ArgumentExceptions. Start(ProcessStartInfo) Starts a new System.Diagnostics.Process and runs it in parallel with this one. Handles and wraps System.ComponentModel.Win32Exceptions. public static Process Start(this ProcessStartInfo startInfo) Parameters startInfo ProcessStartInfo Returns Process The newly launched process. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation but the UAC prompt could not be displayed because System.Diagnostics.ProcessStartInfo.UseShellExecute is false. OperationCanceledException The user was asked for intervention by the OS (e.g. a UAC prompt) and the user cancelled. Start(string, IEnumerable<string>) Starts a new System.Diagnostics.Process and runs it in parallel with this one. Handles and wraps System.ComponentModel.Win32Exceptions. public static Process Start(string fileName, IEnumerable<string> arguments) Parameters fileName string The path of the file to open or executable to launch. arguments IEnumerable<string> The command-line arguments to pass to the executable. Returns Process The newly launched process; null if an existing process was reused. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation but the UAC prompt could not be displayed because System.Diagnostics.ProcessStartInfo.UseShellExecute is false. OperationCanceledException The user was asked for intervention by the OS (e.g. a UAC prompt) and the user cancelled. Start(string, params string[]) Starts a new System.Diagnostics.Process and runs it in parallel with this one. Handles and wraps System.ComponentModel.Win32Exceptions. public static Process Start(string fileName, params string[] arguments) Parameters fileName string The path of the file to open or executable to launch. arguments string[] The command-line arguments to pass to the executable. Returns Process The newly launched process; null if an existing process was reused. Exceptions IOException There was a problem launching the executable. FileNotFoundException The executable file could not be found. NotAdminException The target process requires elevation but the UAC prompt could not be displayed because System.Diagnostics.ProcessStartInfo.UseShellExecute is false. OperationCanceledException The user was asked for intervention by the OS (e.g. a UAC prompt) and the user cancelled. ToCommandLine(ProcessStartInfo) Converts a start into a command-line with proper escaping. [Pure] public static string ToCommandLine(this ProcessStartInfo startInfo) Parameters startInfo ProcessStartInfo Returns string WaitForExitCode(Process) Waits for a running System.Diagnostics.Process to complete. public static int WaitForExitCode(this Process process) Parameters process Process Returns int The exit code of the process. WaitForSuccess(Process) Waits for a running System.Diagnostics.Process to complete with an exit code of zero. public static void WaitForSuccess(this Process process) Parameters process Process Exceptions ExitCodeException The process exited with a non-zero System.Diagnostics.Process.ExitCode."
  },
  "api/NanoByte.Common.Properties.Resources.html": {
    "href": "api/NanoByte.Common.Properties.Resources.html",
    "title": "Class Resources | NanoByte.Common",
    "summary": "Class Resources Namespace NanoByte.Common.Properties Assembly NanoByte.Common.dll A strongly-typed resource class, for looking up localized strings, etc. public class Resources Inheritance object Resources Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors Resources() public Resources() Properties Back Looks up a localized string similar to Back. public static string Back { get; } Property Value string Bytes public static string Bytes { get; } Property Value string BytesGibi public static string BytesGibi { get; } Property Value string BytesKibi public static string BytesKibi { get; } Property Value string BytesMebi public static string BytesMebi { get; } Property Value string BytesTebi public static string BytesTebi { get; } Property Value string Cancel Looks up a localized string similar to Cancel. public static string Cancel { get; } Property Value string CannotAddCollectionToSelf Looks up a localized string similar to The collection cannot be added to itself.. public static string CannotAddCollectionToSelf { get; } Property Value string CannotCanonicalizeDacl Looks up a localized string similar to The DACL cannot be canonicalized since it would potentially result in a loss of information.. public static string CannotCanonicalizeDacl { get; } Property Value string Comment Looks up a localized string similar to &Comment:. public static string Comment { get; } Property Value string CopyFiles Looks up a localized string similar to Copying files. public static string CopyFiles { get; } Property Value string CopyToClipboard Looks up a localized string similar to &Copy to clipboard. public static string CopyToClipboard { get; } Property Value string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. public static CultureInfo Culture { get; set; } Property Value CultureInfo DestinationDirExist Looks up a localized string similar to The destination directory already exists.. public static string DestinationDirExist { get; } Property Value string Downloading Looks up a localized string similar to Downloading {0}. public static string Downloading { get; } Property Value string ErrorReport Looks up a localized string similar to Error report. public static string ErrorReport { get; } Property Value string ErrorReportCancel Looks up a localized string similar to Do &not report. public static string ErrorReportCancel { get; } Property Value string ErrorReportComment Looks up a localized string similar to If you wish, you can use this field to provide additional information about the problem, such as a description of what you were doing when the crash occurred.. public static string ErrorReportComment { get; } Property Value string ErrorReportInfo Looks up a localized string similar to An unexpected error has occurred in this application. You can help us fix the problem by reporting it. If there is already a known fix for your problem it will be displayed right after sending the report.. public static string ErrorReportInfo { get; } Property Value string ErrorReportSend Looks up a localized string similar to &Report. public static string ErrorReportSend { get; } Property Value string ErrorReportSent Looks up a localized string similar to The error report was sent successfully.. public static string ErrorReportSent { get; } Property Value string FailedToDownload Looks up a localized string similar to Failed to download {0}.. public static string FailedToDownload { get; } Property Value string FailedToOpenRegistrySubkey Looks up a localized string similar to Failed to open registry subkey '{0}' in '{1}'.. public static string FailedToOpenRegistrySubkey { get; } Property Value string FailedToRollback Looks up a localized string similar to Failed to rollback '{0}'.. public static string FailedToRollback { get; } Property Value string FailedToStart Looks up a localized string similar to Failed to start '{0}'.. public static string FailedToStart { get; } Property Value string FileNotExpectedSize Looks up a localized string similar to The file that was supposed to be downloaded from {0} doesn't have the expected size. Was supposed to be {1} bytes but was actually {2} bytes.. public static string FileNotExpectedSize { get; } Property Value string FileNotFound Looks up a localized string similar to The file \"{0}\" could not be found.. public static string FileNotFound { get; } Property Value string InvalidConfigDir Looks up a localized string similar to The configuration directory '{0}' is probably invalid.. public static string InvalidConfigDir { get; } Property Value string InvalidCredentials Looks up a localized string similar to The login credentials for {0} are incorrect.. public static string InvalidCredentials { get; } Property Value string KeyAlreadyPresent Looks up a localized string similar to The key was already present in the dictionary.. public static string KeyAlreadyPresent { get; } Property Value string LaunchNeedsAdmin Looks up a localized string similar to Launching '{0}' requires Administrator privileges.. public static string LaunchNeedsAdmin { get; } Property Value string MaxElementsExceeded Looks up a localized string similar to The maximum amount of elements in the collection has been exceeded.. public static string MaxElementsExceeded { get; } Property Value string MissingDispatchAction Looks up a localized string similar to No action registered for '{0}'.. public static string MissingDispatchAction { get; } Property Value string No Looks up a localized string similar to No. public static string No { get; } Property Value string NoSystemConfigInPortableMode Looks up a localized string similar to System configuration cannot be edited in portable mode.. public static string NoSystemConfigInPortableMode { get; } Property Value string OK Looks up a localized string similar to OK. public static string OK { get; } Property Value string OnlyAvailableOnWindows Looks up a localized string similar to This method is only available on Windows.. public static string OnlyAvailableOnWindows { get; } Property Value string Password Looks up a localized string similar to Password:. public static string Password { get; } Property Value string PleaseEnterCredentials Looks up a localized string similar to Please enter login credentials for {0}:. public static string PleaseEnterCredentials { get; } Property Value string ProblemLoading Looks up a localized string similar to There was a problem loading '{0}'.. public static string ProblemLoading { get; } Property Value string ProcessExitCode Looks up a localized string similar to '{0}' exited with exit code {1}.. public static string ProcessExitCode { get; } Property Value string ProcessExitCodeUnexpected Looks up a localized string similar to A process exited with an unexpected exit code.. public static string ProcessExitCodeUnexpected { get; } Property Value string ReadingFile Looks up a localized string similar to Reading file {0}. public static string ReadingFile { get; } Property Value string RedoNotAvailable Looks up a localized string similar to This command cannot be performed again until the undo command has been performed.. public static string RedoNotAvailable { get; } Property Value string ResetValue Looks up a localized string similar to &Reset value. public static string ResetValue { get; } Property Value string ResourceManager Returns the cached ResourceManager instance used by this class. public static ResourceManager ResourceManager { get; } Property Value ResourceManager RestartingApps Looks up a localized string similar to Restarting applications. public static string RestartingApps { get; } Property Value string RetryDelay Looks up a localized string similar to Retrying in {0} milliseconds because of:. public static string RetryDelay { get; } Property Value string Search Looks up a localized string similar to Search. public static string Search { get; } Property Value string SearchingFileReferences Looks up a localized string similar to Searching for open file references. public static string SearchingFileReferences { get; } Property Value string SeekOffsetTooLarge Looks up a localized string similar to Attempted to read from position {0}. This is {1} bytes away from the underlying stream position {2}, but the seek buffer can only accomodate a difference of {3} bytes.. public static string SeekOffsetTooLarge { get; } Property Value string ShuttingDownApps Looks up a localized string similar to Shutting down applications. public static string ShuttingDownApps { get; } Property Value string SourceDestinationEqual Looks up a localized string similar to Source and destination are equal.. public static string SourceDestinationEqual { get; } Property Value string StateComplete Looks up a localized string similar to Complete. public static string StateComplete { get; } Property Value string StateData Looks up a localized string similar to Processing data. public static string StateData { get; } Property Value string StateHeader Looks up a localized string similar to Getting headers. public static string StateHeader { get; } Property Value string StateIOError Looks up a localized string similar to IO error. public static string StateIOError { get; } Property Value string StateReady Looks up a localized string similar to Ready. public static string StateReady { get; } Property Value string StateWebError Looks up a localized string similar to Web error. public static string StateWebError { get; } Property Value string TargetsOldValuesLength Looks up a localized string similar to Length of targets must be equal to Length of oldValues. public static string TargetsOldValuesLength { get; } Property Value string TechnicalDetails Looks up a localized string similar to Technical details:. public static string TechnicalDetails { get; } Property Value string Tls12SupportMissing Looks up a localized string similar to Your version of .NET does not support TLS 1.2. This may cause connection errors when downloading content via HTTPS. Please run Windows Update to install the necessary patches.. public static string Tls12SupportMissing { get; } Property Value string UnableToLocateAssembly Looks up a localized string similar to The assembly named \"{0}\" could not be located.. public static string UnableToLocateAssembly { get; } Property Value string UnableToReadBytesFromStream Looks up a localized string similar to Unable to read {0} bytes from the stream.. public static string UnableToReadBytesFromStream { get; } Property Value string UndoNotAvailable Looks up a localized string similar to This undo command cannot be performed until the actual command has been performed.. public static string UndoNotAvailable { get; } Property Value string UnixSubsystemFail Looks up a localized string similar to The Unix subsystem failed to process the request. You may have insufficient rights.. public static string UnixSubsystemFail { get; } Property Value string UserName Looks up a localized string similar to User name:. public static string UserName { get; } Property Value string Yes Looks up a localized string similar to Yes. public static string Yes { get; } Property Value string"
  },
  "api/NanoByte.Common.Properties.html": {
    "href": "api/NanoByte.Common.Properties.html",
    "title": "Namespace NanoByte.Common.Properties | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Properties Classes Resources A strongly-typed resource class, for looking up localized strings, etc."
  },
  "api/NanoByte.Common.PropertyPointer-1.html": {
    "href": "api/NanoByte.Common.PropertyPointer-1.html",
    "title": "Class PropertyPointer<T> | NanoByte.Common",
    "summary": "Class PropertyPointer<T> Namespace NanoByte.Common Assembly NanoByte.Common.dll Wraps delegate-based access to a property. public class PropertyPointer<T> : MarshalByRefObject Type Parameters T The type of value the property contains. Inheritance object MarshalByRefObject PropertyPointer<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors PropertyPointer(Func<T>, Action<T>) Wraps delegate-based access to a property. public PropertyPointer(Func<T> getValue, Action<T> setValue) Parameters getValue Func<T> A delegate that returns the current value. setValue Action<T> A delegate that sets the value. Properties Value Transparent access to the wrapper value. public T Value { get; set; } Property Value T Methods SetTemp(T) Temporarily changes the value of the property. [MustDisposeResource] public IDisposable SetTemp(T value) Parameters value T Returns IDisposable Call System.IDisposable.Dispose() to restore the original value of the property. Examples using (PropertyPointer.For(() => someProperty).SetTemp(someValue)) { // ... }"
  },
  "api/NanoByte.Common.PropertyPointer.html": {
    "href": "api/NanoByte.Common.PropertyPointer.html",
    "title": "Class PropertyPointer | NanoByte.Common",
    "summary": "Class PropertyPointer Namespace NanoByte.Common Assembly NanoByte.Common.dll Provides factory methods for PropertyPointer<T>. public static class PropertyPointer Inheritance object PropertyPointer Methods ForNullable<T>(Func<T?>, Action<T?>) Creates a property pointer for a nullable value. public static PropertyPointer<T?> ForNullable<T>(Func<T?> getValue, Action<T?> setValue) Parameters getValue Func<T> A delegate that returns the current value. setValue Action<T> A delegate that sets the value. Returns PropertyPointer<T> Type Parameters T The type of value the property contains. ForNullable<T>(Expression<Func<T?>>) Creates a property pointer for a nullable value. public static PropertyPointer<T?> ForNullable<T>(Expression<Func<T?>> expression) Parameters expression Expression<Func<T>> An expression pointing to the property. Returns PropertyPointer<T> Type Parameters T The type of value the property contains. Exceptions ArgumentException The expression does not point to a property with a setter. For<T>(Func<T>, Action<T>) Creates a property pointer. public static PropertyPointer<T> For<T>(Func<T> getValue, Action<T> setValue) where T : notnull Parameters getValue Func<T> A delegate that returns the current value. setValue Action<T> A delegate that sets the value. Returns PropertyPointer<T> Type Parameters T The type of value the property contains. For<T>(Expression<Func<T>>) Creates a property pointer. public static PropertyPointer<T> For<T>(Expression<Func<T>> expression) where T : notnull Parameters expression Expression<Func<T>> An expression pointing to the property. Returns PropertyPointer<T> Type Parameters T The type of value the property contains. Exceptions ArgumentException The expression does not point to a property with a setter. ToSetValue<T>(Expression<Func<T>>) Converts an expression pointing to a property into a delegate for setting the property's value. public static Action<T> ToSetValue<T>(this Expression<Func<T>> expression) Parameters expression Expression<Func<T>> Returns Action<T> Type Parameters T Exceptions ArgumentException The expression does not point to a property with a setter."
  },
  "api/NanoByte.Common.StagedOperation.html": {
    "href": "api/NanoByte.Common.StagedOperation.html",
    "title": "Class StagedOperation | NanoByte.Common",
    "summary": "Class StagedOperation Namespace NanoByte.Common Assembly NanoByte.Common.dll Common base class for operations that are first staged and then either committed or rolled back. [MustDisposeResource] public abstract class StagedOperation Inheritance object StagedOperation Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Commit() Commits the Stage()d changes. public void Commit() Dispose() Performs a rollback of all changes made by Stage() if Commit() has not been called and completed yet. public virtual void Dispose() OnCommit() Template method to commit the changes made by OnStage(). protected abstract void OnCommit() OnRollback() Template method to revert any changes made by OnStage(). protected abstract void OnRollback() OnStage() Template method to stage changes. protected abstract void OnStage() Stage() Stages changes for later Commit() or rollback. public void Stage()"
  },
  "api/NanoByte.Common.Storage.AtomicRead.html": {
    "href": "api/NanoByte.Common.Storage.AtomicRead.html",
    "title": "Class AtomicRead | NanoByte.Common",
    "summary": "Class AtomicRead Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Ensures that a read operation for a file does not conflict with an AtomicWrite for the same file. [MustDisposeResource] public sealed class AtomicRead Inheritance object AtomicRead Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Examples using (new AtomicRead(filePath)) return File.ReadAllBytes(filePath); Constructors AtomicRead(string) Ensures that a read operation for a file does not conflict with an AtomicWrite for the same file. public AtomicRead(string path) Parameters path string The path of the file that will be read. Examples using (new AtomicRead(filePath)) return File.ReadAllBytes(filePath); Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/NanoByte.Common.Storage.AtomicWrite.html": {
    "href": "api/NanoByte.Common.Storage.AtomicWrite.html",
    "title": "Class AtomicWrite | NanoByte.Common",
    "summary": "Class AtomicWrite Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Provides a temporary path to write to and atomically inserts it at the destination location on disposal (if Commit() was called). [MustDisposeResource] public sealed class AtomicWrite Inheritance object AtomicWrite Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Examples using (var atomic = new AtomicWrite(filePath)) { File.WriteAllBytes(atomic.WritePath, fileData); atomic.Commit(); } Constructors AtomicWrite(string) Prepares an atomic write operation. public AtomicWrite(string path) Parameters path string The file path of the final destination. Properties DestinationPath The file path of the final destination. public string DestinationPath { get; } Property Value string IsCommitted true if Commit() has been called. public bool IsCommitted { get; } Property Value bool WritePath The temporary file path to write to. public string WritePath { get; } Property Value string Methods Commit() Allows the new file to be deployed upon Dispose(). public void Commit() Dispose() Replaces DestinationPath with the contents of WritePath. public void Dispose() See Also AtomicRead"
  },
  "api/NanoByte.Common.Storage.BinaryStorage.html": {
    "href": "api/NanoByte.Common.Storage.BinaryStorage.html",
    "title": "Class BinaryStorage | NanoByte.Common",
    "summary": "Class BinaryStorage Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Provides easy serialization to binary files (optionally wrapped in ZIP archives). public static class BinaryStorage Inheritance object BinaryStorage Methods LoadBinary<T>(Stream) Loads an object from a binary file. public static T LoadBinary<T>(Stream stream) Parameters stream Stream The binary file to be loaded. Returns T The loaded object. Type Parameters T The type of object the binary stream shall be converted into. Exceptions InvalidDataException A problem occurred while deserializing the binary data. LoadBinary<T>(string) Loads an object from a binary file. public static T LoadBinary<T>(string path) Parameters path string The binary file to be loaded. Returns T The loaded object. Type Parameters T The type of object the binary stream shall be converted into. Remarks Uses see cref=\"AtomicRead\"/> internally. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing the binary data. SaveBinary<T>(T, Stream) Saves an object in a binary stream. public static void SaveBinary<T>(this T data, Stream stream) where T : notnull Parameters data T The object to be stored. stream Stream The binary file to be written. Type Parameters T The type of object to be saved in a binary stream. SaveBinary<T>(T, string) Saves an object in a binary file. public static void SaveBinary<T>(this T data, string path) where T : notnull Parameters data T The object to be stored. path string The binary file to be written. Type Parameters T The type of object to be saved in a binary stream. Remarks This method performs an atomic write operation when possible. Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted."
  },
  "api/NanoByte.Common.Storage.CopyDirectory.html": {
    "href": "api/NanoByte.Common.Storage.CopyDirectory.html",
    "title": "Class CopyDirectory | NanoByte.Common",
    "summary": "Class CopyDirectory Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Copies the content of a directory to a new location preserving file timestamps, symlinks and hard links. public class CopyDirectory : ReadDirectoryBase, ITask Inheritance object MarshalByRefObject TaskBase ReadDirectoryBase CopyDirectory Implements ITask Derived MoveDirectory Inherited Members ReadDirectoryBase.Source ReadDirectoryBase.FollowSymlinks TaskBase.Tag TaskBase.CanCancel TaskBase.PreventIdle TaskBase.CancellationToken TaskBase.CredentialProvider TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) TaskBase.State TaskBase.UnitsProcessed TaskBase.UnitsTotal Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors CopyDirectory(string, string) Copies the content of a directory to a new location preserving file timestamps, symlinks and hard links. public CopyDirectory(string sourcePath, string destinationPath) Parameters sourcePath string The path of source directory. Must exist! destinationPath string The path of the target directory. Properties Name A name describing the task in human-readable form. public override string Name { get; } Property Value string Overwrite Overwrite existing files and directories at the destination path. This will even replace read-only files! public bool Overwrite { get; init; } Property Value bool UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected override bool UnitsByte { get; } Property Value bool Methods CopyFile(FileInfo, FileInfo) Copies a single file from one location to another. Can be overridden to modify the copying behavior. protected virtual void CopyFile(FileInfo sourceFile, FileInfo destinationFile) Parameters sourceFile FileInfo destinationFile FileInfo Exceptions IOException A problem occurred while copying the file. UnauthorizedAccessException Read access to the sourceFile or write access to the destinationFile is not permitted. Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError. HandleDirectory(DirectoryInfo) Called once for every sub-directory below Source. protected override void HandleDirectory(DirectoryInfo directory) Parameters directory DirectoryInfo The directory to handle. HandleFile(FileInfo, FileInfo?) Called once for every file below Source. protected override void HandleFile(FileInfo file, FileInfo? hardlinkTarget = null) Parameters file FileInfo The file to handle. hardlinkTarget FileInfo A previously handled file that is hardlinked to file. May be null."
  },
  "api/NanoByte.Common.Storage.FileUtils.html": {
    "href": "api/NanoByte.Common.Storage.FileUtils.html",
    "title": "Class FileUtils | NanoByte.Common",
    "summary": "Class FileUtils Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Provides filesystem-related helper methods. public static class FileUtils Inheritance object FileUtils Methods AreHardlinked(string, string) Determines whether two files are hardlinked. public static bool AreHardlinked(string path1, string path2) Parameters path1 string The path of the first file. path2 string The path of the second file. Returns bool Exceptions IOException There was an IO problem checking the files. UnauthorizedAccessException You have insufficient rights to check the files. CanonicalizeAcl(ObjectSecurity) Fixes ACLs that are not canonical (not ordered correctly). public static void CanonicalizeAcl(this ObjectSecurity objectSecurity) Parameters objectSecurity ObjectSecurity Create(string, long) Creates or replaces a file. Pre-allocates the expected size of the file if possible. public static FileStream Create(string path, long expectedSize) Parameters path string The path of the file. expectedSize long The initial allocation size in bytes for the file. Returns FileStream A stream for writing the file. No read access. CreateHardlink(string, string) Creates a new hard link between two files. public static void CreateHardlink(string sourcePath, string targetPath) Parameters sourcePath string The path of the link to create. targetPath string The absolute path of the existing file to point to. Exceptions IOException Creating the hard link failed. UnauthorizedAccessException You have insufficient rights to create the hard link. PlatformNotSupportedException This method is called on a system with no hard link support. CreateSymlink(string, string) Creates a new symbolic link to a file or directory. public static void CreateSymlink(string sourcePath, string targetPath) Parameters sourcePath string The path of the link to create. targetPath string The path of the existing file or directory to point to (relative to sourcePath). Exceptions IOException Creating the symbolic link failed. UnauthorizedAccessException You have insufficient rights to create the symbolic link. PlatformNotSupportedException This method is called on a system with no symbolic link support. DetermineTimeAccuracy(string) Determines the accuracy with which the filesystem underlying a specific directory can store file-changed times. public static int DetermineTimeAccuracy(string path) Parameters path string The path of the directory to check. Returns int The accuracy in number of seconds. (i.e. 0 = perfect, 1 = may be off by up to one second) Exceptions DirectoryNotFoundException The specified directory doesn't exist. IOException Writing to the directory fails. UnauthorizedAccessException You have insufficient rights to write to the directory. DisableWriteProtection(string) Removes whatever means the current platform provides to prevent write access to a directory (read-only attribute, ACLs, Unix octals, etc.). public static void DisableWriteProtection(string path) Parameters path string The directory to unprotect. Remarks May do nothing if the platform doesn't provide any known protection mechanisms. Exceptions IOException There was a problem removing the write protection. UnauthorizedAccessException You have insufficient rights to remove the write protection. EnableWriteProtection(string) Uses the best means the current platform provides to prevent further write access to a directory (read-only attribute, ACLs, Unix octals, etc.). public static void EnableWriteProtection(string path) Parameters path string The directory to protect. Remarks May do nothing if the platform doesn't provide any known protection mechanisms. Exceptions IOException There was a problem applying the write protection. UnauthorizedAccessException You have insufficient rights to apply the write protection. ExistsCaseSensitive(string) Like System.IO.File.Exists(string) but case-sensitive, even on Windows. public static bool ExistsCaseSensitive(string path) Parameters path string Returns bool GetFileID(FileInfo) Returns the file ID (on Windows) or Inode (on Unix) of a file. public static long GetFileID(this FileInfo file) Parameters file FileInfo The file. Returns long Exceptions IOException There was an IO problem checking the files. UnauthorizedAccessException You have insufficient rights to check the files. GetFileID(string) Returns the file ID (on Windows) or Inode (on Unix) of a file. public static long GetFileID(string path) Parameters path string The path of the file. Returns long Exceptions IOException There was an IO problem checking the file. UnauthorizedAccessException You have insufficient rights to check the files. GetFilesRecursive(string, bool) Returns the full paths of all files in a directory and its subdirectories. public static IList<string> GetFilesRecursive(string path, bool followDirSymlinks = false) Parameters path string The path of the directory to search for files. followDirSymlinks bool If true recurse into directory symlinks. Returns IList<string> IsBreakoutPath(string?) Determines whether a path might escape its parent directory (by being absolute or using ..). [Pure] public static bool IsBreakoutPath(string? path) Parameters path string Returns bool IsExecutable(string) Checks whether a file is marked as Unix-executable. public static bool IsExecutable(string path) Parameters path string Returns bool true if path points to an executable; false otherwise. Remarks Will return false for non-existing files. Will always return false on non-Unixoid systems. Exceptions UnauthorizedAccessException You have insufficient rights to query the file's properties. IsRegularFile(string) Checks whether a file is a regular file (i.e. not a device file, symbolic link, etc.). public static bool IsRegularFile(string path) Parameters path string Returns bool true if path points to a regular file; false otherwise. Remarks Will return false for non-existing files. Exceptions UnauthorizedAccessException You have insufficient rights to query the file's properties. IsSymlink(FileSystemInfo, out string) Checks whether a file is a Unix symbolic link. public static bool IsSymlink(this FileSystemInfo item, out string target) Parameters item FileSystemInfo The file to check. target string Returns the target the symbolic link points to if it exists. Returns bool true if item points to a symbolic link; false otherwise. Exceptions IOException There was an IO problem reading the file. UnauthorizedAccessException Read access to the file was denied. IsSymlink(string) Checks whether a file is a symbolic link. public static bool IsSymlink(string path) Parameters path string The path of the file to check. Returns bool true if path points to a symbolic link; false otherwise. Exceptions IOException There was an IO problem reading the file. UnauthorizedAccessException Read access to the file was denied. IsSymlink(string, out string) Checks whether a file is a symbolic link. public static bool IsSymlink(string path, out string target) Parameters path string The path of the file to check. target string Returns the target the symbolic link points to if it exists. Returns bool true if path points to a symbolic link; false otherwise. Exceptions IOException There was an IO problem reading the file. UnauthorizedAccessException Read access to the file was denied. IsUnixFS(string) Checks whether a directory is located on a filesystem with support for Unixoid features such as executable bits. public static bool IsUnixFS(string path) Parameters path string Returns bool true if path points to directory on a Unixoid filesystem; false otherwise. Remarks Will always return false on non-Unixoid systems. Only requires read access on Linux to determine file system. Requires write access on other Unixes (e.g. MacOS X). Exceptions DirectoryNotFoundException The specified directory doesn't exist. IOException Checking the directory failed. UnauthorizedAccessException You have insufficient right to stat to the directory. PathEquals(string?, string?) Determines whether two file-system paths point to the same location. [Pure] public static bool PathEquals(string? path1, string? path2) Parameters path1 string path2 string Returns bool Remarks Applies path normalization. Does not resolve symlinks. Case-insensitive on Windows and macOS. ReadExtendedMetadata(string, string) Reads metadata from an NTFS Alternate Data Stream (Windows) or extended file attribute (Unixoid). public static byte[]? ReadExtendedMetadata(string path, string name) Parameters path string The path of the file the Alternate Data Stream is associated with. name string The name of the metadata stream. Returns byte[] The contents of the metadata stream; null if the file exists but the stream specified by name does not. Exceptions FileNotFoundException The file specified by path does not exist. IOException There was a problem reading the metadata stream. PlatformNotSupportedException The current operating system provides no method for storing extended metadata. ReadFirstLine(FileInfo, Encoding) Reads the first line of text from a file. public static string? ReadFirstLine(this FileInfo file, Encoding encoding) Parameters file FileInfo The file to read from. encoding Encoding The text encoding to use for reading. Returns string The first line of text in the file; null if decoding does not work on the contents. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. RelativeTo(FileSystemInfo, FileSystemInfo) Returns a relative path pointing to target from baseRef. [Pure] public static string RelativeTo(this FileSystemInfo target, FileSystemInfo baseRef) Parameters target FileSystemInfo baseRef FileSystemInfo Returns string Replace(string, string) Replaces one file with another. Rolls back in case of problems. If the destination file does not exist yet, this acts like a simple rename. public static void Replace(string sourcePath, string destinationPath) Parameters sourcePath string The path of source directory. destinationPath string The path of the target directory. Must reside on the same filesystem as sourcePath. Exceptions ArgumentException sourcePath and destinationPath are equal. IOException The file could not be replaced. UnauthorizedAccessException The read or write access to one of the files was denied. ResetAcl(DirectoryInfo) Removes any custom ACLs a user may have set, restores ACL inheritance and sets the Administrators group as the owner. public static void ResetAcl(this DirectoryInfo directory) Parameters directory DirectoryInfo SetExecutable(string, bool) Marks a file as Unix-executable or not Unix-executable. Only works on Unixoid systems! public static void SetExecutable(string path, bool executable) Parameters path string The file to mark as executable or not executable. executable bool true to mark the file as executable, true to mark it as not executable. Exceptions FileNotFoundException path points to a file that does not exist or cannot be accessed. UnauthorizedAccessException You have insufficient rights to change the file's properties. PlatformNotSupportedException This method is called on a non-Unixoid system. ToNativePath(string?) Replaces Unix-style directory slashes with System.IO.Path.DirectorySeparatorChar. [Pure] public static string? ToNativePath(this string? value) Parameters value string Returns string ToUnixPath(string?) Replaces System.IO.Path.DirectorySeparatorChar with Unix-style directory slashes. [Pure] public static string? ToUnixPath(this string? value) Parameters value string Returns string Touch(string) Sets the \"last modified\" timestamp for a file to now. Creates a new empty file if it does not exist yet. public static void Touch(string path) Parameters path string Exceptions IOException Creating the file or updating its timestamp failed. UnauthorizedAccessException You have insufficient rights to create the file or update its timestamp. Walk(FileSystemInfo, Action<DirectoryInfo>?, Action<FileInfo>?, bool) Walks a directory structure recursively and performs an action for every directory and file encountered. public static void Walk(this FileSystemInfo element, Action<DirectoryInfo>? dirAction = null, Action<FileInfo>? fileAction = null, bool followDirSymlinks = false) Parameters element FileSystemInfo The directory (or single file) to walk. dirAction Action<DirectoryInfo> The action to perform for every found directory (including the starting element); can be null. fileAction Action<FileInfo> The action to perform for every found file; can be null. followDirSymlinks bool If true recurse into directory symlinks; if false only execute dirAction for directory symlinks but do not recurse. WalkThroughPrefix(DirectoryInfo) Skips through any directories that only contain a single subdirectory and no files. public static DirectoryInfo WalkThroughPrefix(this DirectoryInfo directory) Parameters directory DirectoryInfo Returns DirectoryInfo Remarks Ignores files that start with a dot. WriteExtendedMetadata(string, string, byte[]) Writes metadata to an NTFS Alternate Data Stream (Windows) or extended file attribute (Unixoid). public static void WriteExtendedMetadata(string path, string name, byte[] data) Parameters path string The path of the file to associate the metadata with. name string The name of the metadata stream. data byte[] The data to write to the metadata stream. Exceptions FileNotFoundException The file specified by path does not exist. IOException There was a problem writing the metadata stream. UnauthorizedAccessException You have insufficient rights to write the metadata. PlatformNotSupportedException The current operating system provides no method for storing extended metadata."
  },
  "api/NanoByte.Common.Storage.JsonStorage.html": {
    "href": "api/NanoByte.Common.Storage.JsonStorage.html",
    "title": "Class JsonStorage | NanoByte.Common",
    "summary": "Class JsonStorage Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Provides easy serialization to JSON files. public static class JsonStorage Inheritance object JsonStorage Methods FromJsonString<T>(string) Loads an object from an JSON string. public static T FromJsonString<T>(string data) Parameters data string The JSON string to be parsed. Returns T The loaded object. Type Parameters T The type of object the JSON string shall be converted into. Exceptions InvalidDataException A problem occurred while deserializing the JSON data. FromJsonString<T>(string, T) Loads an object from an JSON string using an anonymous type as the target. public static T FromJsonString<T>(string data, T anonymousType) Parameters data string The JSON string to be parsed. anonymousType T An instance of the anonymous type to parse to. Returns T The deserialized object. Type Parameters T The type of object the JSON string shall be converted into. LoadJson<T>(Stream) Loads an object from an JSON file. public static T LoadJson<T>(Stream stream) Parameters stream Stream The stream to read the encoded JSON data from. Returns T The loaded object. Type Parameters T The type of object the JSON stream shall be converted into. Exceptions InvalidDataException A problem occurred while deserializing the JSON data. LoadJson<T>(string) Loads an object from an JSON file. public static T LoadJson<T>(string path) Parameters path string The path of the file to load. Returns T The loaded object. Type Parameters T The type of object the JSON stream shall be converted into. Remarks Uses AtomicRead internally. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing the JSON data. ReparseAsJson<T>(object) Reparses an object previously deserialized from JSON into a different representation. public static T ReparseAsJson<T>(this object data) Parameters data object The object to be parsed again. Returns T The deserialized object. Type Parameters T The type of object the data shall be converted into. ReparseAsJson<T>(object, T) Reparses an object previously deserialized from JSON into a different representation using an anonymous type as the target. public static T ReparseAsJson<T>(this object data, T anonymousType) Parameters data object The object to be parsed again. anonymousType T An instance of the anonymous type to parse to. Returns T The deserialized object. Type Parameters T The type of object the data shall be converted into. SaveJson<T>(T, Stream) Saves an object in an JSON stream. public static void SaveJson<T>(this T data, Stream stream) Parameters data T The object to be stored. stream Stream The stream to write the encoded JSON data to. Type Parameters T The type of object to be saved in an JSON stream. SaveJson<T>(T, string) Saves an object in an JSON file. public static void SaveJson<T>(this T data, string path) where T : notnull Parameters data T The object to be stored. path string The path of the file to write. Type Parameters T The type of object to be saved in an JSON stream. Remarks This method performs an atomic write operation when possible. Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. ToJsonString<T>(T) Returns an object as an JSON string. public static string ToJsonString<T>(this T data) where T : notnull Parameters data T The object to be stored. Returns string A string containing the JSON code. Type Parameters T The type of object to be saved in an JSON string."
  },
  "api/NanoByte.Common.Storage.Locations.html": {
    "href": "api/NanoByte.Common.Storage.Locations.html",
    "title": "Class Locations | NanoByte.Common",
    "summary": "Class Locations Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Provides easy access to platform-specific common directories for storing settings and application data. public static class Locations Inheritance object Locations Remarks Uses System.Environment.SpecialFolder on Windows and the freedesktop.org basedir spec (XDG) on Linux. See http://freedesktop.org/wiki/Standards/basedir-spec Fields PortableFlagName The name of the flag file whose existence determines whether IsPortable is set to true. public const string PortableFlagName = \"_portable\" Field Value string Properties HomeDir The home/profile directory of the current user. public static string HomeDir { get; } Property Value string InstallBase The directory the application binaries are located in. public static string InstallBase { get; } Property Value string Remarks Uses the location of the NanoByte.Common DLL, not the calling EXE. Walks up one directory level if placed within a dir called \"lib\". Works with ngened and shadow copied assemblies. Does not work with GACed assemblies. IsPortable Indicates whether the application is currently operating in portable mode. public static bool IsPortable { get; } Property Value bool Remarks Portable mode is activated by placing a file named PortableFlagName in InstallBase. When portable mode is active files are stored and loaded from PortableBase instead of the user profile and system directories. PortableBase The directory used for storing files if IsPortable is true. public static string PortableBase { get; } Property Value string SystemCacheDir The directory to store machine-wide non-essential data. public static string SystemCacheDir { get; } Property Value string Remarks On Windows this is CommonApplicationData, on Linux it is /var/cache. SystemConfigDirs The directories to store machine-wide settings. public static string SystemConfigDirs { get; } Property Value string Directories separated by System.IO.Path.PathSeparator sorted by decreasing importance. Remarks On Windows this is CommonApplicationData, on Linux it usually is /etc/xdg. SystemDataDirs The directories to store machine-wide data files (should not roam across different machines). public static string SystemDataDirs { get; } Property Value string Directories separated by System.IO.Path.PathSeparator sorted by decreasing importance. Remarks On Windows this is CommonApplicationData, on Linux it usually is /usr/local/share:/usr/share. UserCacheDir The directory to store per-user non-essential data (should not roam across different machines). public static string UserCacheDir { get; } Property Value string Remarks On Windows this is %localappdata%, on Linux it usually is ~/.cache. UserConfigDir The directory to store per-user settings (can roam across different machines). public static string UserConfigDir { get; } Property Value string Remarks On Windows this is %appdata%, on Linux it usually is ~/.config. UserDataDir The directory to store per-user data files (should not roam across different machines). public static string UserDataDir { get; } Property Value string Remarks On Windows this is %localappdata%, on Linux it usually is ~/.local/share. Methods GetCacheDirPath(string, bool, params string[]) Returns a path for a cache directory (should not roam across different machines). public static string GetCacheDirPath(string appName, bool machineWide, params string[] resource) Parameters appName string The name of application. Used as part of the path, unless IsPortable is true. machineWide bool true if the directory should be machine-wide. resource string[] The directory name of the resource to be stored. Returns string A fully qualified directory path. The directory is guaranteed to already exist. Exceptions IOException A problem occurred while creating a directory. UnauthorizedAccessException Creating a directory is not permitted. GetInstalledFilePath(string) Tries to locate a file either in InstallBase, the location of the NanoByte.Common.dll or in the PATH. public static string GetInstalledFilePath(string fileName) Parameters fileName string The file name of the file to search for. Returns string The fully qualified path of the first located instance of the file. Exceptions IOException The file could not be found. GetLoadConfigPaths(string, bool, params string[]) Returns a list of paths for loading a configuration resource. public static IEnumerable<string> GetLoadConfigPaths(string appName, bool isFile, params string[] resource) Parameters appName string The name of application. Used as part of the path, unless IsPortable is true. isFile bool true if the last part of resource refers to a file instead of a directory. resource string[] The path elements (directory and/or file names) of the resource to be loaded. Returns IEnumerable<string> A list of fully qualified paths to use to load the resource sorted by decreasing importance. This list will always reflect the current state in the filesystem and can not be modified! It may be empty. GetLoadDataPaths(string, bool, params string[]) Returns a list of paths for loading a data resource (should not roam across different machines). public static IEnumerable<string> GetLoadDataPaths(string appName, bool isFile, params string[] resource) Parameters appName string The name of application. Used as part of the path, unless IsPortable is true. isFile bool true if the last part of resource refers to a file instead of a directory. resource string[] The path elements (directory and/or file names) of the resource to be loaded. Returns IEnumerable<string> A list of fully qualified paths to use to load the resource sorted by decreasing importance. This list will always reflect the current state in the filesystem and can not be modified! It may be empty. GetSaveConfigPath(string, bool, params string[]) Returns a path for storing a configuration resource (can roam across different machines). public static string GetSaveConfigPath(string appName, bool isFile, params string[] resource) Parameters appName string The name of application. Used as part of the path, unless IsPortable is true. isFile bool true if the last part of resource refers to a file instead of a directory. resource string[] The path elements (directory and/or file names) of the resource to be stored. Returns string A fully qualified path to use to store the resource. Directories are guaranteed to already exist; files are not. Exceptions IOException A problem occurred while creating a directory. UnauthorizedAccessException Creating a directory is not permitted. GetSaveDataPath(string, bool, params string[]) Returns a path for storing a data resource (should not roam across different machines). public static string GetSaveDataPath(string appName, bool isFile, params string[] resource) Parameters appName string The name of application. Used as part of the path, unless IsPortable is true. isFile bool true if the last part of resource refers to a file instead of a directory. resource string[] The path elements (directory and/or file names) of the resource to be stored. Returns string A fully qualified path to use to store the resource. Directories are guaranteed to already exist; files are not. Exceptions IOException A problem occurred while creating a directory. UnauthorizedAccessException Creating a directory is not permitted. GetSaveSystemConfigPath(string, bool, params string[]) Returns a path for storing a system-wide configuration resource. public static string GetSaveSystemConfigPath(string appName, bool isFile, params string[] resource) Parameters appName string The name of application. Used as part of the path, unless IsPortable is true. isFile bool true if the last part of resource refers to a file instead of a directory. resource string[] The path elements (directory and/or file names) of the resource to be stored. Returns string A fully qualified path to use to store the resource. Directories are guaranteed to already exist; files are not. Exceptions IOException A problem occurred while creating a directory. UnauthorizedAccessException Creating a directory is not permitted. OverrideInstallBase(string) Override the automatically determined InstallBase with a custom path. public static void OverrideInstallBase(string path) Parameters path string Remarks Use with caution. Be aware of possible race conditions. Intended for unit testing, runtime relocation, etc.. Redirect(string) Temporarily overrides IsPortable and PortableBase for the current thread or async flow. Useful for unit tests. [MustDisposeResource] public static IDisposable Redirect(string path) Parameters path string The PortableBase value to set. Returns IDisposable Call System.IDisposable.Dispose() to restore the original values of IsPortable and PortableBase. Exceptions InvalidOperationException This method has already been called on this thread."
  },
  "api/NanoByte.Common.Storage.MoveDirectory.html": {
    "href": "api/NanoByte.Common.Storage.MoveDirectory.html",
    "title": "Class MoveDirectory | NanoByte.Common",
    "summary": "Class MoveDirectory Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Moves the content of a directory to a new location preserving file timestamps, symlinks and hard links. public class MoveDirectory : CopyDirectory, ITask Inheritance object MarshalByRefObject TaskBase ReadDirectoryBase CopyDirectory MoveDirectory Implements ITask Inherited Members CopyDirectory.Name CopyDirectory.UnitsByte CopyDirectory.Overwrite CopyDirectory.HandleDirectory(DirectoryInfo) CopyDirectory.HandleFile(FileInfo, FileInfo) ReadDirectoryBase.Source ReadDirectoryBase.FollowSymlinks TaskBase.Tag TaskBase.CanCancel TaskBase.PreventIdle TaskBase.CancellationToken TaskBase.CredentialProvider TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) TaskBase.State TaskBase.UnitsProcessed TaskBase.UnitsTotal Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors MoveDirectory(string, string) Moves the content of a directory to a new location preserving file timestamps, symlinks and hard links. public MoveDirectory(string sourcePath, string destinationPath) Parameters sourcePath string The path of source directory. Must exist! destinationPath string The path of the target directory. May exist. Methods CopyFile(FileInfo, FileInfo) Copies a single file from one location to another. Can be overridden to modify the copying behavior. protected override void CopyFile(FileInfo sourceFile, FileInfo destinationFile) Parameters sourceFile FileInfo destinationFile FileInfo Exceptions IOException A problem occurred while copying the file. UnauthorizedAccessException Read access to the sourceFile or write access to the destinationFile is not permitted. Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Storage.Paths.html": {
    "href": "api/NanoByte.Common.Storage.Paths.html",
    "title": "Class Paths | NanoByte.Common",
    "summary": "Class Paths Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Helper methods for resolving file system paths. public static class Paths Inheritance object Paths Methods ResolveFiles(IEnumerable<string>, string) Resolves paths to absolute file paths with wildcard support. public static IList<FileInfo> ResolveFiles(IEnumerable<string> paths, string defaultPattern = \"*\") Parameters paths IEnumerable<string> The paths to resolve. defaultPattern string The default pattern to use for finding files when a directory is specified. Returns IList<FileInfo> Handles to all matching files that were found Remarks paths are first interpreted as files, then as directories. Directories are searched using the defaultPattern. * and ? characters are considered as wildcards. Exceptions FileNotFoundException A file that was explicitly specified in paths (no wildcards) could not be found."
  },
  "api/NanoByte.Common.Storage.ReadDirectoryBase.html": {
    "href": "api/NanoByte.Common.Storage.ReadDirectoryBase.html",
    "title": "Class ReadDirectoryBase | NanoByte.Common",
    "summary": "Class ReadDirectoryBase Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Recursively iterates over all elements in a directory. public abstract class ReadDirectoryBase : TaskBase, ITask Inheritance object MarshalByRefObject TaskBase ReadDirectoryBase Implements ITask Derived CopyDirectory Inherited Members TaskBase.Name TaskBase.Tag TaskBase.CanCancel TaskBase.PreventIdle TaskBase.CancellationToken TaskBase.CredentialProvider TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) TaskBase.State TaskBase.UnitsProcessed TaskBase.UnitsTotal Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ReadDirectoryBase(string) Recursively iterates over all elements in a directory. protected ReadDirectoryBase(string path) Parameters path string The path of the directory to read. Fields Source The directory to read. protected readonly DirectoryInfo Source Field Value DirectoryInfo Properties FollowSymlinks Controls whether to follow symlinks. public bool FollowSymlinks { get; init; } Property Value bool UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected override bool UnitsByte { get; } Property Value bool Methods Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError. HandleDirectory(DirectoryInfo) Called once for every sub-directory below Source. protected abstract void HandleDirectory(DirectoryInfo directory) Parameters directory DirectoryInfo The directory to handle. HandleFile(FileInfo, FileInfo?) Called once for every file below Source. protected abstract void HandleFile(FileInfo file, FileInfo? hardlinkTarget = null) Parameters file FileInfo The file to handle. hardlinkTarget FileInfo A previously handled file that is hardlinked to file. May be null."
  },
  "api/NanoByte.Common.Storage.ReadFile.html": {
    "href": "api/NanoByte.Common.Storage.ReadFile.html",
    "title": "Class ReadFile | NanoByte.Common",
    "summary": "Class ReadFile Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Reads a file from disk to a stream. public sealed class ReadFile : TaskBase, ITask Inheritance object MarshalByRefObject TaskBase ReadFile Implements ITask Inherited Members TaskBase.Tag TaskBase.CanCancel TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ReadFile(string, Action<Stream>, string?) Reads a file from disk to a stream. public ReadFile(string path, Action<Stream> callback, string? name = null) Parameters path string The path of the file to read. callback Action<Stream> Called with a stream providing the file content. name string A name describing the task in human-readable form. Properties Name A name describing the task in human-readable form. public override string Name { get; } Property Value string UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected override bool UnitsByte { get; } Property Value bool Methods Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Storage.TemporaryDirectory.html": {
    "href": "api/NanoByte.Common.Storage.TemporaryDirectory.html",
    "title": "Class TemporaryDirectory | NanoByte.Common",
    "summary": "Class TemporaryDirectory Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Represents a temporary directory that is automatically deleted when the object is disposed. [MustDisposeResource] public class TemporaryDirectory Inheritance object TemporaryDirectory Derived TemporaryFlagFile TemporaryWorkingDirectory Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors TemporaryDirectory(string, string?) Creates a uniquely named, empty temporary directory on disk. public TemporaryDirectory(string prefix, string? parentDirectory = null) Parameters prefix string A short string the directory name should start with. parentDirectory string The path of the parent directory the new directory should be created in. Leave null to use the default temp directory. Exceptions IOException A problem occurred while creating the temporary directory. UnauthorizedAccessException Creating a directory in System.IO.Path.GetTempPath() is not permitted. Properties Path The fully qualified path of the temporary directory. public string Path { get; } Property Value string Methods Dispose() Deletes the temporary directory. public virtual void Dispose() ToString() Returns Path. public override string ToString() Returns string Operators implicit operator string(TemporaryDirectory) public static implicit operator string(TemporaryDirectory dir) Parameters dir TemporaryDirectory Returns string"
  },
  "api/NanoByte.Common.Storage.TemporaryFile.html": {
    "href": "api/NanoByte.Common.Storage.TemporaryFile.html",
    "title": "Class TemporaryFile | NanoByte.Common",
    "summary": "Class TemporaryFile Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Represents a temporary file that is automatically deleted when the object is disposed. [MustDisposeResource] public class TemporaryFile Inheritance object TemporaryFile Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors TemporaryFile(string, string?) Creates a uniquely named, empty temporary file on disk. public TemporaryFile(string prefix, string? parentDirectory = null) Parameters prefix string A short string the directory name should start with. parentDirectory string The path of the directory the file should be created in. Leave null to use the default temp directory. Exceptions IOException A problem occurred while creating the temporary file. UnauthorizedAccessException Creating a file in System.IO.Path.GetTempPath() is not permitted. Properties Path The fully qualified path of the temporary file. public string Path { get; } Property Value string Methods Dispose() Deletes the temporary file. public virtual void Dispose() ToString() Returns Path. public override string ToString() Returns string Operators implicit operator string(TemporaryFile) public static implicit operator string(TemporaryFile file) Parameters file TemporaryFile Returns string"
  },
  "api/NanoByte.Common.Storage.TemporaryFlagFile.html": {
    "href": "api/NanoByte.Common.Storage.TemporaryFlagFile.html",
    "title": "Class TemporaryFlagFile | NanoByte.Common",
    "summary": "Class TemporaryFlagFile Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll A temporary directory with a file that may or may not exist to indicate whether a certain condition is true or false. public class TemporaryFlagFile : TemporaryDirectory Inheritance object TemporaryDirectory TemporaryFlagFile Inherited Members TemporaryDirectory.Dispose() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors TemporaryFlagFile(string) A temporary directory with a file that may or may not exist to indicate whether a certain condition is true or false. public TemporaryFlagFile(string prefix) Parameters prefix string Properties Path The fully qualified path of the flag file. public string Path { get; } Property Value string Set Indicates or controls whether the file exists. public bool Set { get; set; } Property Value bool Methods ToString() Returns Path. public override string ToString() Returns string Operators implicit operator string(TemporaryFlagFile) public static implicit operator string(TemporaryFlagFile file) Parameters file TemporaryFlagFile Returns string"
  },
  "api/NanoByte.Common.Storage.TemporaryWorkingDirectory.html": {
    "href": "api/NanoByte.Common.Storage.TemporaryWorkingDirectory.html",
    "title": "Class TemporaryWorkingDirectory | NanoByte.Common",
    "summary": "Class TemporaryWorkingDirectory Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Like TemporaryDirectory but also sets the current working directory to Path. public sealed class TemporaryWorkingDirectory : TemporaryDirectory Inheritance object TemporaryDirectory TemporaryWorkingDirectory Inherited Members TemporaryDirectory.Path TemporaryDirectory.ToString() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors TemporaryWorkingDirectory(string) public TemporaryWorkingDirectory(string prefix) Parameters prefix string Methods Dispose() Deletes the temporary directory. public override void Dispose()"
  },
  "api/NanoByte.Common.Storage.WorkingDirectory.html": {
    "href": "api/NanoByte.Common.Storage.WorkingDirectory.html",
    "title": "Class WorkingDirectory | NanoByte.Common",
    "summary": "Class WorkingDirectory Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Changes the current working working directory until the object is disposed. [MustDisposeResource] public sealed class WorkingDirectory Inheritance object WorkingDirectory Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors WorkingDirectory(string) Changes the current working directory to path. public WorkingDirectory(string path) Parameters path string Methods Dispose() Restores the previous working directory. public void Dispose()"
  },
  "api/NanoByte.Common.Storage.XmlNamespaceAttribute.html": {
    "href": "api/NanoByte.Common.Storage.XmlNamespaceAttribute.html",
    "title": "Class XmlNamespaceAttribute | NanoByte.Common",
    "summary": "Class XmlNamespaceAttribute Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Allows you to specify a System.Xml.XmlQualifiedName (namespace short-name) for XmlStorage to use. [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class XmlNamespaceAttribute : Attribute Inheritance object Attribute XmlNamespaceAttribute Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors XmlNamespaceAttribute(string, string) Specified a System.Xml.XmlQualifiedName (namespace short-name) for XmlStorage to use. public XmlNamespaceAttribute(string name, string ns) Parameters name string The short-name. ns string The full namespace URI. Properties QualifiedName The System.Xml.XmlQualifiedName. public XmlQualifiedName QualifiedName { get; } Property Value XmlQualifiedName"
  },
  "api/NanoByte.Common.Storage.XmlStorage.html": {
    "href": "api/NanoByte.Common.Storage.XmlStorage.html",
    "title": "Class XmlStorage | NanoByte.Common",
    "summary": "Class XmlStorage Namespace NanoByte.Common.Storage Assembly NanoByte.Common.dll Provides easy serialization to XML files. public static class XmlStorage Inheritance object XmlStorage Fields XsiNamespace The XML namespace used for XML Schema instance. public const string XsiNamespace = \"http://www.w3.org/2001/XMLSchema-instance\" Field Value string Properties Overrides Global overrides for XML serialization. public static XmlAttributeOverrides? Overrides { get; set; } Property Value XmlAttributeOverrides Remarks Changing this value or its properties is not thread-safe. When set to a non-null value, pre-generated XML serialization assemblies (sgen) are not used. Methods FromXmlString<T>(string) Loads an object from an XML string. public static T FromXmlString<T>(string data) Parameters data string The XML string to be parsed. Returns T The loaded object. Type Parameters T The type of object the XML string shall be converted into. Exceptions InvalidDataException A problem occurred while deserializing the XML data. LoadXml<T>(Stream) Loads an object from an XML file. public static T LoadXml<T>(Stream stream) Parameters stream Stream The stream to read the encoded XML data from. Returns T The loaded object. Type Parameters T The type of object the XML stream shall be converted into. Exceptions InvalidDataException A problem occurred while deserializing the XML data. LoadXml<T>(string) Loads an object from an XML file. public static T LoadXml<T>(string path) Parameters path string The path of the file to load. Returns T The loaded object. Type Parameters T The type of object the XML stream shall be converted into. Remarks Uses AtomicRead internally. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing the XML data. SaveXml<T>(T, Stream, string?) Saves an object in an XML stream ending with a line break. public static void SaveXml<T>(this T data, Stream stream, string? stylesheet = null) where T : notnull Parameters data T The object to be stored. stream Stream The stream to write the encoded XML data to. stylesheet string The path of an XSL stylesheet; can be null. Type Parameters T SaveXml<T>(T, string, string?) Saves an object in an XML file ending with a line break. public static void SaveXml<T>(this T data, string path, string? stylesheet = null) where T : notnull Parameters data T The object to be stored. path string The path of the file to write. stylesheet string The path of an XSL stylesheet for T; can be null. Type Parameters T The type of object to be saved in an XML stream. Remarks This method performs an atomic write operation when possible. Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. ToXmlString<T>(T, string?) Returns an object as an XML string ending with a line break. public static string ToXmlString<T>(this T data, string? stylesheet = null) where T : notnull Parameters data T The object to be stored. stylesheet string The path of an XSL stylesheet; can be null. Returns string A string containing the XML code. Type Parameters T"
  },
  "api/NanoByte.Common.Storage.html": {
    "href": "api/NanoByte.Common.Storage.html",
    "title": "Namespace NanoByte.Common.Storage | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Storage File system access and serialization. Classes AtomicRead Ensures that a read operation for a file does not conflict with an AtomicWrite for the same file. AtomicWrite Provides a temporary path to write to and atomically inserts it at the destination location on disposal (if Commit() was called). BinaryStorage Provides easy serialization to binary files (optionally wrapped in ZIP archives). CopyDirectory Copies the content of a directory to a new location preserving file timestamps, symlinks and hard links. FileUtils Provides filesystem-related helper methods. JsonStorage Provides easy serialization to JSON files. Locations Provides easy access to platform-specific common directories for storing settings and application data. MoveDirectory Moves the content of a directory to a new location preserving file timestamps, symlinks and hard links. Paths Helper methods for resolving file system paths. ReadDirectoryBase Recursively iterates over all elements in a directory. ReadFile Reads a file from disk to a stream. TemporaryDirectory Represents a temporary directory that is automatically deleted when the object is disposed. TemporaryFile Represents a temporary file that is automatically deleted when the object is disposed. TemporaryFlagFile A temporary directory with a file that may or may not exist to indicate whether a certain condition is true or false. TemporaryWorkingDirectory Like TemporaryDirectory but also sets the current working directory to Path. WorkingDirectory Changes the current working working directory until the object is disposed. XmlNamespaceAttribute Allows you to specify a System.Xml.XmlQualifiedName (namespace short-name) for XmlStorage to use. XmlStorage Provides easy serialization to XML files."
  },
  "api/NanoByte.Common.Streams.DelegatingStream.html": {
    "href": "api/NanoByte.Common.Streams.DelegatingStream.html",
    "title": "Class DelegatingStream | NanoByte.Common",
    "summary": "Class DelegatingStream Namespace NanoByte.Common.Streams Assembly NanoByte.Common.dll Forwards all requests to another System.IO.Streams. Useful as a base class for decorators/wrappers. public abstract class DelegatingStream : Stream Inheritance object MarshalByRefObject Stream DelegatingStream Derived NonSeekableStream OffsetStream ProgressStream SeekBufferStream ShadowingStream Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) StreamUtils.AsArray(Stream) StreamUtils.CopyToEx(Stream, Stream) StreamUtils.CopyToFile(Stream, string) StreamUtils.Read(Stream, ArraySegment<byte>) StreamUtils.Read(Stream, int) StreamUtils.ReadAll(Stream) StreamUtils.ReadToString(Stream, Encoding?) StreamUtils.Skip(Stream, int) StreamUtils.ToMemory(Stream) StreamUtils.TryRead(Stream, int) StreamUtils.WithLength(Stream, long) StreamUtils.WithSeekBuffer(Stream, int) StreamUtils.Write(Stream, ArraySegment<byte>) StreamUtils.Write(Stream, params byte[]) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors DelegatingStream(Stream) Forwards all requests to another System.IO.Streams. Useful as a base class for decorators/wrappers. protected DelegatingStream(Stream underlyingStream) Parameters underlyingStream Stream Underlying stream to delegate to. Will be disposed together with this stream. Fields UnderlyingStream Underlying stream to delegate to. protected readonly Stream UnderlyingStream Field Value Stream Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanTimeout Gets a value that determines whether the current stream can time out. public override bool CanTimeout { get; } Property Value bool A value that determines whether the current stream can time out. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Length When overridden in a derived class, gets the length in bytes of the stream. public override long Length { get; } Property Value long A long value representing the length of the stream in bytes. Exceptions NotSupportedException A class derived from Stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Position When overridden in a derived class, gets or sets the position within the current stream. public override long Position { get; set; } Property Value long The current position within the stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. ReadTimeout Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out. public override int ReadTimeout { get; } Property Value int A value, in miliseconds, that determines how long the stream will attempt to read before timing out. Exceptions InvalidOperationException The System.IO.Stream.ReadTimeout method always throws an System.InvalidOperationException. WriteTimeout Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out. public override int WriteTimeout { get; } Property Value int A value, in miliseconds, that determines how long the stream will attempt to write before timing out. Exceptions InvalidOperationException The System.IO.Stream.WriteTimeout method always throws an System.InvalidOperationException. Methods Dispose(bool) Releases the unmanaged resources used by the System.IO.Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public override void Flush() Exceptions IOException An I/O error occurs. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None. Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write the data into. offset int The byte offset in buffer at which to begin writing data from the stream. count int The maximum number of bytes to read. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None. Returns Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type System.IO.SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. This method copies count bytes from buffer to the current stream. offset int The zero-based byte offset in buffer at which to begin copying bytes to the current stream. count int The number of bytes to be written to the current stream. Exceptions ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occured, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException System.IO.Stream.Write(byte[], int, int) was called after the stream was closed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation."
  },
  "api/NanoByte.Common.Streams.NonSeekableStream.html": {
    "href": "api/NanoByte.Common.Streams.NonSeekableStream.html",
    "title": "Class NonSeekableStream | NanoByte.Common",
    "summary": "Class NonSeekableStream Namespace NanoByte.Common.Streams Assembly NanoByte.Common.dll Decorator that prevents a stream from being seeked. public class NonSeekableStream : DelegatingStream Inheritance object MarshalByRefObject Stream DelegatingStream NonSeekableStream Inherited Members DelegatingStream.UnderlyingStream DelegatingStream.CanRead DelegatingStream.CanWrite DelegatingStream.Length DelegatingStream.CanTimeout DelegatingStream.ReadTimeout DelegatingStream.WriteTimeout DelegatingStream.Flush() DelegatingStream.SetLength(long) DelegatingStream.Read(byte[], int, int) DelegatingStream.Write(byte[], int, int) DelegatingStream.FlushAsync(CancellationToken) DelegatingStream.ReadAsync(byte[], int, int, CancellationToken) DelegatingStream.WriteAsync(byte[], int, int, CancellationToken) DelegatingStream.Dispose(bool) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) StreamUtils.AsArray(Stream) StreamUtils.CopyToEx(Stream, Stream) StreamUtils.CopyToFile(Stream, string) StreamUtils.Read(Stream, ArraySegment<byte>) StreamUtils.Read(Stream, int) StreamUtils.ReadAll(Stream) StreamUtils.ReadToString(Stream, Encoding?) StreamUtils.Skip(Stream, int) StreamUtils.ToMemory(Stream) StreamUtils.TryRead(Stream, int) StreamUtils.WithLength(Stream, long) StreamUtils.WithSeekBuffer(Stream, int) StreamUtils.Write(Stream, ArraySegment<byte>) StreamUtils.Write(Stream, params byte[]) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors NonSeekableStream(Stream) Decorator that prevents a stream from being seeked. public NonSeekableStream(Stream underlyingStream) Parameters underlyingStream Stream Underlying stream to delegate to. Will be disposed together with this stream. Properties CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. Position When overridden in a derived class, gets or sets the position within the current stream. public override long Position { get; set; } Property Value long The current position within the stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type System.IO.SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed."
  },
  "api/NanoByte.Common.Streams.OffsetStream.html": {
    "href": "api/NanoByte.Common.Streams.OffsetStream.html",
    "title": "Class OffsetStream | NanoByte.Common",
    "summary": "Class OffsetStream Namespace NanoByte.Common.Streams Assembly NanoByte.Common.dll Decorator that transparently applies an offset to another System.IO.Stream. public sealed class OffsetStream : DelegatingStream Inheritance object MarshalByRefObject Stream DelegatingStream OffsetStream Inherited Members DelegatingStream.CanRead DelegatingStream.CanSeek DelegatingStream.CanWrite DelegatingStream.CanTimeout DelegatingStream.ReadTimeout DelegatingStream.WriteTimeout DelegatingStream.Flush() DelegatingStream.Read(byte[], int, int) DelegatingStream.Write(byte[], int, int) DelegatingStream.FlushAsync(CancellationToken) DelegatingStream.ReadAsync(byte[], int, int, CancellationToken) DelegatingStream.WriteAsync(byte[], int, int, CancellationToken) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) StreamUtils.AsArray(Stream) StreamUtils.CopyToEx(Stream, Stream) StreamUtils.CopyToFile(Stream, string) StreamUtils.Read(Stream, ArraySegment<byte>) StreamUtils.Read(Stream, int) StreamUtils.ReadAll(Stream) StreamUtils.ReadToString(Stream, Encoding?) StreamUtils.Skip(Stream, int) StreamUtils.ToMemory(Stream) StreamUtils.TryRead(Stream, int) StreamUtils.WithLength(Stream, long) StreamUtils.WithSeekBuffer(Stream, int) StreamUtils.Write(Stream, ArraySegment<byte>) StreamUtils.Write(Stream, params byte[]) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors OffsetStream(Stream) Decorator that transparently applies an offset to another System.IO.Stream. public OffsetStream(Stream underlyingStream) Parameters underlyingStream Stream Underlying stream to delegate to. Will be disposed together with this stream. Properties Length When overridden in a derived class, gets the length in bytes of the stream. public override long Length { get; } Property Value long A long value representing the length of the stream in bytes. Exceptions NotSupportedException A class derived from Stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Position When overridden in a derived class, gets or sets the position within the current stream. public override long Position { get; set; } Property Value long The current position within the stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods ApplyOffset(int) Applies an offset to the underlying stream. public void ApplyOffset(int offset) Parameters offset int The number of bytes to offset by. Must not be negative. Exceptions IOException The underlying stream was shorter than the specified offset. Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type System.IO.SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed."
  },
  "api/NanoByte.Common.Streams.ProgressStream.html": {
    "href": "api/NanoByte.Common.Streams.ProgressStream.html",
    "title": "Class ProgressStream | NanoByte.Common",
    "summary": "Class ProgressStream Namespace NanoByte.Common.Streams Assembly NanoByte.Common.dll Decorator that adds progress-tracking and cancellation to another System.IO.Stream. public sealed class ProgressStream : DelegatingStream Inheritance object MarshalByRefObject Stream DelegatingStream ProgressStream Inherited Members DelegatingStream.CanRead DelegatingStream.CanSeek DelegatingStream.CanWrite DelegatingStream.CanTimeout DelegatingStream.ReadTimeout DelegatingStream.WriteTimeout DelegatingStream.Position DelegatingStream.Flush() DelegatingStream.Seek(long, SeekOrigin) DelegatingStream.FlushAsync(CancellationToken) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) StreamUtils.AsArray(Stream) StreamUtils.CopyToEx(Stream, Stream) StreamUtils.CopyToFile(Stream, string) StreamUtils.Read(Stream, ArraySegment<byte>) StreamUtils.Read(Stream, int) StreamUtils.ReadAll(Stream) StreamUtils.ReadToString(Stream, Encoding?) StreamUtils.Skip(Stream, int) StreamUtils.ToMemory(Stream) StreamUtils.TryRead(Stream, int) StreamUtils.WithLength(Stream, long) StreamUtils.WithSeekBuffer(Stream, int) StreamUtils.Write(Stream, ArraySegment<byte>) StreamUtils.Write(Stream, params byte[]) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ProgressStream(Stream, IProgress<long>?, CancellationToken) Decorator that adds progress-tracking and cancellation to another System.IO.Stream. public ProgressStream(Stream underlyingStream, IProgress<long>? progress = null, CancellationToken cancellationToken = default) Parameters underlyingStream Stream Underlying stream to delegate to. Will be disposed together with this stream. progress IProgress<long> Used to report back the number of bytes that have been read or written. cancellationToken CancellationToken Used to signal when the user wants to cancel the stream. If signaled read an write requests will start throwing System.OperationCanceledException. Properties Length The length of the underlying stream if System.IO.Stream.CanSeek is true. Otherwise, the number of bytes read or written so far. This value can also be overriden by SetLength(long). public override long Length { get; } Property Value long Methods Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken ct) Parameters buffer byte[] The buffer to write the data into. offset int The byte offset in buffer at which to begin writing data from the stream. count int The maximum number of bytes to read. ct CancellationToken Returns Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. SetLength(long) Overrides the value returned by Length. Does not affect the underlying stream. public override void SetLength(long value) Parameters value long Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. This method copies count bytes from buffer to the current stream. offset int The zero-based byte offset in buffer at which to begin copying bytes to the current stream. count int The number of bytes to be written to the current stream. Exceptions ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occured, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException System.IO.Stream.Write(byte[], int, int) was called after the stream was closed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken ct) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. ct CancellationToken Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation."
  },
  "api/NanoByte.Common.Streams.ReadStream.html": {
    "href": "api/NanoByte.Common.Streams.ReadStream.html",
    "title": "Class ReadStream | NanoByte.Common",
    "summary": "Class ReadStream Namespace NanoByte.Common.Streams Assembly NanoByte.Common.dll Reads the contents of a stream. public class ReadStream : TaskBase, ITask Inheritance object MarshalByRefObject TaskBase ReadStream Implements ITask Inherited Members TaskBase.Tag TaskBase.CanCancel TaskBase.PreventIdle TaskBase.CancellationToken TaskBase.CredentialProvider TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) TaskBase.State TaskBase.UnitsProcessed TaskBase.UnitsTotal Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ReadStream(string, Stream, Action<Stream>) Reads the contents of a stream. public ReadStream(string name, Stream stream, Action<Stream> callback) Parameters name string A name describing the task in human-readable form. stream Stream The stream to read. callback Action<Stream> Called with a ProgressStream wrapped around the stream. Properties Name A name describing the task in human-readable form. public override string Name { get; } Property Value string UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected override bool UnitsByte { get; } Property Value bool Methods Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Streams.SeekBufferStream.html": {
    "href": "api/NanoByte.Common.Streams.SeekBufferStream.html",
    "title": "Class SeekBufferStream | NanoByte.Common",
    "summary": "Class SeekBufferStream Namespace NanoByte.Common.Streams Assembly NanoByte.Common.dll Decorator that adds seek buffering to another System.IO.Stream. public sealed class SeekBufferStream : DelegatingStream Inheritance object MarshalByRefObject Stream DelegatingStream SeekBufferStream Inherited Members DelegatingStream.CanRead DelegatingStream.CanWrite DelegatingStream.Length DelegatingStream.CanTimeout DelegatingStream.ReadTimeout DelegatingStream.WriteTimeout DelegatingStream.Flush() DelegatingStream.SetLength(long) DelegatingStream.Write(byte[], int, int) DelegatingStream.FlushAsync(CancellationToken) DelegatingStream.WriteAsync(byte[], int, int, CancellationToken) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) StreamUtils.AsArray(Stream) StreamUtils.CopyToEx(Stream, Stream) StreamUtils.CopyToFile(Stream, string) StreamUtils.Read(Stream, ArraySegment<byte>) StreamUtils.Read(Stream, int) StreamUtils.ReadAll(Stream) StreamUtils.ReadToString(Stream, Encoding?) StreamUtils.Skip(Stream, int) StreamUtils.ToMemory(Stream) StreamUtils.TryRead(Stream, int) StreamUtils.WithLength(Stream, long) StreamUtils.WithSeekBuffer(Stream, int) StreamUtils.Write(Stream, ArraySegment<byte>) StreamUtils.Write(Stream, params byte[]) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors SeekBufferStream(Stream, int) Decorator that adds seek buffering to another System.IO.Stream. public SeekBufferStream(Stream underlyingStream, int bufferSize = 262144) Parameters underlyingStream Stream Underlying stream to delegate to. Will be disposed together with this stream. bufferSize int The maximum number of bytes to buffer for seeking backwards. Set this to 0 to allow forward but no backward seeking. Fields DefaultBufferSize The default for the maximum number of bytes to buffer for seeking backwards. public const int DefaultBufferSize = 262144 Field Value int Properties CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. Position When overridden in a derived class, gets or sets the position within the current stream. public override long Position { get; set; } Property Value long The current position within the stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods Dispose(bool) Releases the unmanaged resources used by the System.IO.Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write the data into. offset int The byte offset in buffer at which to begin writing data from the stream. count int The maximum number of bytes to read. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None. Returns Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type System.IO.SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed."
  },
  "api/NanoByte.Common.Streams.ShadowingStream.html": {
    "href": "api/NanoByte.Common.Streams.ShadowingStream.html",
    "title": "Class ShadowingStream | NanoByte.Common",
    "summary": "Class ShadowingStream Namespace NanoByte.Common.Streams Assembly NanoByte.Common.dll Decorator that copies all bytes read from a System.IO.Stream to another System.IO.Stream. public sealed class ShadowingStream : DelegatingStream Inheritance object MarshalByRefObject Stream DelegatingStream ShadowingStream Inherited Members DelegatingStream.CanRead DelegatingStream.CanSeek DelegatingStream.CanWrite DelegatingStream.Length DelegatingStream.CanTimeout DelegatingStream.ReadTimeout DelegatingStream.WriteTimeout DelegatingStream.Position DelegatingStream.Flush() DelegatingStream.Seek(long, SeekOrigin) DelegatingStream.SetLength(long) DelegatingStream.Write(byte[], int, int) DelegatingStream.FlushAsync(CancellationToken) DelegatingStream.WriteAsync(byte[], int, int, CancellationToken) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) StreamUtils.AsArray(Stream) StreamUtils.CopyToEx(Stream, Stream) StreamUtils.CopyToFile(Stream, string) StreamUtils.Read(Stream, ArraySegment<byte>) StreamUtils.Read(Stream, int) StreamUtils.ReadAll(Stream) StreamUtils.ReadToString(Stream, Encoding?) StreamUtils.Skip(Stream, int) StreamUtils.ToMemory(Stream) StreamUtils.TryRead(Stream, int) StreamUtils.WithLength(Stream, long) StreamUtils.WithSeekBuffer(Stream, int) StreamUtils.Write(Stream, ArraySegment<byte>) StreamUtils.Write(Stream, params byte[]) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ShadowingStream(Stream, Stream) Decorator that copies all bytes read from a System.IO.Stream to another System.IO.Stream. public ShadowingStream(Stream underlyingStream, Stream shadowStream) Parameters underlyingStream Stream Underlying stream to delegate to. Will be disposed together with this stream. shadowStream Stream The stream to copy all read bytes to. Methods Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write the data into. offset int The byte offset in buffer at which to begin writing data from the stream. count int The maximum number of bytes to read. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None. Returns Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation."
  },
  "api/NanoByte.Common.Streams.StreamConsumer.html": {
    "href": "api/NanoByte.Common.Streams.StreamConsumer.html",
    "title": "Class StreamConsumer | NanoByte.Common",
    "summary": "Class StreamConsumer Namespace NanoByte.Common.Streams Assembly NanoByte.Common.dll Continuously reads lines from a System.IO.StreamReader using a background thread while providing them to a foreground thread on demand. public class StreamConsumer Inheritance object StreamConsumer Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks Useful for processing System.Diagnostics.Process.StandardOutput and System.Diagnostics.Process.StandardError without risking deadlocks. Constructors StreamConsumer(StreamReader) Starts reading from the stream in a background thread. public StreamConsumer(StreamReader reader) Parameters reader StreamReader The stream to read from. Methods ReadLine() Returns the next pending line; null if there are no pending lines. public string? ReadLine() Returns string ToString() Returns all buffered lines that have not been read yet. public override string ToString() Returns string WaitForEnd() Waits for System.IO.StreamReader.EndOfStream. public void WaitForEnd()"
  },
  "api/NanoByte.Common.Streams.StreamUtils.html": {
    "href": "api/NanoByte.Common.Streams.StreamUtils.html",
    "title": "Class StreamUtils | NanoByte.Common",
    "summary": "Class StreamUtils Namespace NanoByte.Common.Streams Assembly NanoByte.Common.dll Provides System.IO.Stream-related helper methods. public static class StreamUtils Inheritance object StreamUtils Methods AsArray(Stream) The entire content of a stream as an array. Seeks to the beginning of the stream if System.IO.Stream.CanSeek. Avoids copying the underlying array if possible. public static byte[] AsArray(this Stream stream) Parameters stream Stream Returns byte[] CopyEmbeddedToFile(Type, string, string) Copies an embedded resource to a file. public static void CopyEmbeddedToFile(this Type type, string name, string path) Parameters type Type A type that is located in the same namespace as the embedded resource. name string The name of the embedded resource. path string The path of the file to write. Exceptions ArgumentException The specified embedded resource does not exist. CopyToEx(Stream, Stream) Copies the content of one stream to another. Seeks to the beginning of the source stream if System.IO.Stream.CanSeek. public static void CopyToEx(this Stream source, Stream destination) Parameters source Stream The source stream to copy from. destination Stream The destination stream to copy to. CopyToFile(Stream, string) Writes the entire content of a stream to a file. Seeks to the beginning of the stream if System.IO.Stream.CanSeek. public static void CopyToFile(this Stream stream, string path) Parameters stream Stream The stream to read from. path string The path of the file to write. GetEmbeddedBytes(Type, string) Returns an embedded resource as a byte array. [Pure] public static byte[] GetEmbeddedBytes(this Type type, string name) Parameters type Type A type that is located in the same namespace as the embedded resource. name string The name of the embedded resource. Returns byte[] Exceptions ArgumentException The specified embedded resource does not exist. GetEmbeddedStream(Type, string) Returns an embedded resource as a stream. [Pure] public static Stream GetEmbeddedStream(this Type type, string name) Parameters type Type A type that is located in the same namespace as the embedded resource. name string The name of the embedded resource. Returns Stream Exceptions ArgumentException The specified embedded resource does not exist. GetEmbeddedString(Type, string, Encoding?) Returns an embedded resource as a string. [Pure] public static string GetEmbeddedString(this Type type, string name, Encoding? encoding = null) Parameters type Type A type that is located in the same namespace as the embedded resource. name string The name of the embedded resource. encoding Encoding The encoding of the string; leave null to default to Utf8. Returns string Exceptions ArgumentException The specified embedded resource does not exist. Read(Stream, ArraySegment<byte>) Reads a sequence of bytes from the stream. public static int Read(this Stream stream, ArraySegment<byte> buffer) Parameters stream Stream The stream to read from. buffer ArraySegment<byte> The buffer to read the bytes into. Returns int The bytes read from the stream. Exceptions IOException The desired number of bytes could not be read from the stream. Read(Stream, int) Reads a fixed number of bytes from a stream starting from the current offset. public static byte[] Read(this Stream stream, int count) Parameters stream Stream The stream to read from. count int The number of bytes to read. Returns byte[] The bytes read from the stream. Exceptions IOException The desired number of bytes could not be read from the stream. ReadAll(Stream) Reads the entire content of a stream. Seeks to the beginning of the stream if System.IO.Stream.CanSeek. public static ArraySegment<byte> ReadAll(this Stream stream) Parameters stream Stream The stream to read from. Returns ArraySegment<byte> The entire content of the stream. ReadToString(Stream, Encoding?) Reads the entire content of a stream as string data. Seeks to the beginning of the stream if System.IO.Stream.CanSeek. public static string ReadToString(this Stream stream, Encoding? encoding = null) Parameters stream Stream The stream to read from. encoding Encoding The encoding of the string; leave null to default to Utf8. Returns string A entire content of the stream. Skip(Stream, int) Skips a number of bytes in the stream. Uses System.IO.Stream.Seek(long, System.IO.SeekOrigin) if supported, System.IO.Stream.Read(byte[], int, int) otherwise. public static void Skip(this Stream stream, int count) Parameters stream Stream The stream to read from. count int The number of bytes to skip. Exceptions IOException The desired number of bytes could not be skipped in the stream. ToMemory(Stream) Copies the entire content of a stream to a System.IO.MemoryStream. Seeks to the beginning of the stream if System.IO.Stream.CanSeek. public static MemoryStream ToMemory(this Stream stream) Parameters stream Stream The stream to read from. Returns MemoryStream A new stream or the original stream if it was already a System.IO.MemoryStream. ToStream(ArraySegment<byte>, bool) Creates a new System.IO.MemoryStream using the existing array segment as the underlying storage. [Pure] public static MemoryStream ToStream(this ArraySegment<byte> segment, bool writable = false) Parameters segment ArraySegment<byte> The array segment to create the stream from. writable bool Controls whether the stream is writable (i.e., can modify the array). Returns MemoryStream ToStream(byte[], bool) Creates a new System.IO.MemoryStream using the existing array as the underlying storage. [Pure] public static MemoryStream ToStream(this byte[] array, bool writable = false) Parameters array byte[] The array to create the stream from. writable bool Controls whether the stream is writable (i.e., can modify the array). Returns MemoryStream ToStream(string, Encoding?) Creates a new System.IO.MemoryStream and fills it with string data. [Pure] public static MemoryStream ToStream(this string data, Encoding? encoding = null) Parameters data string The data to fill the stream with. encoding Encoding The encoding of the string; leave null to default to Utf8. Returns MemoryStream A filled stream with the position set to zero. TryRead(Stream, int) Reads a fixed number of bytes from a stream starting from the current offset. public static byte[]? TryRead(this Stream stream, int count) Parameters stream Stream The stream to read from. count int The number of bytes to read. Returns byte[] The bytes read from the stream; null if the desired number of bytes could not be read from the stream. WithLength(Stream, long) Overrides the value returned by System.IO.Stream.Length. [Pure] public static Stream WithLength(this Stream stream, long length) Parameters stream Stream The stream. length long The value to return for System.IO.Stream.Length. Returns Stream WithSeekBuffer(Stream, int) Adds seek buffering to a stream unless it already System.IO.Stream.CanSeek. [Pure] public static Stream WithSeekBuffer(this Stream stream, int bufferSize = 262144) Parameters stream Stream The stream. bufferSize int The maximum number of bytes to buffer for seeking backwards. Set this to 0 to allow forward but no backward seeking. Returns Stream Write(Stream, ArraySegment<byte>) Writes the entire contents of a buffer to a stream. public static void Write(this Stream stream, ArraySegment<byte> buffer) Parameters stream Stream The stream to write to. buffer ArraySegment<byte> The buffer containing the bytes to write. Write(Stream, params byte[]) Writes the entire contents of an array to a stream. public static void Write(this Stream stream, params byte[] data) Parameters stream Stream The stream to write to. data byte[] The array containing the bytes to write."
  },
  "api/NanoByte.Common.Streams.html": {
    "href": "api/NanoByte.Common.Streams.html",
    "title": "Namespace NanoByte.Common.Streams | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Streams Filter streams and utility classes with helper functions for stream handling. Classes DelegatingStream Forwards all requests to another System.IO.Streams. Useful as a base class for decorators/wrappers. NonSeekableStream Decorator that prevents a stream from being seeked. OffsetStream Decorator that transparently applies an offset to another System.IO.Stream. ProgressStream Decorator that adds progress-tracking and cancellation to another System.IO.Stream. ReadStream Reads the contents of a stream. SeekBufferStream Decorator that adds seek buffering to another System.IO.Stream. ShadowingStream Decorator that copies all bytes read from a System.IO.Stream to another System.IO.Stream. StreamConsumer Continuously reads lines from a System.IO.StreamReader using a background thread while providing them to a foreground thread on demand. StreamUtils Provides System.IO.Stream-related helper methods."
  },
  "api/NanoByte.Common.StringUtils.html": {
    "href": "api/NanoByte.Common.StringUtils.html",
    "title": "Class StringUtils | NanoByte.Common",
    "summary": "Class StringUtils Namespace NanoByte.Common Assembly NanoByte.Common.dll Provides additional or simplified string functions. public static class StringUtils Inheritance object StringUtils Methods ContainsIgnoreCase(string, string) Determines whether a string contains searchFor using case-insensitive comparison. [Pure] public static bool ContainsIgnoreCase(this string value, string searchFor) Parameters value string The string to search. searchFor string The string to search for in value. Returns bool ContainsWhitespace(string) Determines whether a string contains any whitespace characters. [Pure] public static bool ContainsWhitespace(this string value) Parameters value string Returns bool EmptyAsNull(string?) Maps empty strings to null. [Pure] public static string? EmptyAsNull(this string? value) Parameters value string Returns string EndsWith(string, string, out string) Determines whether a string starts with searchFor and, if so, returns the rest that comes before. [Pure] public static bool EndsWith(this string value, string searchFor, out string rest) Parameters value string searchFor string rest string Returns bool EndsWithIgnoreCase(string, string) Determines whether a string ends with searchFor with case-insensitive comparison. [Pure] public static bool EndsWithIgnoreCase(this string value, string searchFor) Parameters value string searchFor string Returns bool EqualsEmptyNull(string?, string?) Compares strings using case-sensitive, invariant culture comparison and considering null and string.Empty equal. [Pure] public static bool EqualsEmptyNull(string? s1, string? s2) Parameters s1 string s2 string Returns bool EqualsIgnoreCase(char, char) Compares chars using case-insensitive comparison. [Pure] public static bool EqualsIgnoreCase(char c1, char c2) Parameters c1 char c2 char Returns bool EqualsIgnoreCase(string?, string?) Compares strings using case-insensitive comparison. [Pure] public static bool EqualsIgnoreCase(string? s1, string? s2) Parameters s1 string s2 string Returns bool FormatBytes(long, IFormatProvider?) Formats a byte number in human-readable form (KB, MB, GB). public static string FormatBytes(this long value, IFormatProvider? provider = null) Parameters value long The value in bytes. provider IFormatProvider Provides culture-specific formatting information. Returns string GeneratePassword(int) Returns a string filled with random human-readable ASCII characters based on a cryptographic random number generator. [Pure] public static string GeneratePassword(int length) Parameters length int The length of the string to be generated. Returns string GetLeftPartAtFirstOccurrence(string, char) Get everything to the left of the first occurrence of a character. [Pure] public static string GetLeftPartAtFirstOccurrence(this string value, char searchFor) Parameters value string searchFor char Returns string GetLeftPartAtFirstOccurrence(string, string) Get everything to the left of the first occurrence of a string. [Pure] public static string GetLeftPartAtFirstOccurrence(this string value, string searchFor) Parameters value string searchFor string Returns string GetLeftPartAtLastOccurrence(string, char) Get everything to the left of the last occurrence of a character. [Pure] public static string GetLeftPartAtLastOccurrence(this string value, char searchFor) Parameters value string searchFor char Returns string GetLeftPartAtLastOccurrence(string, string) Get everything to the left of the last occurrence of a string. [Pure] public static string GetLeftPartAtLastOccurrence(this string value, string searchFor) Parameters value string searchFor string Returns string GetRightPartAtFirstOccurrence(string, char) Get everything to the right of the first occurrence of a character. [Pure] public static string GetRightPartAtFirstOccurrence(this string value, char searchFor) Parameters value string searchFor char Returns string GetRightPartAtFirstOccurrence(string, string) Get everything to the right of the first occurrence of a string. [Pure] public static string GetRightPartAtFirstOccurrence(this string value, string searchFor) Parameters value string searchFor string Returns string GetRightPartAtLastOccurrence(string, char) Get everything to the right of the last occurrence of a character. [Pure] public static string GetRightPartAtLastOccurrence(this string value, char searchFor) Parameters value string searchFor char Returns string GetRightPartAtLastOccurrence(string, string) Get everything to the right of the last occurrence of a string. [Pure] public static string GetRightPartAtLastOccurrence(this string value, string searchFor) Parameters value string searchFor string Returns string Join(string, IEnumerable<string>) Combines multiple strings into one, placing a separator between the parts. [Pure] public static string Join(string separator, IEnumerable<string> parts) Parameters separator string The separator characters to place between the parts. parts IEnumerable<string> The strings to be combined. Returns string RemoveCharacters(string?, IEnumerable<char>) Removes all occurrences of a specific set of characters from a string. [Pure] public static string? RemoveCharacters(this string? value, IEnumerable<char> characters) Parameters value string characters IEnumerable<char> Returns string SplitMultilineText(string) Splits a multiline string to several strings and returns the result as a string array. [Pure] public static IEnumerable<string> SplitMultilineText(this string value) Parameters value string Returns IEnumerable<string> StartsWith(string, string, out string) Determines whether a string starts with searchFor and, if so, returns the rest that comes after. [Pure] public static bool StartsWith(this string value, string searchFor, out string rest) Parameters value string searchFor string rest string Returns bool StartsWithIgnoreCase(string, string) Determines whether a string starts with searchFor with case-insensitive comparison. [Pure] public static bool StartsWithIgnoreCase(this string value, string searchFor) Parameters value string searchFor string Returns bool TrimOverflow(string, int) Cuts off strings longer than maxLength and replaces the rest with ellipsis (...). public static string TrimOverflow(this string value, int maxLength) Parameters value string maxLength int Returns string"
  },
  "api/NanoByte.Common.Tasks.ActionTask.html": {
    "href": "api/NanoByte.Common.Tasks.ActionTask.html",
    "title": "Class ActionTask | NanoByte.Common",
    "summary": "Class ActionTask Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll A task that executes an System.Action that can be canceled. Only completion is reported, no intermediate progress. public sealed class ActionTask : TaskBase, ITask Inheritance object MarshalByRefObject TaskBase ActionTask Implements ITask Inherited Members TaskBase.Tag TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ActionTask(string, Action) A task that executes an System.Action that cannot be canceled. Only completion is reported, no intermediate progress. public ActionTask(string name, Action work) Parameters name string A name describing the task in human-readable form. work Action The code to be executed by the task. May throw System.Net.WebException, System.IO.IOException or System.OperationCanceledException. ActionTask(string, Action<CancellationToken>) A task that executes an System.Action that can be canceled. Only completion is reported, no intermediate progress. public ActionTask(string name, Action<CancellationToken> work) Parameters name string A name describing the task in human-readable form. work Action<CancellationToken> The code to be executed by the task. May throw System.Net.WebException, System.IO.IOException or System.OperationCanceledException. ActionTask(string, Func<CancellationToken, Task>) A task that executes an async System.Threading.Tasks.Task that can be canceled. Only completion is reported, no intermediate progress. public ActionTask(string name, Func<CancellationToken, Task> work) Parameters name string A name describing the task in human-readable form. work Func<CancellationToken, Task> The code to be executed and awaited. May throw System.Net.WebException, System.IO.IOException or System.OperationCanceledException. ActionTask(string, Func<Task>) A task that executes an async System.Threading.Tasks.Task that cannot be canceled. Only completion is reported, no intermediate progress. public ActionTask(string name, Func<Task> work) Parameters name string A name describing the task in human-readable form. work Func<Task> The code to be executed and awaited. May throw System.Net.WebException, System.IO.IOException or System.OperationCanceledException. Properties CanCancel Indicates whether this task can be canceled once it has been started. public override bool CanCancel { get; } Property Value bool Name A name describing the task in human-readable form. public override string Name { get; } Property Value string UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected override bool UnitsByte { get; } Property Value bool Methods Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.AnsiCliProgress.html": {
    "href": "api/NanoByte.Common.Tasks.AnsiCliProgress.html",
    "title": "Class AnsiCliProgress | NanoByte.Common",
    "summary": "Class AnsiCliProgress Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.AnsiCli.dll Reports task progress updates using ANSI console output. public class AnsiCliProgress : MarshalByRefObject Inheritance object MarshalByRefObject AnsiCliProgress Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors AnsiCliProgress(ProgressTask) Reports task progress updates using ANSI console output. public AnsiCliProgress(ProgressTask progressTask) Parameters progressTask ProgressTask See Also AnsiCliProgressContext Methods Report(TaskSnapshot) Reports a progress update. public void Report(TaskSnapshot value) Parameters value TaskSnapshot The value of the updated progress. See Also AnsiCliProgressContext"
  },
  "api/NanoByte.Common.Tasks.AnsiCliProgressContext.html": {
    "href": "api/NanoByte.Common.Tasks.AnsiCliProgressContext.html",
    "title": "Class AnsiCliProgressContext | NanoByte.Common",
    "summary": "Class AnsiCliProgressContext Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.AnsiCli.dll Container for one or more ANSI console progress bars. [MustDisposeResource] public sealed class AnsiCliProgressContext Inheritance object AnsiCliProgressContext Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors AnsiCliProgressContext() Starts a progress context. public AnsiCliProgressContext() Properties IsFinished Indicates whether all tasks have completed. public bool IsFinished { get; } Property Value bool Methods Add(string) Adds a new progress bar to the context. public IProgress<TaskSnapshot> Add(string description) Parameters description string A descriptive text to show next to the progress bar. Returns IProgress<TaskSnapshot> A handle for updating the state of the progress bar. Dispose() Ends the progress context. public void Dispose()"
  },
  "api/NanoByte.Common.Tasks.AnsiCliTaskHandler.html": {
    "href": "api/NanoByte.Common.Tasks.AnsiCliTaskHandler.html",
    "title": "Class AnsiCliTaskHandler | NanoByte.Common",
    "summary": "Class AnsiCliTaskHandler Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.AnsiCli.dll Informs the user about the progress of tasks and ask questions using ANSI console output. [MustDisposeResource] public class AnsiCliTaskHandler : CliTaskHandler, ITaskHandler Inheritance object TaskHandlerBase CliTaskHandler AnsiCliTaskHandler Implements ITaskHandler Inherited Members CliTaskHandler.GetLogColor(LogSeverity) TaskHandlerBase.LogHandler(LogSeverity, string, Exception) TaskHandlerBase.CancellationTokenSource TaskHandlerBase.CancellationToken TaskHandlerBase.Verbosity TaskHandlerBase.Ask(string, bool?, string) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks This class is thread-safe. Properties CredentialProvider Used to ask the user or a keyring for System.Net.NetworkCredentials for specific System.Uris; can be null. protected override ICredentialProvider CredentialProvider { get; } Property Value ICredentialProvider IsInteractive Indicates whether the user can provide input. protected override bool IsInteractive { get; } Property Value bool Methods AskInteractive(string, bool) Asks the user a Yes/No/Cancel question. protected override bool AskInteractive(string question, bool defaultAnswer) Parameters question string The question and comprehensive information to help the user make an informed decision. defaultAnswer bool The default answer to preselect. Returns bool true if the user answered with 'Yes'; false if the user answered with 'No'. Exceptions OperationCanceledException Throw if the user answered with 'Cancel'. DisplayLogEntry(LogSeverity, string) Prints Log entries to the System.Console. protected override void DisplayLogEntry(LogSeverity severity, string message) Parameters severity LogSeverity message string Dispose() Unregisters the Handler and the System.Console.CancelKeyPress handler. public override void Dispose() Error(Exception) Displays an error message to the user. public override void Error(Exception exception) Parameters exception Exception The exception representing the error that occurred. Output(string, string) Displays multi-line text to the user. public override void Output(string title, string message) Parameters title string A title for the message. message string The string to display. Trailing linebreaks are appropriately handled or ignored. Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, NamedCollection<T>) Displays tree-like data to the user. public override void Output<T>(string title, NamedCollection<T> data) where T : INamed Parameters title string A title for the data.INamed data NamedCollection<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, IEnumerable<T>) Displays tabular data to the user. public override void Output<T>(string title, IEnumerable<T> data) Parameters title string A title for the data. data IEnumerable<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. RunTask(ITask) Runs an ITask and tracks its progress. Returns once the task has been completed. public override void RunTask(ITask task) Parameters task ITask The task to be run. (Run(CancellationToken, ICredentialProvider?, IProgress<TaskSnapshot>?) or equivalent is called on it.) Exceptions OperationCanceledException The user canceled the task. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.CliProgress.html": {
    "href": "api/NanoByte.Common.Tasks.CliProgress.html",
    "title": "Class CliProgress | NanoByte.Common",
    "summary": "Class CliProgress Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Reports task progress updates using console output. public class CliProgress : MarshalByRefObject Inheritance object MarshalByRefObject CliProgress Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Report(TaskSnapshot) Reports a progress update. public void Report(TaskSnapshot value) Parameters value TaskSnapshot The value of the updated progress. See Also RunTask(ITask)"
  },
  "api/NanoByte.Common.Tasks.CliTaskHandler.html": {
    "href": "api/NanoByte.Common.Tasks.CliTaskHandler.html",
    "title": "Class CliTaskHandler | NanoByte.Common",
    "summary": "Class CliTaskHandler Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Informs the user about the progress of tasks and ask questions using console output. [MustDisposeResource] public class CliTaskHandler : TaskHandlerBase, ITaskHandler Inheritance object TaskHandlerBase CliTaskHandler Implements ITaskHandler Derived AnsiCliTaskHandler Inherited Members TaskHandlerBase.LogHandler(LogSeverity, string, Exception) TaskHandlerBase.CancellationTokenSource TaskHandlerBase.CancellationToken TaskHandlerBase.Verbosity TaskHandlerBase.Ask(string, bool?, string) TaskHandlerBase.Output<T>(string, IEnumerable<T>) TaskHandlerBase.Output<T>(string, NamedCollection<T>) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) TaskHandlerExtensions.OutputLow(ITaskHandler, string, string) TaskHandlerExtensions.OutputLow<T>(ITaskHandler, string, NamedCollection<T>) TaskHandlerExtensions.OutputLow<T>(ITaskHandler, string, IEnumerable<T>) TaskHandlerExtensions.RunTaskAndReturn<T>(ITaskHandler, ResultTask<T>) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks This class is thread-safe. Constructors CliTaskHandler() Creates a new CLI task handler. Registers a Handler and a System.Console.CancelKeyPress handler. public CliTaskHandler() Properties CredentialProvider Used to ask the user or a keyring for System.Net.NetworkCredentials for specific System.Uris; can be null. protected override ICredentialProvider CredentialProvider { get; } Property Value ICredentialProvider IsInteractive Indicates whether the user can provide input. protected override bool IsInteractive { get; } Property Value bool Methods AskInteractive(string, bool) Asks the user a Yes/No/Cancel question. protected override bool AskInteractive(string question, bool defaultAnswer) Parameters question string The question and comprehensive information to help the user make an informed decision. defaultAnswer bool The default answer to preselect. Returns bool true if the user answered with 'Yes'; false if the user answered with 'No'. Exceptions OperationCanceledException Throw if the user answered with 'Cancel'. DisplayLogEntry(LogSeverity, string) Prints Log entries to the System.Console. protected override void DisplayLogEntry(LogSeverity severity, string message) Parameters severity LogSeverity message string Dispose() Unregisters the Handler and the System.Console.CancelKeyPress handler. public override void Dispose() Error(Exception) Displays an error message to the user. public override void Error(Exception exception) Parameters exception Exception The exception representing the error that occurred. GetLogColor(LogSeverity) Determines the color to use for a log entry based on the LogSeverity. protected static ConsoleColor GetLogColor(LogSeverity severity) Parameters severity LogSeverity Returns ConsoleColor Output(string, string) Displays multi-line text to the user. public override void Output(string title, string message) Parameters title string A title for the message. message string The string to display. Trailing linebreaks are appropriately handled or ignored. Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. RunTask(ITask) Runs an ITask and tracks its progress. Returns once the task has been completed. public override void RunTask(ITask task) Parameters task ITask The task to be run. (Run(CancellationToken, ICredentialProvider?, IProgress<TaskSnapshot>?) or equivalent is called on it.) Exceptions OperationCanceledException The user canceled the task. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.DeferredProgress-1.html": {
    "href": "api/NanoByte.Common.Tasks.DeferredProgress-1.html",
    "title": "Class DeferredProgress<T> | NanoByte.Common",
    "summary": "Class DeferredProgress<T> Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Remembers the latest call made to Report(T). Forwards that call (if any) and all future calls to a target System.IProgress<T> implementation once it is set. public class DeferredProgress<T> Type Parameters T The type of progress update value. Inheritance object DeferredProgress<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks If Report(T) and SetTarget(IProgress<T>) are called on different threads individual progress reports may be lost. This tradeoff is made intentionally to avoid locking for better performance. Methods Report(T) Reports a progress update. public void Report(T value) Parameters value T The value of the updated progress. SetTarget(IProgress<T>) Sets the target System.IProgress<T> implementation to forward Report(T) calls to. public void SetTarget(IProgress<T> target) Parameters target IProgress<T> Exceptions InvalidOperationException The target is already set."
  },
  "api/NanoByte.Common.Tasks.DialogTaskHandler.html": {
    "href": "api/NanoByte.Common.Tasks.DialogTaskHandler.html",
    "title": "Class DialogTaskHandler | NanoByte.Common",
    "summary": "Class DialogTaskHandler Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.WinForms.dll Uses simple WinForms dialog boxes to inform the user about the progress of tasks. [MustDisposeResource] public class DialogTaskHandler : GuiTaskHandlerBase, ITaskHandler Inheritance object TaskHandlerBase GuiTaskHandlerBase DialogTaskHandler Implements ITaskHandler Inherited Members GuiTaskHandlerBase.LogRtf GuiTaskHandlerBase.DisplayLogEntry(LogSeverity, string) GuiTaskHandlerBase.GetLogColor(LogSeverity) GuiTaskHandlerBase.CredentialProvider GuiTaskHandlerBase.IsInteractive GuiTaskHandlerBase.Output<T>(string, NamedCollection<T>) TaskHandlerBase.Dispose() TaskHandlerBase.LogHandler(LogSeverity, string, Exception) TaskHandlerBase.CancellationTokenSource TaskHandlerBase.CancellationToken TaskHandlerBase.Verbosity TaskHandlerBase.Ask(string, bool?, string) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks This class is thread-safe. Constructors DialogTaskHandler(Control) Creates a new dialog task handler. Registers a Handler. public DialogTaskHandler(Control owner) Parameters owner Control The parent window for any dialogs created by the handler. Methods AskInteractive(string, bool) Asks the user a Yes/No/Cancel question. protected override bool AskInteractive(string question, bool defaultAnswer) Parameters question string The question and comprehensive information to help the user make an informed decision. defaultAnswer bool The default answer to preselect. Returns bool true if the user answered with 'Yes'; false if the user answered with 'No'. Exceptions OperationCanceledException Throw if the user answered with 'Cancel'. Error(Exception) Displays an error message to the user. public override void Error(Exception exception) Parameters exception Exception The exception representing the error that occurred. Output(string, string) Displays multi-line text to the user. public override void Output(string title, string message) Parameters title string A title for the message. message string The string to display. Trailing linebreaks are appropriately handled or ignored. Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, IEnumerable<T>) Displays tabular data to the user. public override void Output<T>(string title, IEnumerable<T> data) Parameters title string A title for the data. data IEnumerable<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. RunTask(ITask) Runs an ITask and tracks its progress. Returns once the task has been completed. public override void RunTask(ITask task) Parameters task ITask The task to be run. (Run(CancellationToken, ICredentialProvider?, IProgress<TaskSnapshot>?) or equivalent is called on it.) Exceptions OperationCanceledException The user canceled the task. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.ForEachTask-1.html": {
    "href": "api/NanoByte.Common.Tasks.ForEachTask-1.html",
    "title": "Class ForEachTask<T> | NanoByte.Common",
    "summary": "Class ForEachTask<T> Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll A task that executes an action once for each element of a collection. public sealed class ForEachTask<T> : TaskBase, ITask Type Parameters T Inheritance object MarshalByRefObject TaskBase ForEachTask<T> Implements ITask Inherited Members TaskBase.Tag TaskBase.CanCancel TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ForEachTask(string, IEnumerable<T>, Action<T>, Action<T>?) Creates a new task that executes an action once for each element of a collection. public ForEachTask(string name, IEnumerable<T> target, Action<T> action, Action<T>? rollback = null) Parameters name string A name describing the task in human-readable form. target IEnumerable<T> A list of objects to execute the action for. Cancellation is possible between any two elements. action Action<T> The action to be executed once per element in target. rollback Action<T> An optional action to try to undo changes made by action in case one of the invocations failed or the task was cancelled. Called once for each element for which action was called (even if it failed), in reverse order. Any exceptions thrown here are logged and then ignored. Properties Name A name describing the task in human-readable form. public override string Name { get; } Property Value string UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected override bool UnitsByte { get; } Property Value bool Methods Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.ForEachTask.html": {
    "href": "api/NanoByte.Common.Tasks.ForEachTask.html",
    "title": "Class ForEachTask | NanoByte.Common",
    "summary": "Class ForEachTask Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Provides a static factory method for ForEachTask<T> as an alternative to calling the constructor to exploit type inference. public static class ForEachTask Inheritance object ForEachTask Methods Create<T>(string, IEnumerable<T>, Action<T>, Action<T>?) Creates a new task that executes an action once for each element of a collection. public static ForEachTask<T> Create<T>(string name, IEnumerable<T> target, Action<T> action, Action<T>? rollback = null) Parameters name string A name describing the task in human-readable form. target IEnumerable<T> A list of objects to execute the action for. Cancellation is possible between any two elements. action Action<T> The action to be executed once per element in target. rollback Action<T> An optional action to try to undo changes made by action in case one of the invocations failed or the task was cancelled. Called once for each element for which action was called (even if it failed), in reverse order. Any exceptions thrown here are logged and then ignored. Returns ForEachTask<T> Type Parameters T"
  },
  "api/NanoByte.Common.Tasks.GuiTaskHandlerBase.html": {
    "href": "api/NanoByte.Common.Tasks.GuiTaskHandlerBase.html",
    "title": "Class GuiTaskHandlerBase | NanoByte.Common",
    "summary": "Class GuiTaskHandlerBase Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.WinForms.dll Common base class for WinForms ITaskHandler implementations. [MustDisposeResource] public abstract class GuiTaskHandlerBase : TaskHandlerBase, ITaskHandler Inheritance object TaskHandlerBase GuiTaskHandlerBase Implements ITaskHandler Derived DialogTaskHandler Inherited Members TaskHandlerBase.Dispose() TaskHandlerBase.LogHandler(LogSeverity, string, Exception) TaskHandlerBase.CancellationTokenSource TaskHandlerBase.CancellationToken TaskHandlerBase.Verbosity TaskHandlerBase.RunTask(ITask) TaskHandlerBase.Ask(string, bool?, string) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks This class is thread-safe. Fields LogRtf Aggregated Log entries in rich-text form. protected readonly RtfBuilder LogRtf Field Value RtfBuilder Properties CredentialProvider Used to ask the user or a keyring for System.Net.NetworkCredentials for specific System.Uris; can be null. protected override ICredentialProvider CredentialProvider { get; } Property Value ICredentialProvider IsInteractive Indicates whether the user can provide input. protected override bool IsInteractive { get; } Property Value bool Methods AskInteractive(string, bool) Asks the user a Yes/No/Cancel question. protected override bool AskInteractive(string question, bool defaultAnswer) Parameters question string The question and comprehensive information to help the user make an informed decision. defaultAnswer bool The default answer to preselect. Returns bool true if the user answered with 'Yes'; false if the user answered with 'No'. Exceptions OperationCanceledException Throw if the user answered with 'Cancel'. DisplayLogEntry(LogSeverity, string) Aggregates Log entries in LogRtf for later display. protected override void DisplayLogEntry(LogSeverity severity, string message) Parameters severity LogSeverity message string Error(Exception) Displays an error message to the user. public override void Error(Exception exception) Parameters exception Exception The exception representing the error that occurred. GetLogColor(LogSeverity) Determines the color to use for a log entry based on the LogSeverity. protected static RtfColor GetLogColor(LogSeverity severity) Parameters severity LogSeverity Returns RtfColor Output(string, string) Displays multi-line text to the user. public override void Output(string title, string message) Parameters title string A title for the message. message string The string to display. Trailing linebreaks are appropriately handled or ignored. Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, NamedCollection<T>) Displays tree-like data to the user. public override void Output<T>(string title, NamedCollection<T> data) where T : INamed Parameters title string A title for the data.INamed data NamedCollection<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, IEnumerable<T>) Displays tabular data to the user. public override void Output<T>(string title, IEnumerable<T> data) Parameters title string A title for the data. data IEnumerable<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler."
  },
  "api/NanoByte.Common.Tasks.IResultTask-1.html": {
    "href": "api/NanoByte.Common.Tasks.IResultTask-1.html",
    "title": "Interface IResultTask<T> | NanoByte.Common",
    "summary": "Interface IResultTask<T> Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll A task the provides a result. public interface IResultTask<out T> : ITask Type Parameters T Inherited Members ITask.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) ITask.Name ITask.Tag ITask.CanCancel Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties Result The result of the task. T Result { get; } Property Value T Exceptions InvalidOperationException The task is not Complete."
  },
  "api/NanoByte.Common.Tasks.ITask.html": {
    "href": "api/NanoByte.Common.Tasks.ITask.html",
    "title": "Interface ITask | NanoByte.Common",
    "summary": "Interface ITask Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Represents an operation that can be cancelled and have its progress tracked. public interface ITask Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties CanCancel Indicates whether this task can be canceled once it has been started. bool CanCancel { get; } Property Value bool Name A name describing the task in human-readable form. string Name { get; } Property Value string Tag An object used to associate the task with a specific process; can be null. object? Tag { get; set; } Property Value object Methods Run(CancellationToken, ICredentialProvider?, IProgress<TaskSnapshot>?) Runs the task and blocks until it is complete. void Run(CancellationToken cancellationToken = default, ICredentialProvider? credentialProvider = null, IProgress<TaskSnapshot>? progress = null) Parameters cancellationToken CancellationToken Used to receive a signal (e.g. from another thread) when the user wants to cancel the task. credentialProvider ICredentialProvider Object used to retrieve credentials for specific System.Uris on demand; can be null. progress IProgress<TaskSnapshot> Used to report back the task's progress (e.g. to another thread). Exceptions OperationCanceledException The task was canceled from another thread. IOException The task ended with IOError. WebException The task ended with WebError. See Also RunTask(ITask) See Also ITaskHandler"
  },
  "api/NanoByte.Common.Tasks.ITaskHandler.html": {
    "href": "api/NanoByte.Common.Tasks.ITaskHandler.html",
    "title": "Interface ITaskHandler | NanoByte.Common",
    "summary": "Interface ITaskHandler Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Used to run and track ITasks and ask the user questions. Specific implementations provide different kinds of user interfaces. public interface ITaskHandler Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) TaskHandlerExtensions.OutputLow(ITaskHandler, string, string) TaskHandlerExtensions.OutputLow<T>(ITaskHandler, string, NamedCollection<T>) TaskHandlerExtensions.OutputLow<T>(ITaskHandler, string, IEnumerable<T>) TaskHandlerExtensions.RunTaskAndReturn<T>(ITaskHandler, ResultTask<T>) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks Implementations of this interface are thread-safe. Properties CancellationToken Used to signal when the user wants to cancel the entire current process (and any ITasks it includes). CancellationToken CancellationToken { get; } Property Value CancellationToken Remarks Once this has been signalled this ITaskHandler cannot be reused, since any subsequently started ITasks will be cancelled immediately. Verbosity The detail level of messages displayed to the user. Verbosity Verbosity { get; set; } Property Value Verbosity Methods Ask(string, bool?, string?) Asks the user a Yes/No/Cancel question. bool Ask(string question, bool? defaultAnswer = null, string? alternateMessage = null) Parameters question string The question and comprehensive information to help the user make an informed decision. defaultAnswer bool? The default answer to preselect. May be chosen automatically if the user cannot be asked. null if the user must make the choice themselves. alternateMessage string A message to output with Warn(string, Exception?) when the defaultAnswer is used instead of asking the user. Returns bool true if the user answered with 'Yes'; false if the user answered with 'No'. Exceptions OperationCanceledException Throw if the user answered with 'Cancel' or if no answer can be obtained. Error(Exception) Displays an error message to the user. void Error(Exception exception) Parameters exception Exception The exception representing the error that occurred. Output(string, string) Displays multi-line text to the user. void Output(string title, string message) Parameters title string A title for the message. message string The string to display. Trailing linebreaks are appropriately handled or ignored. Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, NamedCollection<T>) Displays tree-like data to the user. void Output<T>(string title, NamedCollection<T> data) where T : INamed Parameters title string A title for the data.INamed data NamedCollection<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, IEnumerable<T>) Displays tabular data to the user. void Output<T>(string title, IEnumerable<T> data) Parameters title string A title for the data. data IEnumerable<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. RunTask(ITask) Runs an ITask and tracks its progress. Returns once the task has been completed. void RunTask(ITask task) Parameters task ITask The task to be run. (Run(CancellationToken, ICredentialProvider?, IProgress<TaskSnapshot>?) or equivalent is called on it.) Exceptions OperationCanceledException The user canceled the task. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.PercentProgressCallback.html": {
    "href": "api/NanoByte.Common.Tasks.PercentProgressCallback.html",
    "title": "Delegate PercentProgressCallback | NanoByte.Common",
    "summary": "Delegate PercentProgressCallback Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll A callback to be called by a workload to report its progress in percent. [CLSCompliant(false)] public delegate void PercentProgressCallback(int percent) Parameters percent int The workload's progress in percent. Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T)"
  },
  "api/NanoByte.Common.Tasks.PercentageTask.html": {
    "href": "api/NanoByte.Common.Tasks.PercentageTask.html",
    "title": "Class PercentageTask | NanoByte.Common",
    "summary": "Class PercentageTask Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll A task that executes an System.Action<T> and reports progress in percent. [CLSCompliant(false)] public sealed class PercentageTask : TaskBase, ITask Inheritance object MarshalByRefObject TaskBase PercentageTask Implements ITask Inherited Members TaskBase.Tag TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors PercentageTask(string, Action<PercentProgressCallback>, Action?) A task that executes an System.Action<T> and reports progress in percent. public PercentageTask(string name, Action<PercentProgressCallback> work, Action? cancellationCallback = null) Parameters name string A name describing the task in human-readable form. work Action<PercentProgressCallback> The code to be executed by the task. Is given a callback to report progress in percent. May throw System.Net.WebException, System.IO.IOException or System.OperationCanceledException. cancellationCallback Action An optional callback to be called when cancellation is requested via a System.Threading.CancellationToken. Properties CanCancel Indicates whether this task can be canceled once it has been started. public override bool CanCancel { get; } Property Value bool Name A name describing the task in human-readable form. public override string Name { get; } Property Value string UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected override bool UnitsByte { get; } Property Value bool Methods Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.ResultTask-1.html": {
    "href": "api/NanoByte.Common.Tasks.ResultTask-1.html",
    "title": "Class ResultTask<T> | NanoByte.Common",
    "summary": "Class ResultTask<T> Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll A task that executes a callback and the provides a result. Only completion is reported, no intermediate progress. public sealed class ResultTask<T> : TaskBase, IResultTask<T>, ITask Type Parameters T Inheritance object MarshalByRefObject TaskBase ResultTask<T> Implements IResultTask<T> ITask Inherited Members TaskBase.Tag TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ResultTask(string, Func<T>, Action?) A task that executes a callback and the provides a result. Only completion is reported, no intermediate progress. public ResultTask(string name, Func<T> work, Action? cancellationCallback = null) Parameters name string A name describing the task in human-readable form. work Func<T> The code to be executed by the task that provides a result. May throw System.Net.WebException, System.IO.IOException or System.OperationCanceledException. cancellationCallback Action An optional callback to be called when cancellation is requested via a System.Threading.CancellationToken. Properties CanCancel Indicates whether this task can be canceled once it has been started. public override bool CanCancel { get; } Property Value bool Name A name describing the task in human-readable form. public override string Name { get; } Property Value string Result The result of the task. public T Result { get; } Property Value T Exceptions InvalidOperationException The task is not Complete. UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected override bool UnitsByte { get; } Property Value bool Methods Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.ResultTask.html": {
    "href": "api/NanoByte.Common.Tasks.ResultTask.html",
    "title": "Class ResultTask | NanoByte.Common",
    "summary": "Class ResultTask Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Provides a static factory method for ResultTask<T> as an alternative to calling the constructor to exploit type inference. public static class ResultTask Inheritance object ResultTask Methods Create<T>(string, Func<T>, Action?) Creates a new task that executes a callback and the provides a result. Only completion is reported, no intermediate progress. public static ResultTask<T> Create<T>(string name, Func<T> work, Action? cancellationCallback = null) Parameters name string A name describing the task in human-readable form. work Func<T> The code to be executed by the task that provides a result. May throw System.Net.WebException, System.IO.IOException or System.OperationCanceledException. cancellationCallback Action An optional callback to be called when cancellation is requested via a System.Threading.CancellationToken. Returns ResultTask<T> Type Parameters T"
  },
  "api/NanoByte.Common.Tasks.SilentTaskHandler.html": {
    "href": "api/NanoByte.Common.Tasks.SilentTaskHandler.html",
    "title": "Class SilentTaskHandler | NanoByte.Common",
    "summary": "Class SilentTaskHandler Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Executes tasks silently and suppresses any questions. [MustDisposeResource(false)] public class SilentTaskHandler : ITaskHandler Inheritance object SilentTaskHandler Implements ITaskHandler Extension Methods TaskHandlerExtensions.OutputLow(ITaskHandler, string, string) TaskHandlerExtensions.OutputLow<T>(ITaskHandler, string, NamedCollection<T>) TaskHandlerExtensions.OutputLow<T>(ITaskHandler, string, IEnumerable<T>) TaskHandlerExtensions.RunTaskAndReturn<T>(ITaskHandler, ResultTask<T>) BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks This class is thread-safe. Properties CancellationToken Used to signal when the user wants to cancel the entire current process (and any ITasks it includes). public CancellationToken CancellationToken { get; } Property Value CancellationToken Remarks Once this has been signalled this ITaskHandler cannot be reused, since any subsequently started ITasks will be cancelled immediately. Verbosity Always returns Batch. public Verbosity Verbosity { get; set; } Property Value Verbosity Methods Ask(string, bool?, string?) Returns defaultAnswer if specified or false otherwise. public bool Ask(string question, bool? defaultAnswer = null, string? alternateMessage = null) Parameters question string defaultAnswer bool? alternateMessage string Returns bool Cancel() Cancels currently running ITasks. public void Cancel() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Error(Exception) Displays an error message to the user. public void Error(Exception exception) Parameters exception Exception The exception representing the error that occurred. Output(string, string) Displays multi-line text to the user. public void Output(string title, string message) Parameters title string A title for the message. message string The string to display. Trailing linebreaks are appropriately handled or ignored. Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, NamedCollection<T>) Displays tree-like data to the user. public void Output<T>(string title, NamedCollection<T> data) where T : INamed Parameters title string A title for the data.INamed data NamedCollection<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, IEnumerable<T>) Displays tabular data to the user. public void Output<T>(string title, IEnumerable<T> data) Parameters title string A title for the data. data IEnumerable<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. RunTask(ITask) Runs an ITask and tracks its progress. Returns once the task has been completed. public void RunTask(ITask task) Parameters task ITask The task to be run. (Run(CancellationToken, ICredentialProvider?, IProgress<TaskSnapshot>?) or equivalent is called on it.) Exceptions OperationCanceledException The user canceled the task. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.TaskBase.html": {
    "href": "api/NanoByte.Common.Tasks.TaskBase.html",
    "title": "Class TaskBase | NanoByte.Common",
    "summary": "Class TaskBase Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Abstract base class for ITask implementations. public abstract class TaskBase : MarshalByRefObject, ITask Inheritance object MarshalByRefObject TaskBase Implements ITask Derived DownloadFile ReadDirectoryBase ReadFile ReadStream ActionTask ForEachTask<T> PercentageTask ResultTask<T> WaitTask Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields CancellationToken Signaled when the user wants to cancel the task execution. protected CancellationToken CancellationToken Field Value CancellationToken CredentialProvider Used to retrieve credentials for specific System.Uris on demand; can be null. protected ICredentialProvider? CredentialProvider Field Value ICredentialProvider Properties CanCancel Indicates whether this task can be canceled once it has been started. public virtual bool CanCancel { get; } Property Value bool Name A name describing the task in human-readable form. public abstract string Name { get; } Property Value string PreventIdle Indicates whether this task should prevent the system from entering idle mode. protected virtual bool PreventIdle { get; } Property Value bool State The current State of the task. protected TaskState State { get; set; } Property Value TaskState Tag An object used to associate the task with a specific process; can be null. public object? Tag { get; set; } Property Value object UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected abstract bool UnitsByte { get; } Property Value bool UnitsProcessed The number of units that have been processed so far. protected long UnitsProcessed { get; set; } Property Value long UnitsTotal The total number of units that are to be processed; -1 for unknown. protected long UnitsTotal { get; set; } Property Value long Methods Execute() The actual code to be executed. protected abstract void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError. Run(CancellationToken, ICredentialProvider?, IProgress<TaskSnapshot>?) Runs the task and blocks until it is complete. public void Run(CancellationToken cancellationToken = default, ICredentialProvider? credentialProvider = null, IProgress<TaskSnapshot>? progress = null) Parameters cancellationToken CancellationToken Used to receive a signal (e.g. from another thread) when the user wants to cancel the task. credentialProvider ICredentialProvider Object used to retrieve credentials for specific System.Uris on demand; can be null. progress IProgress<TaskSnapshot> Used to report back the task's progress (e.g. to another thread). Exceptions OperationCanceledException The task was canceled from another thread. IOException The task ended with IOError. WebException The task ended with WebError. See Also RunTask(ITask)"
  },
  "api/NanoByte.Common.Tasks.TaskHandlerBase.html": {
    "href": "api/NanoByte.Common.Tasks.TaskHandlerBase.html",
    "title": "Class TaskHandlerBase | NanoByte.Common",
    "summary": "Class TaskHandlerBase Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Common base class for ITaskHandler implementations. [MustDisposeResource] public abstract class TaskHandlerBase : ITaskHandler Inheritance object TaskHandlerBase Implements ITaskHandler Derived CliTaskHandler GuiTaskHandlerBase Extension Methods TaskHandlerExtensions.OutputLow(ITaskHandler, string, string) TaskHandlerExtensions.OutputLow<T>(ITaskHandler, string, NamedCollection<T>) TaskHandlerExtensions.OutputLow<T>(ITaskHandler, string, IEnumerable<T>) TaskHandlerExtensions.RunTaskAndReturn<T>(ITaskHandler, ResultTask<T>) BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Remarks This class is thread-safe. Constructors TaskHandlerBase() Registers a Handler. protected TaskHandlerBase() Properties CancellationToken Used to signal when the user wants to cancel the entire current process (and any ITasks it includes). public CancellationToken CancellationToken { get; } Property Value CancellationToken Remarks Once this has been signalled this ITaskHandler cannot be reused, since any subsequently started ITasks will be cancelled immediately. CancellationTokenSource Used to signal the CancellationToken. protected CancellationTokenSource CancellationTokenSource { get; init; } Property Value CancellationTokenSource CredentialProvider Used to ask the user or a keyring for System.Net.NetworkCredentials for specific System.Uris; can be null. protected virtual ICredentialProvider? CredentialProvider { get; } Property Value ICredentialProvider IsInteractive Indicates whether the user can provide input. protected virtual bool IsInteractive { get; } Property Value bool Verbosity The detail level of messages displayed to the user. public Verbosity Verbosity { get; set; } Property Value Verbosity Methods Ask(string, bool?, string?) Asks the user a Yes/No/Cancel question. public bool Ask(string question, bool? defaultAnswer = null, string? alternateMessage = null) Parameters question string The question and comprehensive information to help the user make an informed decision. defaultAnswer bool? The default answer to preselect. May be chosen automatically if the user cannot be asked. null if the user must make the choice themselves. alternateMessage string A message to output with Warn(string, Exception?) when the defaultAnswer is used instead of asking the user. Returns bool true if the user answered with 'Yes'; false if the user answered with 'No'. Exceptions OperationCanceledException Throw if the user answered with 'Cancel' or if no answer can be obtained. AskInteractive(string, bool) Asks the user a Yes/No/Cancel question. protected abstract bool AskInteractive(string question, bool defaultAnswer) Parameters question string The question and comprehensive information to help the user make an informed decision. defaultAnswer bool The default answer to preselect. Returns bool true if the user answered with 'Yes'; false if the user answered with 'No'. Exceptions OperationCanceledException Throw if the user answered with 'Cancel'. DisplayLogEntry(LogSeverity, string) Hook called when a Log entry should be shown to the user. protected abstract void DisplayLogEntry(LogSeverity severity, string message) Parameters severity LogSeverity The type/severity of the entry. message string The message of the entry including. Dispose() Unregisters the Handler. public virtual void Dispose() Error(Exception) Displays an error message to the user. public abstract void Error(Exception exception) Parameters exception Exception The exception representing the error that occurred. LogHandler(LogSeverity, string?, Exception?) Called for each Log entry. Handles exception messages. protected virtual void LogHandler(LogSeverity severity, string? message, Exception? exception) Parameters severity LogSeverity The type/severity of the entry. message string The message of the entry. exception Exception An optional exception associated with the entry. Output(string, string) Displays multi-line text to the user. public abstract void Output(string title, string message) Parameters title string A title for the message. message string The string to display. Trailing linebreaks are appropriately handled or ignored. Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, NamedCollection<T>) Displays tree-like data to the user. public virtual void Output<T>(string title, NamedCollection<T> data) where T : INamed Parameters title string A title for the data.INamed data NamedCollection<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. Output<T>(string, IEnumerable<T>) Displays tabular data to the user. public virtual void Output<T>(string title, IEnumerable<T> data) Parameters title string A title for the data. data IEnumerable<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. RunTask(ITask) Runs an ITask and tracks its progress. Returns once the task has been completed. public virtual void RunTask(ITask task) Parameters task ITask The task to be run. (Run(CancellationToken, ICredentialProvider?, IProgress<TaskSnapshot>?) or equivalent is called on it.) Exceptions OperationCanceledException The user canceled the task. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.TaskHandlerExtensions.html": {
    "href": "api/NanoByte.Common.Tasks.TaskHandlerExtensions.html",
    "title": "Class TaskHandlerExtensions | NanoByte.Common",
    "summary": "Class TaskHandlerExtensions Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Extension methods for ITaskHandler public static class TaskHandlerExtensions Inheritance object TaskHandlerExtensions Methods OutputLow(ITaskHandler, string, string) Displays multi-line text to the user unless Verbosity is Batch. public static void OutputLow(this ITaskHandler handler, string title, string message) Parameters handler ITaskHandler The underlying ITaskHandler. title string A title for the message. message string The string to display. Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. OutputLow<T>(ITaskHandler, string, NamedCollection<T>) Displays tree-like data to the user unless Verbosity is Batch. public static void OutputLow<T>(this ITaskHandler handler, string title, NamedCollection<T> data) where T : INamed Parameters handler ITaskHandler The underlying ITaskHandler. title string A title for the data.INamed data NamedCollection<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. OutputLow<T>(ITaskHandler, string, IEnumerable<T>) Displays tabular data to the user unless Verbosity is Batch. public static void OutputLow<T>(this ITaskHandler handler, string title, IEnumerable<T> data) Parameters handler ITaskHandler The underlying ITaskHandler. title string A title for the data. data IEnumerable<T> The data to display. Type Parameters T Remarks Implementations may close the UI as a side effect. Therefore this should be your last call on the handler. RunTaskAndReturn<T>(ITaskHandler, ResultTask<T>) Runs an IResultTask<T> and returns it's result once it has been completed. public static T RunTaskAndReturn<T>(this ITaskHandler handler, ResultTask<T> task) Parameters handler ITaskHandler The task handler. task ResultTask<T> The task to be run. (Run(CancellationToken, ICredentialProvider?, IProgress<TaskSnapshot>?) or equivalent is called on it.) Returns T The Result. Type Parameters T Exceptions OperationCanceledException The user canceled the task. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Tasks.TaskSnapshot.html": {
    "href": "api/NanoByte.Common.Tasks.TaskSnapshot.html",
    "title": "Struct TaskSnapshot | NanoByte.Common",
    "summary": "Struct TaskSnapshot Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Represents a progress snapshot of an ITask. [Serializable] public readonly record struct TaskSnapshot Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors TaskSnapshot(TaskState, bool, long, long) Represents a progress snapshot of an ITask. public TaskSnapshot(TaskState State, bool UnitsByte = false, long UnitsProcessed = 0, long UnitsTotal = -1) Parameters State TaskState The current State of the task. UnitsByte bool true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. UnitsProcessed long The number of units that have been processed so far. UnitsTotal long The total number of units that are to be processed; -1 for unknown. Properties State The current State of the task. public TaskState State { get; init; } Property Value TaskState UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. public bool UnitsByte { get; init; } Property Value bool UnitsProcessed The number of units that have been processed so far. public long UnitsProcessed { get; init; } Property Value long UnitsTotal The total number of units that are to be processed; -1 for unknown. public long UnitsTotal { get; init; } Property Value long Value The progress of the task as a value between 0 and 1; -1 when unknown. public double Value { get; } Property Value double Methods ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/NanoByte.Common.Tasks.TaskState.html": {
    "href": "api/NanoByte.Common.Tasks.TaskState.html",
    "title": "Enum TaskState | NanoByte.Common",
    "summary": "Enum TaskState Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll Represents different states a (usually Web- or IO-related) task can be in. public enum TaskState Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) EnumExtensions.GetEnumAttribute<TAttribute>(Enum) EnumExtensions.HasFlag(Enum, Enum) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields Canceled = 7 The task was canceled by the user before completion. Complete = 4 The task has been completed successfully. Data = 3 Handling the actual data. Header = 2 Handling the header. IOError = 6 An error occurred while writing the file. Ready = 0 The task is ready to begin. Started = 1 The task has just been started. WebError = 5 An error occurred during the task. See Also State"
  },
  "api/NanoByte.Common.Tasks.Verbosity.html": {
    "href": "api/NanoByte.Common.Tasks.Verbosity.html",
    "title": "Enum Verbosity | NanoByte.Common",
    "summary": "Enum Verbosity Namespace NanoByte.Common.Tasks Assembly NanoByte.Common.dll public enum Verbosity Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) EnumExtensions.GetEnumAttribute<TAttribute>(Enum) EnumExtensions.HasFlag(Enum, Enum) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Fields Batch = -1 Automatically answer questions with defaults when possible. Avoid non-essential output and questions. Debug = 2 Display detailed information for debugging. Normal = 0 Normal interactive operation. Verbose = 1 Display additional information for troubleshooting. See Also Verbosity"
  },
  "api/NanoByte.Common.Tasks.html": {
    "href": "api/NanoByte.Common.Tasks.html",
    "title": "Namespace NanoByte.Common.Tasks | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Tasks Task system for managing long-running tasks and reporting progress to the user. Classes ActionTask A task that executes an System.Action that can be canceled. Only completion is reported, no intermediate progress. AnsiCliProgress Reports task progress updates using ANSI console output. AnsiCliProgressContext Container for one or more ANSI console progress bars. AnsiCliTaskHandler Informs the user about the progress of tasks and ask questions using ANSI console output. CliProgress Reports task progress updates using console output. CliTaskHandler Informs the user about the progress of tasks and ask questions using console output. DeferredProgress<T> Remembers the latest call made to Report(T). Forwards that call (if any) and all future calls to a target System.IProgress<T> implementation once it is set. DialogTaskHandler Uses simple WinForms dialog boxes to inform the user about the progress of tasks. ForEachTask Provides a static factory method for ForEachTask<T> as an alternative to calling the constructor to exploit type inference. ForEachTask<T> A task that executes an action once for each element of a collection. GuiTaskHandlerBase Common base class for WinForms ITaskHandler implementations. PercentageTask A task that executes an System.Action<T> and reports progress in percent. ResultTask Provides a static factory method for ResultTask<T> as an alternative to calling the constructor to exploit type inference. ResultTask<T> A task that executes a callback and the provides a result. Only completion is reported, no intermediate progress. SilentTaskHandler Executes tasks silently and suppresses any questions. TaskBase Abstract base class for ITask implementations. TaskHandlerBase Common base class for ITaskHandler implementations. TaskHandlerExtensions Extension methods for ITaskHandler Structs TaskSnapshot Represents a progress snapshot of an ITask. Interfaces IResultTask<T> A task the provides a result. ITask Represents an operation that can be cancelled and have its progress tracked. ITaskHandler Used to run and track ITasks and ask the user questions. Specific implementations provide different kinds of user interfaces. Enums TaskState Represents different states a (usually Web- or IO-related) task can be in. Verbosity Delegates PercentProgressCallback A callback to be called by a workload to report its progress in percent."
  },
  "api/NanoByte.Common.Threading.ActionExtensions.html": {
    "href": "api/NanoByte.Common.Threading.ActionExtensions.html",
    "title": "Class ActionExtensions | NanoByte.Common",
    "summary": "Class ActionExtensions Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Provides extension methods for System.Action<T> public static class ActionExtensions Inheritance object ActionExtensions Methods ToMarshalByRef<T>(Action<T>) Wraps a delegate so that it is marshalled by reference when passed via .NET Remoting. public static Action<T> ToMarshalByRef<T>(this Action<T> action) Parameters action Action<T> Returns Action<T> Type Parameters T"
  },
  "api/NanoByte.Common.Threading.AsyncFormWrapper-1.html": {
    "href": "api/NanoByte.Common.Threading.AsyncFormWrapper-1.html",
    "title": "Class AsyncFormWrapper<T> | NanoByte.Common",
    "summary": "Class AsyncFormWrapper<T> Namespace NanoByte.Common.Threading Assembly NanoByte.Common.WinForms.dll Lazily starts a separate thread with a message loop for a System.Windows.Forms.Form. public sealed class AsyncFormWrapper<T> where T : Form Type Parameters T The type of the form to wrap. Inheritance object AsyncFormWrapper<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors AsyncFormWrapper(Func<T>) Creates a new asynchronous form wrapper. public AsyncFormWrapper(Func<T> init) Parameters init Func<T> Callback that creates an instance of the form for the message loop. Methods Close() Closes the System.Windows.Forms.Form and stops the message loop. public void Close() Remarks Does nothing if the System.Windows.Forms.Form was not yet created. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Post(Action<T>) Starts the message loop if it is not running yet and executes an action on its thread waiting for it to complete. public void Post(Action<T> action) Parameters action Action<T> The action to execute; gets passed the T instance. Exceptions OperationCanceledException The form was closed. Post<TResult>(Func<T, TResult>) Starts the message loop if it is not running yet and executes an action on its thread waiting for it to complete. public TResult Post<TResult>(Func<T, TResult> action) Parameters action Func<T, TResult> A delegate that is passed the System.Windows.Forms.Form instance and returns a result. Returns TResult The result returned by action. Type Parameters TResult The type of the result returned by action. Exceptions OperationCanceledException The form was closed. Send(Action<T>) Starts the message loop if it is not running yet and executes an action on its thread without waiting for it to complete. public void Send(Action<T> action) Parameters action Action<T> The action to execute; gets passed the T instance. Exceptions OperationCanceledException The form was closed. SendLow(Action<T>) Executes an action on the message loop thread without waiting for it to complete. public void SendLow(Action<T> action) Parameters action Action<T> The action to execute; gets passed the T instance. Remarks Does nothing if the System.Windows.Forms.Form was not yet created."
  },
  "api/NanoByte.Common.Threading.CancellationGuard.html": {
    "href": "api/NanoByte.Common.Threading.CancellationGuard.html",
    "title": "Class CancellationGuard | NanoByte.Common",
    "summary": "Class CancellationGuard Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Ensures that a block of code running on a background thread cleanly exits before a System.Threading.CancellationTokenSource.Cancel() call completes. [MustDisposeResource] public class CancellationGuard Inheritance object CancellationGuard Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Examples This class is best used in a using-block: using (new CancellationGuard(cancellationToken)) { // Your code } Remarks Do not use this if System.Threading.CancellationTokenSource.Cancel() is called from the same System.Threading.SynchronizationContext the guarded code is running under. This could lead to deadlocks. Constructors CancellationGuard(CancellationToken) Registers a callback for the cancellationToken that blocks calls to System.Threading.CancellationTokenSource.Cancel() until Dispose() has been called. public CancellationGuard(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Used to signal cancellation requests. CancellationGuard(CancellationToken, TimeSpan) Registers a callback for the cancellationToken that blocks calls to System.Threading.CancellationTokenSource.Cancel() until Dispose() has been called. public CancellationGuard(CancellationToken cancellationToken, TimeSpan timeout) Parameters cancellationToken CancellationToken Used to signal cancellation requests. timeout TimeSpan A timespan after which the cancellation will be considered completed even if Dispose() has not been called yet. Methods Dispose() Releases the block and allows System.Threading.CancellationTokenSource.Cancel() to complete. public void Dispose()"
  },
  "api/NanoByte.Common.Threading.FuncExtensions.html": {
    "href": "api/NanoByte.Common.Threading.FuncExtensions.html",
    "title": "Class FuncExtensions | NanoByte.Common",
    "summary": "Class FuncExtensions Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Provides extension methods for System.Func<T, TResult> public static class FuncExtensions Inheritance object FuncExtensions Methods ToMarshalByRef<TIn, TOut>(Func<TIn, TOut>) Wraps a delegate so that it is marshalled by reference when passed via .NET Remoting. public static Func<TIn, TOut> ToMarshalByRef<TIn, TOut>(this Func<TIn, TOut> func) Parameters func Func<TIn, TOut> Returns Func<TIn, TOut> Type Parameters TIn TOut"
  },
  "api/NanoByte.Common.Threading.JobQueue.html": {
    "href": "api/NanoByte.Common.Threading.JobQueue.html",
    "title": "Class JobQueue | NanoByte.Common",
    "summary": "Class JobQueue Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Runs jobs on a single background thread that is started and stopped on demand. public class JobQueue Inheritance object JobQueue Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors JobQueue(CancellationToken) Runs jobs on a single background thread that is started and stopped on demand. public JobQueue(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to stop processing jobs. Methods Enqueue(Action) Adds a job to the work queue. public void Enqueue(Action job) Parameters job Action"
  },
  "api/NanoByte.Common.Threading.MarshalNoTimeout.html": {
    "href": "api/NanoByte.Common.Threading.MarshalNoTimeout.html",
    "title": "Class MarshalNoTimeout | NanoByte.Common",
    "summary": "Class MarshalNoTimeout Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Derive from this class to enable remoting without timeouts. Keeps remoting object alive as long as process is running. public abstract class MarshalNoTimeout : MarshalByRefObject Inheritance object MarshalByRefObject MarshalNoTimeout Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public override object? InitializeLifetimeService() Returns object An object of type System.Runtime.Remoting.Lifetime.ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime property. Exceptions SecurityException The immediate caller does not have infrastructure permission."
  },
  "api/NanoByte.Common.Threading.MutexLock.html": {
    "href": "api/NanoByte.Common.Threading.MutexLock.html",
    "title": "Class MutexLock | NanoByte.Common",
    "summary": "Class MutexLock Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Provides a wrapper around System.Threading.Mutex that automatically acquires on creating and releases on Dispose(). [MustDisposeResource] public sealed class MutexLock Inheritance object MutexLock Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Examples Instead of lock (_object) { code(); } for per-process locking use using (new MutexLock(\"name\") { code(); } for inter-process locking. Remarks Automatically handles System.Threading.AbandonedMutexException with Warn(string, Exception?). Constructors MutexLock(string) Acquires System.Threading.Mutex with name. public MutexLock(string name) Parameters name string Methods Dispose() Releases the System.Threading.Mutex. public void Dispose() Remarks Must be called from the same thread that instantiated this object."
  },
  "api/NanoByte.Common.Threading.ResultRacer-1.html": {
    "href": "api/NanoByte.Common.Threading.ResultRacer-1.html",
    "title": "Class ResultRacer<T> | NanoByte.Common",
    "summary": "Class ResultRacer<T> Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Helper for racing multiple operations against each other, providing the result of the first one that finishes. public class ResultRacer<T> where T : notnull Type Parameters T The type of the result. Inheritance object ResultRacer<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ResultRacer(CancellationToken) Helper for racing multiple operations against each other, providing the result of the first one that finishes. public ResultRacer(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Used to cancel all pending operations. Methods GetResult() Blocks until at least one call to TrySetResult(Func<CancellationToken, T?>) or TrySetResultAsync(Func<CancellationToken, Task<T?>>) succeeded and returns its result. public T GetResult() Returns T GetResultAsync() Waits until at least one call to TrySetResult(Func<CancellationToken, T?>) or TrySetResultAsync(Func<CancellationToken, Task<T?>>) succeeded and returns its result. public Task<T> GetResultAsync() Returns Task<T> TrySetResult(Func<CancellationToken, T?>) Trys to set a result, racing against other calls of this method. public void TrySetResult(Func<CancellationToken, T?> factory) Parameters factory Func<CancellationToken, T> A function that takes a cancellation token (triggered when another call won the race) and returns a possible result. Return null to indicate that the function was unable to provide a result. Exceptions (except System.OperationCanceledException) are passed through to GetResult() and GetResultAsync(). TrySetResultAsync(Func<CancellationToken, Task<T?>>) Trys to set a result, racing against other calls of this method. public Task TrySetResultAsync(Func<CancellationToken, Task<T?>> factory) Parameters factory Func<CancellationToken, Task<T>> A function that takes a cancellation token (triggered when another call won the race) and returns a System.Threading.Tasks.Task<TResult> returning a possible result. Return null to indicate that the function was unable to provide a result. Exceptions (except System.OperationCanceledException) are passed through to GetResult() and GetResultAsync(). Returns Task"
  },
  "api/NanoByte.Common.Threading.ResultRacer.html": {
    "href": "api/NanoByte.Common.Threading.ResultRacer.html",
    "title": "Class ResultRacer | NanoByte.Common",
    "summary": "Class ResultRacer Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Helper for racing multiple operations against each other, providing the result of the first one that finishes. public static class ResultRacer Inheritance object ResultRacer Methods For<TInput, TResult>(IEnumerable<TInput>, Func<TInput, CancellationToken, Task<TResult?>>, CancellationToken) Races an operation for multiple input elements against each other. public static ResultRacer<TResult> For<TInput, TResult>(IEnumerable<TInput> input, Func<TInput, CancellationToken, Task<TResult?>> factory, CancellationToken cancellationToken = default) where TResult : notnull Parameters input IEnumerable<TInput> The input elements to try to produce outputs for. factory Func<TInput, CancellationToken, Task<TResult>> A function that takes an input element and a cancellation token (triggered when another call won the race) and returns a System.Threading.Tasks.Task<TResult> returning a possible result. Return null to indicate that the function was unable to provide a result. Exceptions (except System.OperationCanceledException) are passed through to GetResult() and GetResultAsync(). cancellationToken CancellationToken Used to cancel all pending operations. Returns ResultRacer<TResult> Type Parameters TInput The type of the input elements. TResult The type of the result. For<TInput, TResult>(IEnumerable<TInput>, Func<TInput, CancellationToken, TResult?>, CancellationToken) Races an operation for multiple input elements against each other. public static ResultRacer<TResult> For<TInput, TResult>(IEnumerable<TInput> input, Func<TInput, CancellationToken, TResult?> factory, CancellationToken cancellationToken = default) where TResult : notnull Parameters input IEnumerable<TInput> The input elements to try to produce outputs for. factory Func<TInput, CancellationToken, TResult> A function that takes an input element and a cancellation token (triggered when another call won the race) and returns a possible result. Return null to indicate that the function was unable to provide a result. Exceptions (except System.OperationCanceledException) are passed through to GetResult() and GetResultAsync(). cancellationToken CancellationToken Used to cancel all pending operations. Returns ResultRacer<TResult> Type Parameters TInput The type of the input elements. TResult The type of the result."
  },
  "api/NanoByte.Common.Threading.StressTest.html": {
    "href": "api/NanoByte.Common.Threading.StressTest.html",
    "title": "Class StressTest | NanoByte.Common",
    "summary": "Class StressTest Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll public static class StressTest Inheritance object StressTest Methods Run(Action, int) Runs the given action many times in parallel. public static void Run(Action action, int threadCount = 100) Parameters action Action threadCount int Exceptions AggregateException One or more of the executions of the action threw an exception."
  },
  "api/NanoByte.Common.Threading.SynchronousProgress-1.html": {
    "href": "api/NanoByte.Common.Threading.SynchronousProgress-1.html",
    "title": "Class SynchronousProgress<T> | NanoByte.Common",
    "summary": "Class SynchronousProgress<T> Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Reports progress updates using callbacks/events. Performs the callbacks immediately on the same thread. public class SynchronousProgress<T> Type Parameters T Inheritance object SynchronousProgress<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors SynchronousProgress(Action<T>?) Captures the current synchronization context for callbacks. public SynchronousProgress(Action<T>? callback = null) Parameters callback Action<T> Methods OnReport(T) protected void OnReport(T value) Parameters value T Events ProgressChanged Raised for each reported progress value. public event Action<T>? ProgressChanged Event Type Action<T>"
  },
  "api/NanoByte.Common.Threading.TaskExtensions.html": {
    "href": "api/NanoByte.Common.Threading.TaskExtensions.html",
    "title": "Class TaskExtensions | NanoByte.Common",
    "summary": "Class TaskExtensions Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll public static class TaskExtensions Inheritance object TaskExtensions Methods WaitAsync(Task, CancellationToken) Gets a System.Threading.Tasks.Task that will complete when task completes or when the specified cancellationToken has cancellation requested. public static Task WaitAsync(this Task task, CancellationToken cancellationToken) Parameters task Task cancellationToken CancellationToken Returns Task Exceptions OperationCanceledException Cancellation has been requested. WaitAsync<T>(Task<T>, CancellationToken) Gets a System.Threading.Tasks.Task that will complete when task completes or when the specified cancellationToken has cancellation requested. public static Task<T> WaitAsync<T>(this Task<T> task, CancellationToken cancellationToken) Parameters task Task<T> cancellationToken CancellationToken Returns Task<T> Type Parameters T Exceptions OperationCanceledException Cancellation has been requested."
  },
  "api/NanoByte.Common.Threading.ThreadUtils.html": {
    "href": "api/NanoByte.Common.Threading.ThreadUtils.html",
    "title": "Class ThreadUtils | NanoByte.Common",
    "summary": "Class ThreadUtils Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Provides helper methods for launching System.Threading.Threads. public static class ThreadUtils Inheritance object ThreadUtils Methods RunSta(Action) Executes a delegate in a new System.Threading.ApartmentState.STA thread. Blocks the caller until the execution completes. public static void RunSta(Action execute) Parameters execute Action The delegate to execute. Remarks This is useful for code that needs to be executed in a Single-Threaded Apartment (e.g. WinForms code) when the calling thread is not set up to handle COM. RunSta<T>(Func<T>) Executes a delegate in a new System.Threading.ApartmentState.STA thread. Blocks the caller until the execution completes. public static T RunSta<T>(Func<T> execute) Parameters execute Func<T> The delegate to execute. Returns T The return value of execute Type Parameters T The type of the return value of execute. Remarks This is useful for code that needs to be executed in a Single-Threaded Apartment (e.g. WinForms code) when the calling thread is not set up to handle COM. RunTask(Func<Task>) Runs an asynchronous task and blocks until it completes. Avoids deadlocks by ignoring the System.Threading.SynchronizationContext. Rethrows exceptions thrown inside task without System.AggregateException wrapper. public static void RunTask(Func<Task> action) Parameters action Func<Task> Callback for starting the task. Exceptions TaskCanceledException The task was cancelled. RunTask<T>(Func<Task<T>>) Runs an asynchronous task and blocks until it completes. Avoids deadlocks by ignoring the System.Threading.SynchronizationContext. Rethrows exceptions thrown inside task without System.AggregateException wrapper. public static T RunTask<T>(Func<Task<T>> action) Parameters action Func<Task<T>> Callback for starting the task. Returns T Type Parameters T Exceptions TaskCanceledException The task was cancelled. StartAsync(ThreadStart, string?) Starts executing a delegate in a new thread suitable for WinForms. public static Thread StartAsync(ThreadStart execute, string? name = null) Parameters execute ThreadStart The delegate to execute. name string A short name for the new thread; can be null. Returns Thread The newly launched thread. StartBackground(ThreadStart, string?) Starts executing a delegate in a new background thread (automatically terminated when application exits). public static Thread StartBackground(ThreadStart execute, string? name = null) Parameters execute ThreadStart The delegate to execute. name string A short name for the new thread; can be null. Returns Thread The newly launched thread."
  },
  "api/NanoByte.Common.Threading.WaitHandleExtensions.html": {
    "href": "api/NanoByte.Common.Threading.WaitHandleExtensions.html",
    "title": "Class WaitHandleExtensions | NanoByte.Common",
    "summary": "Class WaitHandleExtensions Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Provides extension methods for System.Threading.WaitHandle. public static class WaitHandleExtensions Inheritance object WaitHandleExtensions Methods WaitOne(WaitHandle, CancellationToken, int) Waits for the handle to be signalled. public static void WaitOne(this WaitHandle handle, CancellationToken cancellationToken, int millisecondsTimeout = -1) Parameters handle WaitHandle The handle to wait for. cancellationToken CancellationToken Used to cancel waiting for the handle. millisecondsTimeout int The number of milliseconds to wait, or -1 to wait indefinitely. Remarks Automatically handles System.Threading.AbandonedMutexException with Warn(string, Exception?). Exceptions TimeoutException millisecondsTimeout elapsed without the handle being signalled. OperationCanceledException cancellationToken was signaled while waiting for the handle."
  },
  "api/NanoByte.Common.Threading.WaitTask.html": {
    "href": "api/NanoByte.Common.Threading.WaitTask.html",
    "title": "Class WaitTask | NanoByte.Common",
    "summary": "Class WaitTask Namespace NanoByte.Common.Threading Assembly NanoByte.Common.dll Waits for a System.Threading.WaitHandle to become available or the System.Threading.CancellationToken to be triggered. public sealed class WaitTask : TaskBase, ITask Inheritance object MarshalByRefObject TaskBase WaitTask Implements ITask Inherited Members TaskBase.Tag TaskBase.CanCancel TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors WaitTask(string, WaitHandle?, int) Waits for a System.Threading.WaitHandle to become available or the System.Threading.CancellationToken to be triggered. public WaitTask(string name, WaitHandle? waitHandle = null, int millisecondsTimeout = -1) Parameters name string A name describing the task in human-readable form. waitHandle WaitHandle The System.Threading.WaitHandle to wait for; null to wait for System.Threading.CancellationToken. millisecondsTimeout int The number of milliseconds to wait before raising System.TimeoutException; System.Threading.Timeout.Infinite to wait indefinitely. Properties Name A name describing the task in human-readable form. public override string Name { get; } Property Value string PreventIdle Indicates whether this task should prevent the system from entering idle mode. protected override bool PreventIdle { get; } Property Value bool UnitsByte true if UnitsProcessed and UnitsTotal are measured in bytes; false if they are measured in generic units. protected override bool UnitsByte { get; } Property Value bool Methods Execute() The actual code to be executed. protected override void Execute() Remarks State is automatically set to Started before calling this method, to Complete after a successful exit and to an appropriate error state in case on an exception. You can set additional TaskStates during execution. Exceptions OperationCanceledException The operation was canceled. IOException The task ended with IOError. WebException The task ended with WebError."
  },
  "api/NanoByte.Common.Threading.html": {
    "href": "api/NanoByte.Common.Threading.html",
    "title": "Namespace NanoByte.Common.Threading | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Threading Helpers for working with threads. Classes ActionExtensions Provides extension methods for System.Action<T> AsyncFormWrapper<T> Lazily starts a separate thread with a message loop for a System.Windows.Forms.Form. CancellationGuard Ensures that a block of code running on a background thread cleanly exits before a System.Threading.CancellationTokenSource.Cancel() call completes. FuncExtensions Provides extension methods for System.Func<T, TResult> JobQueue Runs jobs on a single background thread that is started and stopped on demand. MarshalNoTimeout Derive from this class to enable remoting without timeouts. Keeps remoting object alive as long as process is running. MutexLock Provides a wrapper around System.Threading.Mutex that automatically acquires on creating and releases on Dispose(). ResultRacer Helper for racing multiple operations against each other, providing the result of the first one that finishes. ResultRacer<T> Helper for racing multiple operations against each other, providing the result of the first one that finishes. StressTest SynchronousProgress<T> Reports progress updates using callbacks/events. Performs the callbacks immediately on the same thread. TaskExtensions ThreadUtils Provides helper methods for launching System.Threading.Threads. WaitHandleExtensions Provides extension methods for System.Threading.WaitHandle. WaitTask Waits for a System.Threading.WaitHandle to become available or the System.Threading.CancellationToken to be triggered."
  },
  "api/NanoByte.Common.TimedLogEvent.html": {
    "href": "api/NanoByte.Common.TimedLogEvent.html",
    "title": "Struct TimedLogEvent | NanoByte.Common",
    "summary": "Struct TimedLogEvent Namespace NanoByte.Common Assembly NanoByte.Common.dll Structure that allows you to log timed execution blocks. public struct TimedLogEvent Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Examples using(new LogEvent(\"Message\")) {} Constructors TimedLogEvent(string) Starts a new log event. public TimedLogEvent(string entry) Parameters entry string The entry for the log file. Elapsed time will automatically be appended. Methods Dispose() Ends the log event. public void Dispose()"
  },
  "api/NanoByte.Common.Undo.AddToCollection-1.html": {
    "href": "api/NanoByte.Common.Undo.AddToCollection-1.html",
    "title": "Class AddToCollection<T> | NanoByte.Common",
    "summary": "Class AddToCollection<T> Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll An undo command that adds an element to a collection. public sealed class AddToCollection<T> : CollectionCommand<T>, IValueCommand, IUndoCommand where T : notnull Type Parameters T The type of elements the collection contains. Inheritance object SimpleCommand CollectionCommand<T> AddToCollection<T> Implements IValueCommand IUndoCommand Inherited Members CollectionCommand<T>.Value SimpleCommand.Execute() SimpleCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors AddToCollection(ICollection<T>, T) An undo command that adds an element to a collection. public AddToCollection(ICollection<T> collection, T element) Parameters collection ICollection<T> The collection to be modified. element T The element to be added to collection. Methods OnExecute() Adds the element to the collection. protected override void OnExecute() OnUndo() Removes the element from the collection. protected override void OnUndo()"
  },
  "api/NanoByte.Common.Undo.AddToCollection.html": {
    "href": "api/NanoByte.Common.Undo.AddToCollection.html",
    "title": "Class AddToCollection | NanoByte.Common",
    "summary": "Class AddToCollection Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Factory methods for AddToCollection<T>. public static class AddToCollection Inheritance object AddToCollection Methods For<T>(ICollection<T>, T) Creates a new add to collection command. public static AddToCollection<T> For<T>(ICollection<T> collection, T element) where T : notnull Parameters collection ICollection<T> The collection to be modified. element T The element to be added to collection. Returns AddToCollection<T> Type Parameters T The type of elements the collection contains."
  },
  "api/NanoByte.Common.Undo.CollectionCommand-1.html": {
    "href": "api/NanoByte.Common.Undo.CollectionCommand-1.html",
    "title": "Class CollectionCommand<T> | NanoByte.Common",
    "summary": "Class CollectionCommand<T> Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll An undo command that adds or removes an element from a collection. public abstract class CollectionCommand<T> : SimpleCommand, IValueCommand, IUndoCommand where T : notnull Type Parameters T The type of elements the collection contains. Inheritance object SimpleCommand CollectionCommand<T> Implements IValueCommand IUndoCommand Derived AddToCollection<T> RemoveFromCollection<T> Inherited Members SimpleCommand.Execute() SimpleCommand.OnExecute() SimpleCommand.Undo() SimpleCommand.OnUndo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors CollectionCommand(ICollection<T>, T) An undo command that adds or removes an element from a collection. protected CollectionCommand(ICollection<T> collection, T element) Parameters collection ICollection<T> The collection to be modified. element T The element to be added or removed from collection. Fields Collection The collection to be modified. protected readonly ICollection<T> Collection Field Value ICollection<T> Element The element to be added or removed from Collection. protected readonly T Element Field Value T Properties Value public object Value { get; } Property Value object"
  },
  "api/NanoByte.Common.Undo.CommandCollector.html": {
    "href": "api/NanoByte.Common.Undo.CommandCollector.html",
    "title": "Class CommandCollector | NanoByte.Common",
    "summary": "Class CommandCollector Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Executes IUndoCommands and collects them into a CompositeCommand allowing a combined undo later on. public class CommandCollector : ICommandExecutor Inheritance object CommandCollector Implements ICommandExecutor Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties Path The path of the file the data structure being modified was loaded from. null if none. public string? Path { get; set; } Property Value string Methods BuildComposite() Creates a new CompositeCommand containing all IUndoCommands collected so far. public IUndoCommand BuildComposite() Returns IUndoCommand Execute(IUndoCommand) Store an IUndoCommand for later execution. public void Execute(IUndoCommand command) Parameters command IUndoCommand The command to be stored."
  },
  "api/NanoByte.Common.Undo.CommandManager-1.html": {
    "href": "api/NanoByte.Common.Undo.CommandManager-1.html",
    "title": "Class CommandManager<T> | NanoByte.Common",
    "summary": "Class CommandManager<T> Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Executes IUndoCommands for editing a specific object and allows undo/redo operations. public class CommandManager<T> : ICommandManager<T>, ICommandExecutor where T : class Type Parameters T The type of the object being edited. Inheritance object CommandManager<T> Implements ICommandManager<T> ICommandExecutor Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors CommandManager(T, string?) Executes IUndoCommands for editing a specific object and allows undo/redo operations. public CommandManager(T target, string? path = null) Parameters target T The object being edited. path string The path of the file the target was loaded from. null if none. Properties Path The path of the file the Target was loaded from. null if none. public string? Path { get; set; } Property Value string RedoEnabled Indicates whether there currently are operations that can be Redo()ne. public bool RedoEnabled { get; } Property Value bool Target The object being edited. public T? Target { get; set; } Property Value T UndoEnabled Indicates whether there currently are operations that can be Undo()ne. public bool UndoEnabled { get; } Property Value bool Remarks This can also be used as an indicator for unsaved changes. Methods ClearUndo() Clears the undo/redo stacks. protected void ClearUndo() Execute(IUndoCommand) Executes an IUndoCommand and stores it for later undo-operations. public void Execute(IUndoCommand command) Parameters command IUndoCommand The command to be executed. Load(string) Loads an object from an XML file. public static CommandManager<T> Load(string path) Parameters path string The file to load from. Returns CommandManager<T> An ICommandManager<T> containing the loaded object. Exceptions IOException A problem occurs while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurs while deserializing the XML data. Redo() Redoes the last action undone by Undo(). public void Redo() Save(string) Saves the Target to an XML file public virtual void Save(string path) Parameters path string The file to save to. Exceptions IOException A problem occurs while writing the file. UnauthorizedAccessException Write access to the file is not permitted. Undo() Undoes the last action performed by Execute(IUndoCommand). public void Undo() Events RedoEnabledChanged Is raised when the value of RedoEnabled has changed. public event Action? RedoEnabledChanged Event Type Action TargetUpdated Is raised after Target has been updated. public event Action? TargetUpdated Event Type Action UndoEnabledChanged Is raised when the value of UndoEnabled has changed. public event Action? UndoEnabledChanged Event Type Action"
  },
  "api/NanoByte.Common.Undo.CommandManager.html": {
    "href": "api/NanoByte.Common.Undo.CommandManager.html",
    "title": "Class CommandManager | NanoByte.Common",
    "summary": "Class CommandManager Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Factory methods for ICommandManager<T>. public static class CommandManager Inheritance object CommandManager Methods For<T>(T, string?) Creates a new command manager. public static ICommandManager<T> For<T>(T target, string? path = null) where T : class Parameters target T The object being edited. path string The path of the file the target was loaded from. null if none. Returns ICommandManager<T> Type Parameters T"
  },
  "api/NanoByte.Common.Undo.CompositeCommand.html": {
    "href": "api/NanoByte.Common.Undo.CompositeCommand.html",
    "title": "Class CompositeCommand | NanoByte.Common",
    "summary": "Class CompositeCommand Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Combines multiple IUndoCommands into a single atomic transaction. public class CompositeCommand : SimpleCommand, IUndoCommand Inheritance object SimpleCommand CompositeCommand Implements IUndoCommand Inherited Members SimpleCommand.Execute() SimpleCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors CompositeCommand(params IUndoCommand[]) Combines multiple IUndoCommands into a single atomic transaction. public CompositeCommand(params IUndoCommand[] commands) Parameters commands IUndoCommand[] The commands to be contained inside the transaction. Methods OnExecute() Executes all the contained IUndoCommands in order. protected override void OnExecute() OnUndo() Undoes all the contained IUndoCommands in reverse order. protected override void OnUndo()"
  },
  "api/NanoByte.Common.Undo.ConcurrentCommandExecutor.html": {
    "href": "api/NanoByte.Common.Undo.ConcurrentCommandExecutor.html",
    "title": "Class ConcurrentCommandExecutor | NanoByte.Common",
    "summary": "Class ConcurrentCommandExecutor Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Decorator for ICommandExecutor that adds locking for thread-safety. public class ConcurrentCommandExecutor : ICommandExecutor Inheritance object ConcurrentCommandExecutor Implements ICommandExecutor Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ConcurrentCommandExecutor(ICommandExecutor) public ConcurrentCommandExecutor(ICommandExecutor inner) Parameters inner ICommandExecutor Properties Path The path of the file the data structure being modified was loaded from. null if none. public string? Path { get; } Property Value string Methods Execute(IUndoCommand) Executes an IUndoCommand and stores it for later undo-operations. public void Execute(IUndoCommand command) Parameters command IUndoCommand The command to be executed."
  },
  "api/NanoByte.Common.Undo.FirstExecuteCommand.html": {
    "href": "api/NanoByte.Common.Undo.FirstExecuteCommand.html",
    "title": "Class FirstExecuteCommand | NanoByte.Common",
    "summary": "Class FirstExecuteCommand Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll An undo command that does something different on the first call to Execute() than on subsequent redo calls. public abstract class FirstExecuteCommand : IUndoCommand Inheritance object FirstExecuteCommand Implements IUndoCommand Derived PreExecutedCommand Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Execute() Performs the desired action. public void Execute() OnFirstExecute() Template method to perform the desired action the first time. protected abstract void OnFirstExecute() OnRedo() Template method to perform the desired action again. protected abstract void OnRedo() OnUndo() Template method to undo the changes made by OnFirstExecute() or OnRedo(). protected abstract void OnUndo() Undo() Undoes the changes made by Execute(). public virtual void Undo()"
  },
  "api/NanoByte.Common.Undo.ICommandExecutor.html": {
    "href": "api/NanoByte.Common.Undo.ICommandExecutor.html",
    "title": "Interface ICommandExecutor | NanoByte.Common",
    "summary": "Interface ICommandExecutor Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Executes IUndoCommands. public interface ICommandExecutor Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties Path The path of the file the data structure being modified was loaded from. null if none. string? Path { get; } Property Value string Methods Execute(IUndoCommand) Executes an IUndoCommand and stores it for later undo-operations. void Execute(IUndoCommand command) Parameters command IUndoCommand The command to be executed."
  },
  "api/NanoByte.Common.Undo.ICommandManager-1.html": {
    "href": "api/NanoByte.Common.Undo.ICommandManager-1.html",
    "title": "Interface ICommandManager<T> | NanoByte.Common",
    "summary": "Interface ICommandManager<T> Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Executes IUndoCommands for editing a specific object and allows undo/redo operations. public interface ICommandManager<T> : ICommandExecutor where T : class Type Parameters T The type of the object being edited. Inherited Members ICommandExecutor.Path ICommandExecutor.Execute(IUndoCommand) Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties RedoEnabled Indicates whether there currently are operations that can be Redo()ne. bool RedoEnabled { get; } Property Value bool Target The object being edited. T? Target { get; set; } Property Value T UndoEnabled Indicates whether there currently are operations that can be Undo()ne. bool UndoEnabled { get; } Property Value bool Remarks This can also be used as an indicator for unsaved changes. Methods Redo() Redoes the last action undone by Undo(). void Redo() Save(string) Saves the Target to an XML file void Save(string path) Parameters path string The file to save to. Exceptions IOException A problem occurs while writing the file. UnauthorizedAccessException Write access to the file is not permitted. Undo() Undoes the last action performed by Execute(IUndoCommand). void Undo() Events RedoEnabledChanged Is raised when the value of RedoEnabled has changed. event Action? RedoEnabledChanged Event Type Action TargetUpdated Is raised after Target has been updated. event Action? TargetUpdated Event Type Action UndoEnabledChanged Is raised when the value of UndoEnabled has changed. event Action? UndoEnabledChanged Event Type Action"
  },
  "api/NanoByte.Common.Undo.IUndoCommand.html": {
    "href": "api/NanoByte.Common.Undo.IUndoCommand.html",
    "title": "Interface IUndoCommand | NanoByte.Common",
    "summary": "Interface IUndoCommand Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll A executable command with an undo function. public interface IUndoCommand Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Execute() Performs the desired action. void Execute() Undo() Undoes changes made by Execute(). void Undo()"
  },
  "api/NanoByte.Common.Undo.IValueCommand.html": {
    "href": "api/NanoByte.Common.Undo.IValueCommand.html",
    "title": "Interface IValueCommand | NanoByte.Common",
    "summary": "Interface IValueCommand Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll A command that exposes the value it will set. public interface IValueCommand : IUndoCommand Inherited Members IUndoCommand.Execute() IUndoCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties Value object? Value { get; } Property Value object"
  },
  "api/NanoByte.Common.Undo.MultiPropertyChangedCommand.html": {
    "href": "api/NanoByte.Common.Undo.MultiPropertyChangedCommand.html",
    "title": "Class MultiPropertyChangedCommand | NanoByte.Common",
    "summary": "Class MultiPropertyChangedCommand Namespace NanoByte.Common.Undo Assembly NanoByte.Common.WinForms.dll An undo command that handles multiple changed properties - usually used with a System.Windows.Forms.PropertyGrid. public class MultiPropertyChangedCommand : PreExecutedCommand, IUndoCommand Inheritance object FirstExecuteCommand PreExecutedCommand MultiPropertyChangedCommand Implements IUndoCommand Inherited Members PreExecutedCommand.OnFirstExecute() FirstExecuteCommand.Execute() FirstExecuteCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors MultiPropertyChangedCommand(object[], PropertyDescriptor, object?[], object?) Initializes the command after the properties were first changed. public MultiPropertyChangedCommand(object[] targets, PropertyDescriptor property, object?[] oldValues, object? newValue) Parameters targets object[] The objects the property belongs to. property PropertyDescriptor The property that was changed. oldValues object[] The property's old values. newValue object The property's current value. MultiPropertyChangedCommand(object[], GridItem, object?[]) Initializes the command after the property was first changed. public MultiPropertyChangedCommand(object[] targets, GridItem gridItem, object?[] oldValues) Parameters targets object[] The objects the System.Windows.Forms.PropertyGrid.SelectedObject is target at. gridItem GridItem The grid item representing the property being changed. oldValues object[] The property's old values. Methods OnRedo() Set the changed property value again. protected override void OnRedo() OnUndo() Restore the original property values. protected override void OnUndo() See Also MultiPropertyTracker"
  },
  "api/NanoByte.Common.Undo.MultiPropertyTracker.html": {
    "href": "api/NanoByte.Common.Undo.MultiPropertyTracker.html",
    "title": "Class MultiPropertyTracker | NanoByte.Common",
    "summary": "Class MultiPropertyTracker Namespace NanoByte.Common.Undo Assembly NanoByte.Common.WinForms.dll Tracks values in System.Windows.Forms.PropertyGrids in order to be able to generate MultiPropertyChangedCommands after a property was changed. public class MultiPropertyTracker Inheritance object MultiPropertyTracker Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors MultiPropertyTracker(PropertyGrid) Creates a new multi-property tracker. public MultiPropertyTracker(PropertyGrid propertyGrid) Parameters propertyGrid PropertyGrid The property grid being tracked. Methods GetCommand(GridItem) Creates an undo command representing a property change the System.Windows.Forms.PropertyGrid has just performed. public IUndoCommand GetCommand(GridItem changedItem) Parameters changedItem GridItem The property grid item that was changed. Returns IUndoCommand Exceptions InvalidOperationException No change was recorded yet."
  },
  "api/NanoByte.Common.Undo.PreExecutedCommand.html": {
    "href": "api/NanoByte.Common.Undo.PreExecutedCommand.html",
    "title": "Class PreExecutedCommand | NanoByte.Common",
    "summary": "Class PreExecutedCommand Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll An undo command that does nothing on the first Execute() call, because the action was already performed beforehand public abstract class PreExecutedCommand : FirstExecuteCommand, IUndoCommand Inheritance object FirstExecuteCommand PreExecutedCommand Implements IUndoCommand Derived MultiPropertyChangedCommand PreExecutedCompositeCommand PropertyChangedCommand Inherited Members FirstExecuteCommand.Execute() FirstExecuteCommand.OnRedo() FirstExecuteCommand.Undo() FirstExecuteCommand.OnUndo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods OnFirstExecute() Do nothing on first execute. protected override sealed void OnFirstExecute()"
  },
  "api/NanoByte.Common.Undo.PreExecutedCompositeCommand.html": {
    "href": "api/NanoByte.Common.Undo.PreExecutedCompositeCommand.html",
    "title": "Class PreExecutedCompositeCommand | NanoByte.Common",
    "summary": "Class PreExecutedCompositeCommand Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Combines multiple already executed IUndoCommands into a single atomic transaction. public class PreExecutedCompositeCommand : PreExecutedCommand, IUndoCommand Inheritance object FirstExecuteCommand PreExecutedCommand PreExecutedCompositeCommand Implements IUndoCommand Inherited Members PreExecutedCommand.OnFirstExecute() FirstExecuteCommand.Execute() FirstExecuteCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors PreExecutedCompositeCommand(IEnumerable<IUndoCommand>) Combines multiple already executed IUndoCommands into a single atomic transaction. public PreExecutedCompositeCommand(IEnumerable<IUndoCommand> commands) Parameters commands IEnumerable<IUndoCommand> The commands to be contained inside the transaction. Methods OnRedo() Executes all the contained IUndoCommands in order. protected override void OnRedo() OnUndo() Undoes all the contained IUndoCommands in reverse order. protected override void OnUndo()"
  },
  "api/NanoByte.Common.Undo.PropertyChangedCommand.html": {
    "href": "api/NanoByte.Common.Undo.PropertyChangedCommand.html",
    "title": "Class PropertyChangedCommand | NanoByte.Common",
    "summary": "Class PropertyChangedCommand Namespace NanoByte.Common.Undo Assembly NanoByte.Common.WinForms.dll An undo command that handles a changed property - usually used with a System.Windows.Forms.PropertyGrid. public class PropertyChangedCommand : PreExecutedCommand, IUndoCommand Inheritance object FirstExecuteCommand PreExecutedCommand PropertyChangedCommand Implements IUndoCommand Inherited Members PreExecutedCommand.OnFirstExecute() FirstExecuteCommand.Execute() FirstExecuteCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors PropertyChangedCommand(object, PropertyDescriptor, object?, object?) An undo command that handles a changed property - usually used with a System.Windows.Forms.PropertyGrid. public PropertyChangedCommand(object target, PropertyDescriptor property, object? oldValue, object? newValue) Parameters target object The object the property belongs to. property PropertyDescriptor The property that was changed. oldValue object The property's old value. newValue object The property's current value. PropertyChangedCommand(object, PropertyValueChangedEventArgs) Initializes the command after the property was first changed. public PropertyChangedCommand(object target, PropertyValueChangedEventArgs e) Parameters target object The object the System.Windows.Forms.PropertyGrid.SelectedObject is target at. e PropertyValueChangedEventArgs The event data from the System.Windows.Forms.PropertyGrid.PropertyValueChanged. Methods OnRedo() Set the changed property value again. protected override void OnRedo() OnUndo() Restore the original property value. protected override void OnUndo()"
  },
  "api/NanoByte.Common.Undo.RemoveFromCollection-1.html": {
    "href": "api/NanoByte.Common.Undo.RemoveFromCollection-1.html",
    "title": "Class RemoveFromCollection<T> | NanoByte.Common",
    "summary": "Class RemoveFromCollection<T> Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll An undo command that removes an element from a collection. public sealed class RemoveFromCollection<T> : CollectionCommand<T>, IValueCommand, IUndoCommand where T : notnull Type Parameters T The type of elements the collection contains. Inheritance object SimpleCommand CollectionCommand<T> RemoveFromCollection<T> Implements IValueCommand IUndoCommand Inherited Members CollectionCommand<T>.Value SimpleCommand.Execute() SimpleCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors RemoveFromCollection(ICollection<T>, T) An undo command that removes an element from a collection. public RemoveFromCollection(ICollection<T> collection, T element) Parameters collection ICollection<T> The collection to be modified. element T The element to be removed from collection. Methods OnExecute() Removes the element from the collection. protected override void OnExecute() OnUndo() Adds the element to the collection. protected override void OnUndo()"
  },
  "api/NanoByte.Common.Undo.RemoveFromCollection.html": {
    "href": "api/NanoByte.Common.Undo.RemoveFromCollection.html",
    "title": "Class RemoveFromCollection | NanoByte.Common",
    "summary": "Class RemoveFromCollection Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Factory methods for RemoveFromCollection<T>. public static class RemoveFromCollection Inheritance object RemoveFromCollection Methods For<T>(ICollection<T>, T) Creates a new remove from collection command. public static RemoveFromCollection<T> For<T>(ICollection<T> collection, T element) where T : notnull Parameters collection ICollection<T> The collection to be modified. element T The element to be removed from collection. Returns RemoveFromCollection<T> Type Parameters T The type of elements the collection contains."
  },
  "api/NanoByte.Common.Undo.ReplaceInList-1.html": {
    "href": "api/NanoByte.Common.Undo.ReplaceInList-1.html",
    "title": "Class ReplaceInList<T> | NanoByte.Common",
    "summary": "Class ReplaceInList<T> Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll An undo command that replaces an element in a list with a new one. public class ReplaceInList<T> : SimpleCommand, IValueCommand, IUndoCommand where T : notnull Type Parameters T The type of elements the list contains. Inheritance object SimpleCommand ReplaceInList<T> Implements IValueCommand IUndoCommand Inherited Members SimpleCommand.Execute() SimpleCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors ReplaceInList(IList<T>, T, T) An undo command that replaces an element in a list with a new one. public ReplaceInList(IList<T> list, T oldElement, T newElement) Parameters list IList<T> The collection to be modified. oldElement T The element to be removed from list. newElement T The element to be added to list. Properties Value public object Value { get; } Property Value object Methods OnExecute() Template method to perform the desired action. protected override void OnExecute() OnUndo() Template method to undo the changes made by OnExecute(). protected override void OnUndo()"
  },
  "api/NanoByte.Common.Undo.ReplaceInList.html": {
    "href": "api/NanoByte.Common.Undo.ReplaceInList.html",
    "title": "Class ReplaceInList | NanoByte.Common",
    "summary": "Class ReplaceInList Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Factory methods for ReplaceInList<T>. public static class ReplaceInList Inheritance object ReplaceInList Methods For<T>(IList<T>, T, T) Creates a new replace in list command. public static ReplaceInList<T> For<T>(IList<T> list, T oldElement, T newElement) where T : notnull Parameters list IList<T> The collection to be modified. oldElement T The element to be removed from list. newElement T The element to be added to list. Returns ReplaceInList<T> Type Parameters T The type of elements the list contains."
  },
  "api/NanoByte.Common.Undo.SetInList-1.html": {
    "href": "api/NanoByte.Common.Undo.SetInList-1.html",
    "title": "Class SetInList<T> | NanoByte.Common",
    "summary": "Class SetInList<T> Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Replaces an entry in a System.Collections.Generic.IList<T> with a new one. public sealed class SetInList<T> : SimpleCommand, IValueCommand, IUndoCommand where T : notnull Type Parameters T The type of elements the list contains. Inheritance object SimpleCommand SetInList<T> Implements IValueCommand IUndoCommand Inherited Members SimpleCommand.Execute() SimpleCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors SetInList(IList<T>, T, T) Replaces an entry in a System.Collections.Generic.IList<T> with a new one. public SetInList(IList<T> list, T oldElement, T newElement) Parameters list IList<T> The list to be modified. oldElement T The old element currently in the list to be replaced. newElement T The new element to take the place of oldElement in the list. Properties Value public object Value { get; } Property Value object Methods OnExecute() Sets the new entry in the list. protected override void OnExecute() OnUndo() Restores the old entry in the list. protected override void OnUndo()"
  },
  "api/NanoByte.Common.Undo.SetInList.html": {
    "href": "api/NanoByte.Common.Undo.SetInList.html",
    "title": "Class SetInList | NanoByte.Common",
    "summary": "Class SetInList Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Factory methods for SetInList<T>. public static class SetInList Inheritance object SetInList Methods For<T>(IList<T>, T, T) Creates a new set in list command. public static SetInList<T> For<T>(IList<T> list, T oldElement, T newElement) where T : notnull Parameters list IList<T> The list to be modified. oldElement T The old element currently in the list to be replaced. newElement T The new element to take the place of oldElement in the list. Returns SetInList<T> Type Parameters T The type of elements the list contains."
  },
  "api/NanoByte.Common.Undo.SetLocalizableString.html": {
    "href": "api/NanoByte.Common.Undo.SetLocalizableString.html",
    "title": "Class SetLocalizableString | NanoByte.Common",
    "summary": "Class SetLocalizableString Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll An undo command that sets a LocalizableString in a LocalizableStringCollection. public sealed class SetLocalizableString : SimpleCommand, IUndoCommand Inheritance object SimpleCommand SetLocalizableString Implements IUndoCommand Inherited Members SimpleCommand.Execute() SimpleCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors SetLocalizableString(LocalizableStringCollection, LocalizableString) An undo command that sets a LocalizableString in a LocalizableStringCollection. public SetLocalizableString(LocalizableStringCollection collection, LocalizableString element) Parameters collection LocalizableStringCollection The collection to be modified. element LocalizableString The entry to be set in the collection. Methods OnExecute() Sets the entry in the collection. protected override void OnExecute() OnUndo() Restores the original entry in the collection. protected override void OnUndo()"
  },
  "api/NanoByte.Common.Undo.SetValueCommand-1.html": {
    "href": "api/NanoByte.Common.Undo.SetValueCommand-1.html",
    "title": "Class SetValueCommand<T> | NanoByte.Common",
    "summary": "Class SetValueCommand<T> Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll An undo command that uses a delegates for getting and setting values from a backing model. public class SetValueCommand<T> : SimpleCommand, IValueCommand, IUndoCommand Type Parameters T The type of the value to set. Inheritance object SimpleCommand SetValueCommand<T> Implements IValueCommand IUndoCommand Inherited Members SimpleCommand.Execute() SimpleCommand.Undo() Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors SetValueCommand(PropertyPointer<T>, T) An undo command that uses a delegates for getting and setting values from a backing model. public SetValueCommand(PropertyPointer<T> pointer, T newValue) Parameters pointer PropertyPointer<T> The object controlling how to read/write the value to be modified. newValue T The new value to be set. Properties Value public object? Value { get; } Property Value object Methods OnExecute() Sets the new value in the model. protected override void OnExecute() OnUndo() Restores the old value in the model. protected override void OnUndo()"
  },
  "api/NanoByte.Common.Undo.SetValueCommand.html": {
    "href": "api/NanoByte.Common.Undo.SetValueCommand.html",
    "title": "Class SetValueCommand | NanoByte.Common",
    "summary": "Class SetValueCommand Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Factory methods for SetValueCommand<T>. public static class SetValueCommand Inheritance object SetValueCommand Methods ForNullable<T>(Func<T?>, Action<T?>, T?) Creates a new command for setting a nullable value. public static SetValueCommand<T?> ForNullable<T>(Func<T?> getValue, Action<T?> setValue, T? newValue) Parameters getValue Func<T> A delegate that returns the current value. setValue Action<T> A delegate that sets the value. newValue T The new value to be set. Returns SetValueCommand<T> Type Parameters T The type of the value to set. ForNullable<T>(Expression<Func<T?>>, T?) Creates a new command for setting a nullable value. public static SetValueCommand<T?> ForNullable<T>(Expression<Func<T?>> expression, T? newValue) Parameters expression Expression<Func<T>> An expression pointing to the property. newValue T The new value to be set. Returns SetValueCommand<T> Type Parameters T The type of value the property contains. For<T>(PropertyPointer<T>, T) Creates a new command for setting a value. public static SetValueCommand<T> For<T>(PropertyPointer<T> pointer, T newValue) Parameters pointer PropertyPointer<T> The object controlling how to read/write the value to be modified. newValue T The new value to be set. Returns SetValueCommand<T> Type Parameters T The type of the value to set. For<T>(Func<T>, Action<T>, T) Creates a new command for setting a value. public static SetValueCommand<T> For<T>(Func<T> getValue, Action<T> setValue, T newValue) where T : notnull Parameters getValue Func<T> A delegate that returns the current value. setValue Action<T> A delegate that sets the value. newValue T The new value to be set. Returns SetValueCommand<T> Type Parameters T The type of the value to set. For<T>(Expression<Func<T>>, T) Creates a new command for setting a value. public static SetValueCommand<T> For<T>(Expression<Func<T>> expression, T newValue) where T : notnull Parameters expression Expression<Func<T>> An expression pointing to the property. newValue T The new value to be set. Returns SetValueCommand<T> Type Parameters T The type of value the property contains."
  },
  "api/NanoByte.Common.Undo.SimpleCommand.html": {
    "href": "api/NanoByte.Common.Undo.SimpleCommand.html",
    "title": "Class SimpleCommand | NanoByte.Common",
    "summary": "Class SimpleCommand Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll An undo command that automatically tracks when Execute() and Undo() can be called. public abstract class SimpleCommand : IUndoCommand Inheritance object SimpleCommand Implements IUndoCommand Derived CollectionCommand<T> CompositeCommand ReplaceInList<T> SetInList<T> SetLocalizableString SetValueCommand<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods Execute() Performs the desired action. public void Execute() OnExecute() Template method to perform the desired action. protected abstract void OnExecute() OnUndo() Template method to undo the changes made by OnExecute(). protected abstract void OnUndo() Undo() Undoes the changes made by Execute(). public virtual void Undo()"
  },
  "api/NanoByte.Common.Undo.SimpleCommandExecutor.html": {
    "href": "api/NanoByte.Common.Undo.SimpleCommandExecutor.html",
    "title": "Class SimpleCommandExecutor | NanoByte.Common",
    "summary": "Class SimpleCommandExecutor Namespace NanoByte.Common.Undo Assembly NanoByte.Common.dll Executes IUndoCommands without any additional handling. public class SimpleCommandExecutor : ICommandExecutor Inheritance object SimpleCommandExecutor Implements ICommandExecutor Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Properties Path The path of the file the data structure being modified was loaded from. null if none. public string? Path { get; set; } Property Value string Methods Execute(IUndoCommand) Executes an IUndoCommand and stores it for later undo-operations. public void Execute(IUndoCommand command) Parameters command IUndoCommand The command to be executed."
  },
  "api/NanoByte.Common.Undo.html": {
    "href": "api/NanoByte.Common.Undo.html",
    "title": "Namespace NanoByte.Common.Undo | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Undo Undo system based on the Command pattern. Classes AddToCollection Factory methods for AddToCollection<T>. AddToCollection<T> An undo command that adds an element to a collection. CollectionCommand<T> An undo command that adds or removes an element from a collection. CommandCollector Executes IUndoCommands and collects them into a CompositeCommand allowing a combined undo later on. CommandManager Factory methods for ICommandManager<T>. CommandManager<T> Executes IUndoCommands for editing a specific object and allows undo/redo operations. CompositeCommand Combines multiple IUndoCommands into a single atomic transaction. ConcurrentCommandExecutor Decorator for ICommandExecutor that adds locking for thread-safety. FirstExecuteCommand An undo command that does something different on the first call to Execute() than on subsequent redo calls. MultiPropertyChangedCommand An undo command that handles multiple changed properties - usually used with a System.Windows.Forms.PropertyGrid. MultiPropertyTracker Tracks values in System.Windows.Forms.PropertyGrids in order to be able to generate MultiPropertyChangedCommands after a property was changed. PreExecutedCommand An undo command that does nothing on the first Execute() call, because the action was already performed beforehand PreExecutedCompositeCommand Combines multiple already executed IUndoCommands into a single atomic transaction. PropertyChangedCommand An undo command that handles a changed property - usually used with a System.Windows.Forms.PropertyGrid. RemoveFromCollection Factory methods for RemoveFromCollection<T>. RemoveFromCollection<T> An undo command that removes an element from a collection. ReplaceInList Factory methods for ReplaceInList<T>. ReplaceInList<T> An undo command that replaces an element in a list with a new one. SetInList Factory methods for SetInList<T>. SetInList<T> Replaces an entry in a System.Collections.Generic.IList<T> with a new one. SetLocalizableString An undo command that sets a LocalizableString in a LocalizableStringCollection. SetValueCommand Factory methods for SetValueCommand<T>. SetValueCommand<T> An undo command that uses a delegates for getting and setting values from a backing model. SimpleCommand An undo command that automatically tracks when Execute() and Undo() can be called. SimpleCommandExecutor Executes IUndoCommands without any additional handling. Interfaces ICommandExecutor Executes IUndoCommands. ICommandManager<T> Executes IUndoCommands for editing a specific object and allows undo/redo operations. IUndoCommand A executable command with an undo function. IValueCommand A command that exposes the value it will set."
  },
  "api/NanoByte.Common.UnixTime.html": {
    "href": "api/NanoByte.Common.UnixTime.html",
    "title": "Struct UnixTime | NanoByte.Common",
    "summary": "Struct UnixTime Namespace NanoByte.Common Assembly NanoByte.Common.dll Represents a point in time as the number of seconds since the Unix epoch (Unix timestamp). [Serializable] public readonly record struct UnixTime Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors UnixTime(long) Represents a point in time as the number of seconds since the Unix epoch (Unix timestamp). public UnixTime(long Seconds) Parameters Seconds long The number of seconds since the Unix epoch (00:00:00 UTC on 1 January 1970). Properties Seconds The number of seconds since the Unix epoch (00:00:00 UTC on 1 January 1970). public long Seconds { get; init; } Property Value long Methods CompareTo(UnixTime) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(UnixTime other) Parameters other UnixTime An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetObjectData(SerializationInfo, StreamingContext) Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object. public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The System.Runtime.Serialization.SerializationInfo to populate with data. context StreamingContext The destination (see System.Runtime.Serialization.StreamingContext) for this serialization. Exceptions SecurityException The caller does not have the required permission. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators implicit operator DateTime(UnixTime) Converts a Unix timestamp to a System.DateTime. public static implicit operator DateTime(UnixTime timestamp) Parameters timestamp UnixTime Returns DateTime implicit operator DateTimeOffset(UnixTime) Converts a Unix timestamp to a System.DateTimeOffset. public static implicit operator DateTimeOffset(UnixTime timestamp) Parameters timestamp UnixTime Returns DateTimeOffset implicit operator long(UnixTime) Converts a Unix timestamp to a number of seconds. public static implicit operator long(UnixTime timestamp) Parameters timestamp UnixTime Returns long implicit operator UnixTime(DateTime) Converts a dateTime to a Unix timestamp. public static implicit operator UnixTime(DateTime dateTime) Parameters dateTime DateTime Returns UnixTime implicit operator UnixTime(DateTimeOffset) Converts a number of dateTime to a Unix timestamp. public static implicit operator UnixTime(DateTimeOffset dateTime) Parameters dateTime DateTimeOffset Returns UnixTime implicit operator UnixTime(long) Converts a number of seconds to a Unix timestamp. public static implicit operator UnixTime(long seconds) Parameters seconds long Returns UnixTime"
  },
  "api/NanoByte.Common.UpdateUtils.html": {
    "href": "api/NanoByte.Common.UpdateUtils.html",
    "title": "Class UpdateUtils | NanoByte.Common",
    "summary": "Class UpdateUtils Namespace NanoByte.Common Assembly NanoByte.Common.dll Provides neat little code-shortcuts for updating properties. public static class UpdateUtils Inheritance object UpdateUtils Methods Swap<T>(ref T, ref T) Swaps the content of two fields. public static void Swap<T>(ref T value1, ref T value2) Parameters value1 T The first field which will afterwards carry the content of value2. value2 T The first field which will afterwards carry the content of value1. Type Parameters T The type of objects to swap. To<T>(T, ref T, Action) Updates a value and calls back a delegate if the original value actually changed. public static void To<T>(this T value, ref T original, Action updated) Parameters value T The new value. original T The original value to update. updated Action Gets called if value is different from original. Type Parameters T The type of data to update. To<T>(T, ref T, ref bool) Updates a value and sets a boolean flag to true if the original value actually changed. public static void To<T>(this T value, ref T original, ref bool updated) Parameters value T The new value. original T The original value to update. updated bool Gets set to true if value is different from original. Type Parameters T The type of data to update. To<T>(T, ref T, ref bool, ref bool) Updates a value and sets two boolean flags to true if the original value actually changed. public static void To<T>(this T value, ref T original, ref bool updated1, ref bool updated2) Parameters value T The new value. original T The original value to update. updated1 bool Gets set to true if value is different from original. updated2 bool Gets set to true if value is different from original. Type Parameters T The type of data to update. To<TIn, TOut>(TIn, Func<TIn, TOut>) Immediately invokes the specified action with the value. Useful for applying null-coalescing operator. public static TOut To<TIn, TOut>(this TIn value, Func<TIn, TOut> action) where TIn : notnull Parameters value TIn The value. action Func<TIn, TOut> The action to invoke. Returns TOut Type Parameters TIn TOut Examples This allows you to write: Uri? uri = nullableString?.To(x => new Uri(x); Instead of: Uri? uri = nullableString == null ? null : new Uri(nullableString);"
  },
  "api/NanoByte.Common.Values.ConversionUtils.html": {
    "href": "api/NanoByte.Common.Values.ConversionUtils.html",
    "title": "Class ConversionUtils | NanoByte.Common",
    "summary": "Class ConversionUtils Namespace NanoByte.Common.Values Assembly NanoByte.Common.dll Helpers for working with type converters. public static class ConversionUtils Inheritance object ConversionUtils Methods ConvertFromString<TType>(string) Uses the type converter for TType (set with System.ComponentModel.TypeConverterAttribute) to parse a string. public static TType ConvertFromString<TType>(this string value) where TType : notnull Parameters value string Returns TType Type Parameters TType ConvertToString<TType>(TType) Uses the type converter for TType (set with System.ComponentModel.TypeConverterAttribute) to generate a string. [Pure] public static string ConvertToString<TType>(this TType value) where TType : notnull Parameters value TType Returns string Type Parameters TType"
  },
  "api/NanoByte.Common.Values.Design.EnumDescriptionConverter-1.html": {
    "href": "api/NanoByte.Common.Values.Design.EnumDescriptionConverter-1.html",
    "title": "Class EnumDescriptionConverter<T> | NanoByte.Common",
    "summary": "Class EnumDescriptionConverter<T> Namespace NanoByte.Common.Values.Design Assembly NanoByte.Common.dll Type converter for System.Enums annotated with System.ComponentModel.DescriptionAttributes. public class EnumDescriptionConverter<T> : TypeConverter where T : struct Type Parameters T The type the converter is used for. Inheritance object TypeConverter EnumDescriptionConverter<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Examples Add this attribute to the System.Enum: [TypeConverter(typeof(DescriptionEnumConverter<NameOfEnum>))] Remarks System.ComponentModel.DescriptionAttribute.Description is used as the case-insensitive string representation (falls back to element name). Methods CanConvertFrom(ITypeDescriptorContext?, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. sourceType Type A System.Type that represents the type you want to convert from. Returns bool true if this converter can perform the conversion; otherwise, false. ConvertFrom(ITypeDescriptorContext?, CultureInfo?, object) Converts the given object to the type of this converter, using the specified context and culture information. public override object ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. culture CultureInfo The System.Globalization.CultureInfo to use as the current culture. value object The object to convert. Returns object An object that represents the converted value. Exceptions NotSupportedException The conversion cannot be performed. ConvertTo(ITypeDescriptorContext?, CultureInfo?, object?, Type) Converts the given value object to the specified type, using the specified context and culture information. public override object ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. culture CultureInfo A System.Globalization.CultureInfo. If null is passed, the current culture is assumed. value object The object to convert. destinationType Type The System.Type to convert the value parameter to. Returns object An object that represents the converted value. Exceptions ArgumentNullException The destinationType parameter is null. NotSupportedException The conversion cannot be performed."
  },
  "api/NanoByte.Common.Values.Design.EnumXmlConverter-1.html": {
    "href": "api/NanoByte.Common.Values.Design.EnumXmlConverter-1.html",
    "title": "Class EnumXmlConverter<T> | NanoByte.Common",
    "summary": "Class EnumXmlConverter<T> Namespace NanoByte.Common.Values.Design Assembly NanoByte.Common.dll Type converter for System.Enums annotated with System.Xml.Serialization.XmlEnumAttributes. public class EnumXmlConverter<T> : TypeConverter where T : struct, Enum Type Parameters T The type the converter is used for. Inheritance object TypeConverter EnumXmlConverter<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Examples Add this attribute to the System.Enum: [TypeConverter(typeof(XmlEnumConverter<NameOfEnum>))] Remarks System.Xml.Serialization.XmlEnumAttribute.Name is used as the case-insensitive string representation (falls back to element name). Methods CanConvertFrom(ITypeDescriptorContext?, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. sourceType Type A System.Type that represents the type you want to convert from. Returns bool true if this converter can perform the conversion; otherwise, false. ConvertFrom(ITypeDescriptorContext?, CultureInfo?, object) Converts the given object to the type of this converter, using the specified context and culture information. public override object ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. culture CultureInfo The System.Globalization.CultureInfo to use as the current culture. value object The object to convert. Returns object An object that represents the converted value. Exceptions NotSupportedException The conversion cannot be performed. ConvertTo(ITypeDescriptorContext?, CultureInfo?, object?, Type) Converts the given value object to the specified type, using the specified context and culture information. public override object ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. culture CultureInfo A System.Globalization.CultureInfo. If null is passed, the current culture is assumed. value object The object to convert. destinationType Type The System.Type to convert the value parameter to. Returns object An object that represents the converted value. Exceptions ArgumentNullException The destinationType parameter is null. NotSupportedException The conversion cannot be performed. GetStandardValues(ITypeDescriptorContext?) Returns a collection of standard values for the data type this type converter is designed for when provided with a format context. public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext? context) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null. Returns TypeConverter.StandardValuesCollection A System.ComponentModel.TypeConverter.StandardValuesCollection that holds a standard set of valid values, or null if the data type does not support a standard set of values. GetStandardValuesExclusive(ITypeDescriptorContext?) Returns whether the collection of standard values returned from System.ComponentModel.TypeConverter.GetStandardValues() is an exclusive list of possible values, using the specified context. public override bool GetStandardValuesExclusive(ITypeDescriptorContext? context) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. Returns bool true if the System.ComponentModel.TypeConverter.StandardValuesCollection returned from System.ComponentModel.TypeConverter.GetStandardValues() is an exhaustive list of possible values; false if other values are possible. GetStandardValuesSupported(ITypeDescriptorContext?) Returns whether this object supports a standard set of values that can be picked from a list, using the specified context. public override bool GetStandardValuesSupported(ITypeDescriptorContext? context) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. Returns bool true if System.ComponentModel.TypeConverter.GetStandardValues() should be called to find a common set of values the object supports; otherwise, false."
  },
  "api/NanoByte.Common.Values.Design.LanguageSetEditor.html": {
    "href": "api/NanoByte.Common.Values.Design.LanguageSetEditor.html",
    "title": "Class LanguageSetEditor | NanoByte.Common",
    "summary": "Class LanguageSetEditor Namespace NanoByte.Common.Values.Design Assembly NanoByte.Common.WinForms.dll An editor that can be associated with LanguageSet properties. Uses a System.Windows.Forms.CheckedListBox. [PermissionSet(SecurityAction.Demand, Name = \"FullTrust\")] public class LanguageSetEditor : UITypeEditor Inheritance object UITypeEditor LanguageSetEditor Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods EditValue(ITypeDescriptorContext?, IServiceProvider, object?) Edits the specified object's value using the editor style indicated by the System.Drawing.Design.UITypeEditor.GetEditStyle() method. public override object EditValue(ITypeDescriptorContext? context, IServiceProvider provider, object? value) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that can be used to gain additional context information. provider IServiceProvider An System.IServiceProvider that this editor can use to obtain services. value object The object to edit. Returns object The new value of the object. If the value of the object has not changed, this should return the same object it was passed. GetEditStyle(ITypeDescriptorContext?) Gets the editor style used by the System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider, object) method. public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext? context) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that can be used to gain additional context information. Returns UITypeEditorEditStyle A System.Drawing.Design.UITypeEditorEditStyle value that indicates the style of editor used by the System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider, object) method. If the System.Drawing.Design.UITypeEditor does not support this method, then System.Drawing.Design.UITypeEditor.GetEditStyle() will return System.Drawing.Design.UITypeEditorEditStyle.None."
  },
  "api/NanoByte.Common.Values.Design.StringConstructorConverter-1.html": {
    "href": "api/NanoByte.Common.Values.Design.StringConstructorConverter-1.html",
    "title": "Class StringConstructorConverter<T> | NanoByte.Common",
    "summary": "Class StringConstructorConverter<T> Namespace NanoByte.Common.Values.Design Assembly NanoByte.Common.dll Generic type converter for classes that have a constructor with a single string argument and a corresponding object.ToString() implementation. public class StringConstructorConverter<T> : TypeConverter Type Parameters T The type the converter is used for. Inheritance object TypeConverter StringConstructorConverter<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Examples Add this attribute to the type: [TypeConverter(typeof(StringConstructorConverter<NameOfType>))] Methods CanConvertFrom(ITypeDescriptorContext?, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. sourceType Type A System.Type that represents the type you want to convert from. Returns bool true if this converter can perform the conversion; otherwise, false. ConvertFrom(ITypeDescriptorContext?, CultureInfo?, object) Converts the given object to the type of this converter, using the specified context and culture information. public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. culture CultureInfo The System.Globalization.CultureInfo to use as the current culture. value object The object to convert. Returns object An object that represents the converted value. Exceptions NotSupportedException The conversion cannot be performed. ConvertTo(ITypeDescriptorContext?, CultureInfo?, object?, Type) Converts the given value object to the specified type, using the specified context and culture information. public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. culture CultureInfo A System.Globalization.CultureInfo. If null is passed, the current culture is assumed. value object The object to convert. destinationType Type The System.Type to convert the value parameter to. Returns object An object that represents the converted value. Exceptions ArgumentNullException The destinationType parameter is null. NotSupportedException The conversion cannot be performed."
  },
  "api/NanoByte.Common.Values.Design.TimeSpanEditor.html": {
    "href": "api/NanoByte.Common.Values.Design.TimeSpanEditor.html",
    "title": "Class TimeSpanEditor | NanoByte.Common",
    "summary": "Class TimeSpanEditor Namespace NanoByte.Common.Values.Design Assembly NanoByte.Common.WinForms.dll An editor that can be associated with System.TimeSpan properties. Uses TimeSpanControl. [PermissionSet(SecurityAction.Demand, Name = \"FullTrust\")] public class TimeSpanEditor : UITypeEditor Inheritance object UITypeEditor TimeSpanEditor Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Methods EditValue(ITypeDescriptorContext?, IServiceProvider, object?) Edits the specified object's value using the editor style indicated by the System.Drawing.Design.UITypeEditor.GetEditStyle() method. public override object EditValue(ITypeDescriptorContext? context, IServiceProvider provider, object? value) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that can be used to gain additional context information. provider IServiceProvider An System.IServiceProvider that this editor can use to obtain services. value object The object to edit. Returns object The new value of the object. If the value of the object has not changed, this should return the same object it was passed. GetEditStyle(ITypeDescriptorContext?) Gets the editor style used by the System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider, object) method. public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext? context) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that can be used to gain additional context information. Returns UITypeEditorEditStyle A System.Drawing.Design.UITypeEditorEditStyle value that indicates the style of editor used by the System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider, object) method. If the System.Drawing.Design.UITypeEditor does not support this method, then System.Drawing.Design.UITypeEditor.GetEditStyle() will return System.Drawing.Design.UITypeEditorEditStyle.None."
  },
  "api/NanoByte.Common.Values.Design.ValueTypeConverter-1.html": {
    "href": "api/NanoByte.Common.Values.Design.ValueTypeConverter-1.html",
    "title": "Class ValueTypeConverter<T> | NanoByte.Common",
    "summary": "Class ValueTypeConverter<T> Namespace NanoByte.Common.Values.Design Assembly NanoByte.Common.dll Abstract base-class for easily creating a System.ComponentModel.TypeConverter for a struct (value type). public abstract class ValueTypeConverter<T> : TypeConverter where T : struct Type Parameters T The struct to create the System.ComponentModel.TypeConverter for. Inheritance object TypeConverter ValueTypeConverter<T> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Examples Add this attribute to the struct: [TypeConverter(typeof(ClassDerivedFromThisOne))] Remarks Providing a System.ComponentModel.TypeConverter for a struct improves the runtime experience with PropertyGrids. Properties NoArguments The number of arguments the constructor of T has. protected abstract int NoArguments { get; } Property Value int Methods CanConvertFrom(ITypeDescriptorContext?, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. sourceType Type A System.Type that represents the type you want to convert from. Returns bool true if this converter can perform the conversion; otherwise, false. CanConvertTo(ITypeDescriptorContext?, Type?) Returns whether this converter can convert the object to the specified type, using the specified context. public override bool CanConvertTo(ITypeDescriptorContext? context, Type? destinationType) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. destinationType Type A System.Type that represents the type you want to convert to. Returns bool true if this converter can perform the conversion; otherwise, false. ConvertFrom(ITypeDescriptorContext?, CultureInfo?, object) Converts the given object to the type of this converter, using the specified context and culture information. public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. culture CultureInfo The System.Globalization.CultureInfo to use as the current culture. value object The object to convert. Returns object An object that represents the converted value. Exceptions NotSupportedException The conversion cannot be performed. ConvertTo(ITypeDescriptorContext?, CultureInfo?, object?, Type) Converts the given value object to the specified type, using the specified context and culture information. public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. culture CultureInfo A System.Globalization.CultureInfo. If null is passed, the current culture is assumed. value object The object to convert. destinationType Type The System.Type to convert the value parameter to. Returns object An object that represents the converted value. Exceptions ArgumentNullException The destinationType parameter is null. NotSupportedException The conversion cannot be performed. CreateInstance(ITypeDescriptorContext?, IDictionary) Creates an instance of the type that this System.ComponentModel.TypeConverter is associated with, using the specified context, given a set of property values for the object. public override object CreateInstance(ITypeDescriptorContext? context, IDictionary propertyValues) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. propertyValues IDictionary An System.Collections.IDictionary of new property values. Returns object An object representing the given System.Collections.IDictionary, or null if the object cannot be created. This method always returns null. GetArguments(T) protected abstract object[] GetArguments(T value) Parameters value T Returns object[] The arguments for the constructor of T. GetConstructor() protected abstract ConstructorInfo GetConstructor() Returns ConstructorInfo The constructor used to create new instances of T (deserialization). GetCreateInstanceSupported(ITypeDescriptorContext?) Returns whether changing a value on this object requires a call to System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary) to create a new value, using the specified context. public override bool GetCreateInstanceSupported(ITypeDescriptorContext? context) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. Returns bool true if changing a property on this object requires a call to System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary) to create a new value; otherwise, false. GetElementSeparator(CultureInfo) The separator to place between individual elements. protected virtual string GetElementSeparator(CultureInfo culture) Parameters culture CultureInfo Returns string GetObject(IDictionary) protected abstract T GetObject(IDictionary propertyValues) Parameters propertyValues IDictionary Returns T A new instance of T. GetObject(string[], CultureInfo) protected abstract T GetObject(string[] values, CultureInfo culture) Parameters values string[] culture CultureInfo Returns T A new instance of T. GetProperties(ITypeDescriptorContext?, object, Attribute[]?) Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes. public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext? context, object value, Attribute[]? attributes) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. value object An object that specifies the type of array for which to get properties. attributes Attribute[] An array of type System.Attribute that is used as a filter. Returns PropertyDescriptorCollection A System.ComponentModel.PropertyDescriptorCollection with the properties that are exposed for this data type, or null if there are no properties. GetPropertiesSupported(ITypeDescriptorContext?) Returns whether this object supports properties, using the specified context. public override bool GetPropertiesSupported(ITypeDescriptorContext? context) Parameters context ITypeDescriptorContext An System.ComponentModel.ITypeDescriptorContext that provides a format context. Returns bool true if System.ComponentModel.TypeConverter.GetProperties(object) should be called to find the properties of this object; otherwise, false. GetValues(T, ITypeDescriptorContext?, CultureInfo) protected abstract string[] GetValues(T value, ITypeDescriptorContext? context, CultureInfo culture) Parameters value T context ITypeDescriptorContext culture CultureInfo Returns string[] The elements of T converted to strings."
  },
  "api/NanoByte.Common.Values.Design.html": {
    "href": "api/NanoByte.Common.Values.Design.html",
    "title": "Namespace NanoByte.Common.Values.Design | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Values.Design <xref:System.ComponentModel.TypeConverter>s used for serialization and to provide a better runtime experience when using <xref:System.Windows.Forms.PropertyGrid>s. Classes EnumDescriptionConverter<T> Type converter for System.Enums annotated with System.ComponentModel.DescriptionAttributes. EnumXmlConverter<T> Type converter for System.Enums annotated with System.Xml.Serialization.XmlEnumAttributes. LanguageSetEditor An editor that can be associated with LanguageSet properties. Uses a System.Windows.Forms.CheckedListBox. StringConstructorConverter<T> Generic type converter for classes that have a constructor with a single string argument and a corresponding object.ToString() implementation. TimeSpanEditor An editor that can be associated with System.TimeSpan properties. Uses TimeSpanControl. ValueTypeConverter<T> Abstract base-class for easily creating a System.ComponentModel.TypeConverter for a struct (value type)."
  },
  "api/NanoByte.Common.Values.EnumExtensions.html": {
    "href": "api/NanoByte.Common.Values.EnumExtensions.html",
    "title": "Class EnumExtensions | NanoByte.Common",
    "summary": "Class EnumExtensions Namespace NanoByte.Common.Values Assembly NanoByte.Common.dll Contains extension methods for System.Enums. public static class EnumExtensions Inheritance object EnumExtensions Methods GetEnumAttribute<TAttribute>(Enum) Gets the first TAttribute attribute set on the target enum value. [Pure] public static TAttribute? GetEnumAttribute<TAttribute>(this Enum target) where TAttribute : Attribute Parameters target Enum Returns TAttribute Type Parameters TAttribute HasFlag(Enum, Enum) Checks whether a flag is set. [Pure] public static bool HasFlag(this Enum enumRef, Enum flag) Parameters enumRef Enum flag Enum Returns bool HasFlag(int, int) Checks whether a flag is set. [Pure] public static bool HasFlag(this int enumRef, int flag) Parameters enumRef int flag int Returns bool HasFlag(ushort, ushort) Checks whether a flag is set. [CLSCompliant(false)] [Pure] public static bool HasFlag(this ushort enumRef, ushort flag) Parameters enumRef ushort flag ushort Returns bool"
  },
  "api/NanoByte.Common.Values.KeyEqualityComparer-2.html": {
    "href": "api/NanoByte.Common.Values.KeyEqualityComparer-2.html",
    "title": "Class KeyEqualityComparer<T, TKey> | NanoByte.Common",
    "summary": "Class KeyEqualityComparer<T, TKey> Namespace NanoByte.Common.Values Assembly NanoByte.Common.dll Specifies the equality of objects based on the equality of a key extracted from the objects. public class KeyEqualityComparer<T, TKey> where T : notnull where TKey : notnull Type Parameters T The type of objects to compare. TKey The type of the key to use to determine equality. Inheritance object KeyEqualityComparer<T, TKey> Extension Methods BinaryStorage.SaveBinary<T>(T, Stream) BinaryStorage.SaveBinary<T>(T, string) JsonStorage.SaveJson<T>(T, Stream) JsonStorage.SaveJson<T>(T, string) JsonStorage.ToJsonString<T>(T) XmlStorage.SaveXml<T>(T, Stream, string?) XmlStorage.SaveXml<T>(T, string, string?) XmlStorage.ToXmlString<T>(T, string?) UpdateUtils.To<T>(T, ref T, Action) UpdateUtils.To<T>(T, ref T, ref bool) UpdateUtils.To<T>(T, ref T, ref bool, ref bool) UpdateUtils.To<TIn, TOut>(TIn, Func<TIn, TOut>) ConversionUtils.ConvertToString<TType>(TType) JsonStorage.ReparseAsJson<T>(object) JsonStorage.ReparseAsJson<T>(object, T) Constructors KeyEqualityComparer(Func<T, TKey>) Specifies the equality of objects based on the equality of a key extracted from the objects. public KeyEqualityComparer(Func<T, TKey> keySelector) Parameters keySelector Func<T, TKey> A function mapping objects to their respective equality keys. Methods Equals(T?, T?) Determines whether the specified objects are equal. public bool Equals(T? x, T? y) Parameters x T The first object of type T to compare. y T The second object of type T to compare. Returns bool true if the specified objects are equal; otherwise, false. GetHashCode(T) Returns a hash code for the specified object. public int GetHashCode(T obj) Parameters obj T The object for which a hash code is to be returned. Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null."
  },
  "api/NanoByte.Common.Values.Languages.html": {
    "href": "api/NanoByte.Common.Values.Languages.html",
    "title": "Class Languages | NanoByte.Common",
    "summary": "Class Languages Namespace NanoByte.Common.Values Assembly NanoByte.Common.dll Provides System.Globalization.CultureInfos. public static class Languages Inheritance object Languages Fields AllKnown All known languages in alphabetical order. public static readonly IEnumerable<CultureInfo> AllKnown Field Value IEnumerable<CultureInfo> Methods FromString(string) Creates a System.Globalization.CultureInfo from a ISO language code either in Windows (e.g. en-US) or Unix (e.g. en_US) format. public static CultureInfo FromString(string langCode) Parameters langCode string Returns CultureInfo SetUI(CultureInfo) Changes the UI language used by this process. Should be called right after startup. public static void SetUI(CultureInfo culture) Parameters culture CultureInfo Remarks This sets System.Globalization.CultureInfo.CurrentUICulture for the current and all future threads."
  },
  "api/NanoByte.Common.Values.html": {
    "href": "api/NanoByte.Common.Values.html",
    "title": "Namespace NanoByte.Common.Values | NanoByte.Common",
    "summary": "Namespace NanoByte.Common.Values Data structures and helpers for Value Types. Classes ConversionUtils Helpers for working with type converters. EnumExtensions Contains extension methods for System.Enums. KeyEqualityComparer<T, TKey> Specifies the equality of objects based on the equality of a key extracted from the objects. Languages Provides System.Globalization.CultureInfos."
  },
  "api/NanoByte.Common.html": {
    "href": "api/NanoByte.Common.html",
    "title": "Namespace NanoByte.Common | NanoByte.Common",
    "summary": "Namespace NanoByte.Common Generic utility classes, interfaces, etc. that are applicable to a wide range of different applications. Classes AnsiCli Helper methods for ANSI console rendering. BitwiseUtils Provides utility functions for bitwise operations. Disposable Invokes a callback on Dispose(). EncodingUtils Helper methods for encoding strings, decoding byte arrays, calculating hashes, etc.. ExceptionUtils Provides helper methods related to System.Exceptions. ExitCodeException Indicates that a System.Diagnostics.Process exited with an unexpected System.Diagnostics.Process.ExitCode. Log A simple logging system. Writes to an in-memory buffer and a plain text file. Allows additional handlers to be registered (e.g., for console or GUI output). MathUtils Provides math-related utility functions. Named Static companion for INamed. NotAdminException Like a System.UnauthorizedAccessException but with the additional hint that retrying the operation as an administrator would fix the problem. ProcessUtils Provides methods for launching child processes. PropertyPointer Provides factory methods for PropertyPointer<T>. PropertyPointer<T> Wraps delegate-based access to a property. StagedOperation Common base class for operations that are first staged and then either committed or rolled back. StringUtils Provides additional or simplified string functions. UpdateUtils Provides neat little code-shortcuts for updating properties. Structs TimedLogEvent Structure that allows you to log timed execution blocks. UnixTime Represents a point in time as the number of seconds since the Unix epoch (Unix timestamp). Interfaces ICloneable<T> Supports cloning. IHighlightColor An object that can be highlighted with a specific color in graphical representations. INamed An entity that has a unique name that can be used for identification in lists and trees. Enums LogSeverity Describes how severe/important a Log entry is. Delegates LogEntryEventHandler Describes an event relating to an entry in the Log."
  },
  "backports.html": {
    "href": "backports.html",
    "title": "Backports | NanoByte.Common",
    "summary": "Backports Newer versions of .NET often introduce features that can be backported to earlier versions. NanoByte.Common simplifies this by embedding commonly used backports. Simply adding a reference to NanoByte.Common to a project targeting an older .NET version allows you to use these features. Language features LINQ was introduced in .NET Framework 3.5 and is backported to .NET Framework 2.0 (by embedding LinqBridge). Nullable reference types, Ranges and Records were introduced in .NET (Core) and are backported to .NET Framework. Required members were introduced in .NET 7.0 and are backported to .NET 6.0 and .NET Framework. Collections The following types were introduced in .NET Framework 4.0 and are backported to .NET Framework 2.0: HashSet SortedSet Cancellation The following types were introduced in .NET Framework 4.0 and are backported to .NET Framework 2.0: CancellationToken CancellationTokenSource CancellationTokenRegistration Progress The following types were introduced in .NET Framework 4.5 and are backported to .NET Framework 2.0 and 4.0: IProgress Progress Utils The following types were introduced in .NET Framework 4.5 and are backported to .NET Framework 2.0 and 4.0: HashCode The following CustomAttributeExtensions methods were introduced in .NET Framework 4.5 and are backported to .NET Framework 2.0 and 4.0: .GetCustomAttribute<T>() .GetCustomAttributes<T>() Platform attributes The following types were introduced in .NET 5.0 and are backported to .NET Framework: OSPlatformAttribute TargetPlatformAttribute SupportedOSPlatformAttribute UnsupportedOSPlatformAttribute System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute The following types were introduced in .NET 6.0 and are backported to .NET Framework: SupportedOSPlatformGuardAttribute UnsupportedOSPlatformGuardAttribute"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | NanoByte.Common",
    "summary": "NanoByte.Common This website documents the API of the NanoByte.Common NuGet packages. NanoByte.Common provides various utility classes and data structures with an emphasis on: integration with native Windows and Linux features, network and disk IO, advanced collections and undo/redo logic. NanoByte.Common.AnsiCli adds ANSI console output. Powered by Spectre.Console. NanoByte.Common.WinForms adds various Windows Forms controls with an emphasis on: progress reporting and data binding."
  },
  "tasks.html": {
    "href": "tasks.html",
    "title": "Task system | NanoByte.Common",
    "summary": "Task system The NanoByte.Common.Tasks namespace provides a framework for managing long-running tasks and reporting progress to the user. Tasks Tasks are represented using the ITask interface. This library provides general-purpose implementations such as ActionTask and ForEachTask, as well as use-case specific ones such as DownloadFile and ReadFile. You can also implement your own. Handlers The ITaskHandler interface represents a user interface for reporting task progress as well as displaying prompts and outputs to the user. This library provides a number of implementations: CliTaskHandler for a basic command-line interface AnsiCliTaskHandler for a more advanced command-line interface using ANSI codes DialogTaskHandler for a graphical interface using WinForms dialog boxes SilentTaskHandler for background execution or unit tests ServiceTaskHandler for integration with Microsoft.Extensions.DependencyInjection Methods that want to run ITasks should take an ITaskHandler as an input parameter. To run an ITask, pass it to the ITaskHandler.RunTask() method. This will then internally call ITask.Run() and take care of setting up progress tracking, cancellation, etc.. Additional methods such as ITaskHandler.Ask() can be used for user interaction. Threading ITasks provide no threading or asynchronicity concept by themselves. Their .Run() methods block until the tasks is complete. However, they can be cancelled from other threads via <xref:System.Threading.CancellationToken>s. ITaskHandler implementations are thread-safe and support running multiple ITasks concurrently. ITaskHandler.RunTask() blocks until the tasks is complete, however some implementations may perform the actual task execution on a separate thread. DialogTaskHandler keeps the WinForms message loop pumping while a task is running, so calling .RunTask() from the GUI thread will not freeze the GUI. However it does prevent user interaction (other than canceling the task) via a modal dialog box. Comparison with async/await While ITask has some superficial similarities with the <xref:System.Threading.Tasks.Task> class used by the C# async/await keywords, these two concepts should not be confused. The async/await keywords are part of the Task Asynchronous Programming model (TAP). The TAP provides an abstraction over asynchronous code, enabling the execution of continuations after tasks have completed. This is intended to increase the performance and responsiveness of applications. Many TAP methods accept <xref:System.Threading.CancellationToken>s to signal that a task should be cancelled and <xref:System.IProgress`1> to report a task's progress. NanoByte.Common's Task system is intended for managing long-running tasks. It provides an abstraction over UIs for interacting with such tasks. It uses the same <xref:System.Threading.CancellationToken> and <xref:System.IProgress`1> as the TAP, but takes care of managing them internally for most use cases. As a rule of thumb: Use await and <xref:System.Threading.Tasks.Task> if you want to trigger a short task from a GUI thread. Use ITaskHandler.RunTask() and ITask if you want to run a longer task on a non-GUI thread (potentially reporting back to a GUI thread)."
  },
  "undo.html": {
    "href": "undo.html",
    "title": "Undo system | NanoByte.Common",
    "summary": "Undo system The NanoByte.Common.Undo namespace provides a framework for adding undo/redo functionality to your applications. Commands Commands that can be executed and also undone are represented using the IUndoCommand interface. This library provides a number of implementations for common use cases such as SetValueCommand and AddToCollection, but you can also implement your own. Executors Methods that want to execute IUndoCommands should take an ICommandExecutor as an input parameter. To execute an IUndoCommand, pass it to the ICommandExecutor.Execute() method. This will then internally call IUndoCommand.Execute() and record the command for later undo operations. The class CommandManager<T> implements the ICommandExecutor interface. You can expose the .Undo() and .Redo() methods of this class to your users in your GUI."
  }
}